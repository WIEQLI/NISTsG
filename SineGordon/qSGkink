qSG[-3., 0.] = {{0.9988944435091153 + 9.647264196012815*^-19*I, 
      -0.047009474860053975 - 2.0388762499878416*^-18*I}, 
     {0.047009474860006645 - 1.5545131051029302*^-18*I, 
      0.9988944435091142 - 1.6481090809291123*^-17*I}}
 
qSG[-3., 0.2] = {{0.9985079433605045 + 1.2325083019144324*^-18*I, 
      -0.05460665752433329 - 8.027318835744717*^-18*I}, 
     {0.054606657524278304 - 6.772914302440336*^-18*I, 
      0.9985079433605031 - 1.6672044793129384*^-17*I}}
 
qSG[-3., 0.4] = {{0.9979864597088154 + 1.5137907234131916*^-18*I, 
      -0.06342733037004458 - 1.7834392982656622*^-17*I}, 
     {0.06342733036998072 - 1.6816910114916533*^-17*I, 
      0.9979864597088134 - 1.69696368868655*^-17*I}}
 
qSG[-3., 0.6000000000000001] = 
    {{0.9972829618672947 + 1.6740071616544267*^-18*I, 
      -0.07366609782799635 - 3.104628194487188*^-17*I}, 
     {0.07366609782792219 - 2.6936395898146027*^-17*I, 
      0.9972829618672919 - 1.7163362980372722*^-17*I}}
 
qSG[-3., 0.8] = {{-0.9963341244306356 + 2.7637933653972288*^-14*I, 
      0.08554713611049136 - 1.6154063373218494*^-15*I}, 
     {-0.08554713611024013 + 3.2843904462064325*^-14*I, 
      -0.9963341244285673 + 1.052324985797276*^-15*I}}
 
qSG[-3., 1.] = {{-0.9950547567144743 + 5.0774812830507945*^-15*I, 
      0.09932789709530632 - 6.4104192412701685*^-16*I}, 
     {-0.09932789709566824 + 3.7559294241551417*^-13*I, 
      -0.995054756712471 - 1.821559099604026*^-14*I}}
 
qSG[-3., 1.2000000000000002] = 
    {{-0.9933303893387309 + 6.134688056747778*^-15*I, 
      0.11530280836858448 - 8.015875057499394*^-16*I}, 
     {-0.11530280836874789 - 8.430302938555523*^-14*I, 
      -0.9933303893367174 + 4.792481384857391*^-15*I}}
 
qSG[-3., 1.4000000000000001] = 
    {{-0.9910074588322386 - 5.297857092423534*^-15*I, 
      0.133806638625924 + 9.545887761936726*^-17*I}, 
     {-0.13380663862621445 + 6.277459921581543*^-15*I, 
      -0.9910074588302233 + 9.92416726959859*^-16*I}}
 
qSG[-3., 1.6] = {{-0.987880403723409 + 2.439710628264604*^-14*I, 
      0.15521697053079814 - 2.2105805599890636*^-15*I}, 
     {-0.1552169705310068 - 7.698545791875362*^-15*I, 
      -0.9878804037214044 + 1.400432269312642*^-15*I}}
 
qSG[-3., 1.8] = {{-0.9836748664007302 + 3.7904023554385067*^-16*I, 
      0.1799548754909615 - 1.5959605341631163*^-16*I}, 
     {-0.17995487549111439 + 6.132717176358387*^-14*I, 
      -0.9836748663987378 - 4.86351535900316*^-15*I}}
 
qSG[-3., 2.] = {{-0.9780261260124714 + 9.41917099135645*^-16*I, 
      0.20848236577341028 - 3.2652510150538987*^-16*I}, 
     {-0.20848236577364343 - 2.345385314481722*^-14*I, 
      -0.978026126010477 + 3.8866851058113586*^-15*I}}
 
qSG[-2.8, 0.] = {{0.9981778988804261 + 1.3511419542428236*^-18*I, 
      -0.06033972312385193 - 6.3901431553504414*^-18*I}, 
     {0.06033972312379117 - 6.742741302535972*^-18*I, 
      0.9981778988804243 - 1.6836900438353362*^-17*I}}
 
qSG[-2.8, 0.2] = {{0.9975412044230139 + 1.715245964458883*^-18*I, 
      -0.07008241918120357 - 1.64652492834829*^-17*I}, 
     {0.070082419181133 - 1.400845862318317*^-17*I, 0.9975412044230114 - 
       1.7137248917460138*^-17*I}}
 
qSG[-2.8, 0.4] = {{-0.9966824000237045 - 8.645998529334455*^-15*I, 
      0.08138914844489775 - 4.1532403465492056*^-17*I}, 
     {-0.08138914844520445 - 2.231249376773389*^-13*I, 
      -0.9966824000216468 + 9.888457662801655*^-15*I}}
 
qSG[-2.8, 0.6000000000000001] = 
    {{-0.9955243058171397 - 1.8616873516389354*^-14*I, 
      0.09450585446871851 + 7.311404661814007*^-16*I}, 
     {-0.09450585446896917 - 1.4779609786756322*^-13*I, 
      -0.9955243058151024 + 9.327341766986425*^-15*I}}
 
qSG[-2.8, 0.8] = {{-0.9939631710901731 - 5.363748577150739*^-15*I, 
      0.10971424026913079 - 3.160058957024579*^-17*I}, 
     {-0.1097142402694601 - 1.2002657102238539*^-13*I, 
      -0.9939631710881776 + 6.86459736264863*^-15*I}}
 
qSG[-2.8, 1.] = {{-0.9918597294513511 - 5.335247422699626*^-15*I, 
      0.1273352939846879 - 1.44010574607524*^-16*I}, 
     {-0.12733529398461937 - 1.556224857751831*^-13*I, 
      -0.9918597294493732 + 1.0649173898883552*^-14*I}}
 
qSG[-2.8, 1.2000000000000002] = 
    {{-0.9890274085665405 - 7.236382029601634*^-15*I, 
      0.14773213971794263 + 3.3806877272049157*^-16*I}, 
     {-0.14773213971822097 + 2.0441136187128476*^-13*I, 
      -0.989027408564529 - 1.352086428736284*^-14*I}}
 
qSG[-2.8, 1.4000000000000001] = 
    {{-0.9852169255921943 - 2.234955897745525*^-15*I, 
      0.17131144015546196 + 3.1547995258165633*^-17*I}, 
     {-0.171311440155635 + 2.3367445690697785*^-14*I, 
      -0.985216925590195 - 1.8678527850589595*^-15*I}}
 
qSG[-2.8, 1.6] = {{-0.980096407012139 - 2.2587981901189526*^-15*I, 
      0.19852212210063286 + 7.68193409608985*^-17*I}, 
     {-0.19852212210084033 - 1.925491530090073*^-14*I, 
      -0.9800964070101483 + 2.9344268721696574*^-15*I}}
 
qSG[-2.8, 1.8] = {{-0.9732261782480189 + 1.1260041755492434*^-15*I, 
      0.2298495289840176 - 2.9709008174665267*^-16*I}, 
     {-0.2298495289842585 + 2.1085213414536332*^-14*I, 
      -0.9732261782460299 - 1.954871989866874*^-15*I}}
 
qSG[-2.8, 2.] = {{-0.9640275979979829 - 8.33932247985287*^-16*I, 
      0.26580216383545985 - 9.572081520434234*^-18*I}, 
     {-0.26580216383575184 + 1.2280825163916538*^-15*I, 
      -0.9640275979960029 + 1.02519717333243*^-15*I}}
 
qSG[-2.6, 0.] = {{0.9969976375425124 + 1.954928855600035*^-18*I, 
      -0.0774319748854305 - 1.4686788098711586*^-17*I}, 
     {0.07743197488535253 - 1.2196275942259246*^-17*I, 
      0.9969976375425094 - 1.7457075441199206*^-17*I}}
 
qSG[-2.6, 0.2] = {{-0.995949361918014 - 7.8074103734804*^-15*I, 
      0.0899158967956637 + 2.946715379401448*^-19*I}, 
     {-0.08991589679576918 + 1.0234917484904766*^-13*I, 
      -0.9959493619160302 - 4.210687213507562*^-15*I}}
 
qSG[-2.6, 0.4] = {{-0.9945360820045439 - 3.1260919697867664*^-14*I, 
      0.10439339822308336 + 1.3752490916109153*^-15*I}, 
     {-0.10439339822319597 + 9.256754519987468*^-14*I, 
      -0.9945360820025377 - 3.282851335085454*^-15*I}}
 
qSG[-2.6, 0.6000000000000001] = 
    {{-0.9926315248182198 + 3.07812379257551*^-14*I, 
      0.12117200971605169 - 1.9899923116644044*^-15*I}, 
     {-0.1211720097163257 - 3.80075892982403*^-14*I, 
      -0.9926315248161726 + 4.15902078748761*^-15*I}}
 
qSG[-2.6, 0.8] = {{-0.990066402728335 + 1.4018825253363578*^-16*I, 
      0.1406005625523808 - 3.1860615361659176*^-17*I}, 
     {-0.14060056255253664 - 1.446692232586644*^-13*I, 
      -0.9900664027263439 + 1.1741487016281458*^-14*I}}
 
qSG[-2.6, 1.] = {{-0.9866143060081489 + 2.0150777274247182*^-15*I, 
      0.16307118439977114 - 3.9132002431262843*^-16*I}, 
     {-0.16307118439995513 - 4.371980411158108*^-14*I, 
      -0.9866143060061443 + 4.672440887878748*^-15*I}}
 
qSG[-2.6, 1.2000000000000002] = 
    {{-0.9819734129109052 - 2.739065927214284*^-15*I, 
      0.18901908987602467 + 1.2186315555180682*^-16*I}, 
     {-0.18901908987621377 + 4.2060925292137474*^-14*I, 
      -0.9819734129089128 - 2.8414123810036253*^-15*I}}
 
qSG[-2.6, 1.4000000000000001] = 
    {{-0.9757431432807366 - 8.940233250393045*^-16*I, 
      0.2189185198699905 - 7.994575989409781*^-18*I}, 
     {-0.21891851987016797 + 9.6225080801241*^-15*I, 
      -0.9757431432787471 - 6.101944784591714*^-17*I}}
 
qSG[-2.6, 1.6] = {{-0.9673950183818705 + 4.9891578435282005*^-15*I, 
      0.2532723403992913 - 8.109632922385824*^-16*I}, 
     {-0.2532723403995781 - 2.143861434220268*^-15*I, 
      -0.9673950183798838 + 1.2436671548393024*^-15*I}}
 
qSG[-2.6, 1.8] = {{-0.9562374801694853 - 3.567463476396262*^-16*I, 
      0.2925916634500232 - 8.190385781530584*^-17*I}, 
     {-0.29259166345035253 + 2.0277192585028733*^-14*I, 
      -0.9562374801675104 - 2.11201625652071*^-15*I}}
 
qSG[-2.6, 2.] = {{-0.941375566719693 + 2.353201088164853*^-15*I, 
      0.33736040429257147 - 4.740248366664802*^-16*I}, 
     {-0.3373604042929133 + 9.87857353766728*^-15*I, 
      -0.9413755667177377 - 8.248412828597509*^-16*I}}
 
qSG[-2.4, 0.] = {{-0.9950547570141419 - 5.088261140265465*^-14*I, 
      0.09932789409339393 + 2.2743377226310162*^-15*I}, 
     {-0.09932789409334487 - 5.336759700130665*^-14*I, 
      -0.9950547570121493 + 3.4362917338027065*^-15*I}}
 
qSG[-2.4, 0.2] = {{-0.9933303897425414 + 2.2805642903155218*^-14*I, 
      0.11530280488991346 - 1.2397147909064821*^-15*I}, 
     {-0.11530280488981637 - 2.751681909063865*^-13*I, 
      -0.9933303897405259 + 1.623074195287686*^-14*I}}
 
qSG[-2.4, 0.4] = {{-0.9910074593760285 + 1.612424639529908*^-14*I, 
      0.1338066345984345 - 1.3369071584149721*^-15*I}, 
     {-0.13380663459865996 - 5.007688871754343*^-14*I, 
      -0.9910074593740226 + 5.402904358166569*^-15*I}}
 
qSG[-2.4, 0.6000000000000001] = 
    {{-0.9878804044551517 + 2.036699954348285*^-14*I, 
      0.1552169658736141 - 1.7702411617352502*^-15*I}, 
     {-0.15521696587383116 - 1.669504833807439*^-13*I, 
      -0.9878804044531457 + 1.2888866621431348*^-14*I}}
 
qSG[-2.4, 0.8] = {{-0.9836748673843054 - 6.3919683887391785*^-15*I, 
      0.1799548701145191 + 3.429916863311698*^-16*I}, 
     {-0.17995487011472033 - 3.62846164987446*^-14*I, 
      -0.983674867382307 + 4.743404656549273*^-15*I}}
 
qSG[-2.4, 1.] = {{-0.9780261273326072 + 3.096240776986468*^-15*I, 
      0.208482359580432 - 5.543964736527565*^-16*I}, 
     {-0.2084823595806667 - 5.590447951169757*^-15*I, 
      -0.9780261273306126 + 1.8149078193019817*^-15*I}}
 
qSG[-2.4, 1.2000000000000002] = 
    {{-0.9704519529304845 - 1.5317242291791928*^-15*I, 
      0.24129444057997157 + 6.993326352516945*^-19*I}, 
     {-0.24129444058023136 + 1.4792605049788897*^-14*I, 
      -0.9704519529285043 - 1.1443650901091943*^-15*I}}
 
qSG[-2.4, 1.4000000000000001] = 
    {{-0.9603194095930552 - 6.31964377031443*^-15*I, 
      0.2789025485007445 + 7.449702471425233*^-16*I}, 
     {-0.2789025485009775 - 3.4938119770170075*^-14*I, 
      -0.9603194095910854 + 6.1399489844982546*^-15*I}}
 
qSG[-2.4, 1.6] = {{-0.9468060399021667 + 6.570504240915236*^-15*I, 
      0.3218047899054297 - 1.2327359841202784*^-15*I}, 
     {-0.3218047899057757 + 1.172222242758597*^-15*I, 
      -0.9468060399002001 + 9.718065138241793*^-16*I}}
 
qSG[-2.4, 1.8] = {{-0.928857656003381 + 3.363624825352381*^-15*I, 
      0.370436843314925 - 7.350107137061395*^-16*I}, 
     {-0.3704368433153166 - 3.1201890212636638*^-15*I, 
      -0.9288576560014317 + 1.5659368352521647*^-15*I}}
 
qSG[-2.4, 2.] = {{-0.9051482974258396 - 2.596618110596844*^-15*I, 
      0.4250959417216513 + 5.222193348744269*^-16*I}, 
     {-0.42509594172209647 - 1.7619891573655118*^-14*I, 
      -0.9051482974239149 + 5.159174512898902*^-15*I}}
 
qSG[-2.2, 0.] = {{-0.9918597299438259 + 2.0439303757097023*^-15*I, 
      0.12733529014868572 - 6.229202798643595*^-16*I}, 
     {-0.12733529014876088 + 8.901340699530403*^-14*I, 
      -0.9918597299418295 - 4.728427845866829*^-15*I}}
 
qSG[-2.2, 0.2] = {{-0.9890274092294074 + 4.706310530225277*^-15*I, 
      0.14773213528018947 - 6.600730700198082*^-16*I}, 
     {-0.14773213528033685 - 8.93745765926284*^-14*I, 
      -0.9890274092274107 + 6.896374996492892*^-15*I}}
 
qSG[-2.2, 0.4] = {{-0.9852169264835546 - 3.453297848825096*^-16*I, 
      0.17131143502923302 - 3.03990107289599*^-16*I}, 
     {-0.17131143502944152 - 3.4399762934017246*^-14*I, 
      -0.9852169264815513 + 3.895429848745189*^-15*I}}
 
qSG[-2.2, 0.6000000000000001] = 
    {{-0.9800964082091528 + 1.1086469112288293*^-15*I, 
      0.19852211619104101 - 4.683175500184039*^-16*I}, 
     {-0.19852211619124882 - 4.551040666751915*^-14*I, 
      -0.9800964082071579 + 6.1988617220991*^-15*I}}
 
qSG[-2.2, 0.8] = {{-0.9732261798526172 - 7.184550815572387*^-15*I, 
      0.2298495221898346 + 5.900088092606927*^-16*I}, 
     {-0.22984952219005886 - 2.6938018833024693*^-15*I, 
      -0.9732261798506334 + 1.0815790532255054*^-15*I}}
 
qSG[-2.2, 1.] = {{-0.9640276001438224 + 3.094004484714305*^-15*I, 
      0.26580215605280505 - 6.063829253262986*^-16*I}, 
     {-0.2658021560530782 - 5.406792628283513*^-15*I, 
      -0.9640276001418426 + 2.128630394745904*^-15*I}}
 
qSG[-2.2, 1.2000000000000002] = 
    {{-0.9517459830217654 + 1.216261379272894*^-15*I, 
      0.3068869234803784 - 3.908099422908179*^-16*I}, 
     {-0.30688692348068997 + 4.752798963073117*^-14*I, 
      -0.9517459830197992 - 6.7484655537232055*^-15*I}}
 
qSG[-2.2, 1.4000000000000001] = 
    {{-0.9354091037379171 - 5.0182362365699475*^-15*I, 
      0.3535672618406152 + 7.973858863366783*^-16*I}, 
     {-0.3535672618409758 - 3.360851401194922*^-15*I, 
      -0.9354091037359678 + 1.6860442778164891*^-15*I}}
 
qSG[-2.2, 1.6] = {{-0.9137855322850226 + 1.3560187007487538*^-15*I, 
      0.4061969977581438 - 3.8759705407796435*^-16*I}, 
     {-0.40619699775856905 + 1.0233730456917938*^-14*I, 
      -0.913785532283089 - 1.4258503053086545*^-15*I}}
 
qSG[-2.2, 1.8] = {{-0.8853517013914114 - 6.094978515610932*^-16*I, 
      0.4649218911218861 + 7.416600639842626*^-17*I}, 
     {-0.4649218911223527 - 3.3435282364565445*^-15*I, 
      -0.8853517013895154 + 1.991156556365842*^-15*I}}
 
qSG[-2.2, 2.] = {{-0.8482837062981241 - 2.8771420675096932*^-15*I, 
      0.5295420225345489 + 7.973777737628503*^-16*I}, 
     {-0.5295420225350806 + 2.5243588747578418*^-17*I, 
      -0.8482837062962643 + 1.0306062771682807*^-15*I}}
 
qSG[-2., 0.] = {{-0.9866143068158164 - 2.7077923092458665*^-15*I, 
      0.16307117951319755 - 4.2415565601158175*^-17*I}, 
     {-0.16307117951335634 + 1.1380465132241915*^-14*I, 
      -0.9866143068138162 + 5.662917003162445*^-16*I}}
 
qSG[-2., 0.2] = {{-0.9819734139960652 - 4.265106600476294*^-15*I, 
      0.18901908423854302 + 1.3497643260872547*^-16*I}, 
     {-0.18901908423870878 + 2.38850473508122*^-14*I, 
      -0.9819734139940688 - 1.3918415459030784*^-15*I}}
 
qSG[-2., 0.4] = {{-0.9757431447363447 - 5.10692293308963*^-15*I, 
      0.21891851338218518 + 3.925179594529343*^-16*I}, 
     {-0.21891851338238133 - 2.2232427734222325*^-14*I, 
      -0.9757431447343539 + 3.843354746267504*^-15*I}}
 
qSG[-2., 0.6000000000000001] = 
    {{-0.9673950203301682 - 1.4972576877152463*^-16*I, 
      0.25327233295760404 - 2.311096319532752*^-16*I}, 
     {-0.25327233295785306 + 3.5161196817961004*^-14*I, 
      -0.9673950203281869 - 3.977608578622501*^-15*I}}
 
qSG[-2., 0.8] = {{-0.9562374827696645 - 2.0419688184972868*^-15*I, 
      0.29259165495220346 + 1.028078881896772*^-16*I}, 
     {-0.29259165495246314 - 6.340934274766534*^-15*I, 
      -0.9562374827677029 + 2.0461161021788055*^-15*I}}
 
qSG[-2., 1.] = {{-0.9413755701764475 - 2.1111653597775515*^-15*I, 
      0.3373603946468037 + 2.0911801502849848*^-16*I}, 
     {-0.3373603946471458 - 3.863765237432776*^-14*I, 
      -0.9413755701744884 + 8.026115082182599*^-15*I}}
 
qSG[-2., 1.2000000000000002] = 
    {{-0.9216685948761536 - 1.1721086412176522*^-15*I, 
      0.38797809373751596 + 7.457993900374769*^-17*I}, 
     {-0.3879780937379156 - 2.5514530093661795*^-14*I, 
      -0.9216685948742178 + 6.478535548145774*^-15*I}}
 
qSG[-2., 1.4000000000000001] = 
    {{-0.895692925127654 + 2.4781015997019974*^-15*I, 
      0.44467312025502115 - 7.548107482970019*^-16*I}, 
     {-0.44467312025547645 - 9.303908640745832*^-15*I, 
      -0.8956929251257417 + 3.394542562857074*^-15*I}}
 
qSG[-2., 1.6] = {{-0.8617232236377264 - 2.435394493789199*^-15*I, 
      0.5073786414940279 + 5.931395289520706*^-16*I}, 
     {-0.5073786414945474 + 7.120632398385615*^-15*I, 
      -0.861723223635849 - 9.832183950016966*^-16*I}}
 
qSG[-2., 1.8] = {{-0.8177541576017542 + 5.0812334901541246*^-15*I, 
      0.5755676656360884 - 1.7180153889490538*^-15*I}, 
     {-0.5755676656366673 - 7.22106060214361*^-15*I, 
      -0.8177541575999276 + 3.514417471228536*^-15*I}}
 
qSG[-2., 2.] = {{-0.7615942529213413 - 2.714196294915398*^-15*I, 
      0.6480541597102066 + 1.0377456259184707*^-15*I}, 
     {-0.6480541597108606 + 5.577276153170112*^-15*I, 
      -0.7615942529195654 - 9.66954560981793*^-16*I}}
 
qSG[-1.7999999999999998, 0.] = 
    {{-0.9780261286527427 - 7.702017487946515*^-16*I, 
      0.2084823533874536 - 2.4908952254718567*^-16*I}, 
     {-0.20848235338763957 - 4.406066755336102*^-14*I, 
      -0.9780261286507534 + 5.9474300179123535*^-15*I}}
 
qSG[-1.7999999999999998, 0.2] = 
    {{-0.9704519546988706 - 3.740527214726323*^-15*I, 
      0.24129443346781895 + 1.7651239680793247*^-16*I}, 
     {-0.24129443346806953 + 1.676567176392897*^-14*I, 
      -0.9704519546968808 - 1.2896399228853363*^-15*I}}
 
qSG[-1.7999999999999998, 0.4] = 
    {{-0.960319411955618 - 1.718763020416108*^-15*I, 
      0.27890254036592266 - 5.544183100827353*^-17*I}, 
     {-0.278902540366232 - 2.3200691676747397*^-14*I, 
      -0.9603194119536447 + 4.747168054903587*^-15*I}}
 
qSG[-1.7999999999999998, 0.6000000000000001] = 
    {{-0.9468060430474865 + 4.111809220948629*^-15*I, 
      0.32180478065134815 - 8.5759781817698265*^-16*I}, 
     {-0.3218047806516633 + 2.0405538068806323*^-15*I, 
      -0.9468060430455247 + 5.352335652747531*^-16*I}}
 
qSG[-1.7999999999999998, 0.8] = 
    {{-0.9288576601711862 - 2.0851279323515017*^-15*I, 
      0.3704368328642774 + 2.216022472966903*^-16*I}, 
     {-0.37043683286465945 - 1.2567339493824123*^-14*I, 
      -0.9288576601692462 + 3.4371477675883164*^-15*I}}
 
qSG[-1.7999999999999998, 1.] = 
    {{-0.9051483029143366 - 2.6935981910534655*^-15*I, 
      0.4250959300350955 + 4.3646126518584396*^-16*I}, 
     {-0.42509593003554635 - 5.8139953353537255*^-15*I, 
      -0.9051483029124134 + 2.2566251495202478*^-15*I}}
 
qSG[-1.7999999999999998, 1.2000000000000002] = 
    {{-0.874053349999079 + 2.917463935479368*^-16*I, 
      0.48582995106966753 - 2.6177454103949807*^-16*I}, 
     {-0.48582995107016985 - 1.097952333474839*^-14*I, 
      -0.8740533499971916 + 3.882026241372321*^-15*I}}
 
qSG[-1.7999999999999998, 1.4000000000000001] = 
    {{-0.8336546843849051 - 1.5460321432964233*^-15*I, 
      0.5522860374877427 + 3.693167924096309*^-16*I}, 
     {-0.5522860374883036 - 1.623830402141131*^-15*I, 
      -0.8336546843830548 + 1.624292461730767*^-15*I}}
 
qSG[-1.7999999999999998, 1.6] = 
    {{-0.7818064525379083 - 2.1439798075539674*^-15*I, 
      0.6235211871064851 + 7.150802339187396*^-16*I}, 
     {-0.6235211871071125 - 4.682851653283478*^-15*I, 
      -0.781806452536117 + 2.6524325142101814*^-15*I}}
 
qSG[-1.7999999999999998, 1.8] = 
    {{-0.716297984469199 + 8.549088832111749*^-17*I, 
      0.6977945238003178 - 5.368045384070035*^-17*I}, 
     {-0.6977945238010198 - 2.721827375287322*^-15*I, 
      -0.7162979844674693 + 2.150004867666389*^-15*I}}
 
qSG[-1.7999999999999998, 2.] = 
    {{-0.6351490867319518 + 1.6220336715686457*^-15*I, 
      0.7723895633834246 - 7.720692316871071*^-16*I}, 
     {-0.7723895633842054 + 7.408353590940524*^-15*I, 
      -0.6351490867302989 - 2.4402578834532926*^-15*I}}
 
qSG[-1.5999999999999999, 0.] = 
    {{-0.9640276022896603 + 7.417471588260916*^-16*I, 
      0.2658021482701506 - 4.0818185174971155*^-16*I}, 
     {-0.26580214827039383 - 3.4605385732307955*^-15*I, 
      -0.9640276022876844 + 1.687926056659207*^-15*I}}
 
qSG[-1.5999999999999999, 0.2] = 
    {{-0.9517459858822308 + 1.2786870912974003*^-15*I, 
      0.30688691460924256 - 5.595570287845433*^-16*I}, 
     {-0.3068869146095683 - 1.978287953110353*^-14*I, 
      -0.9517459858802617 + 4.508000815446729*^-15*I}}
 
qSG[-1.5999999999999999, 0.4] = 
    {{-0.9354091075347726 + 2.481574981400177*^-15*I, 
      0.35356725179553483 - 7.480871564163278*^-16*I}, 
     {-0.35356725179586274 + 7.789236472725478*^-15*I, 
      -0.9354091075328281 - 7.652972055773528*^-16*I}}
 
qSG[-1.5999999999999999, 0.6000000000000001] = 
    {{-0.913785537296351 - 3.912751368023153*^-15*I, 
      0.4061969864845904 + 6.355796986155902*^-16*I}, 
     {-0.40619698648500446 - 1.2199167507655593*^-14*I, 
      -0.9137855372944246 + 3.790038767162339*^-15*I}}
 
qSG[-1.5999999999999999, 0.8] = 
    {{-0.885351707956491 - 2.573605149326036*^-15*I, 
      0.46492187861999823 + 4.223486485795886*^-16*I}, 
     {-0.46492187862047296 - 4.273006610589158*^-15*I, 
      -0.8853517079545894 + 2.1410067116225684*^-15*I}}
 
qSG[-1.5999999999999999, 1.] = 
    {{-0.8482837148150044 - 1.6912102772420834*^-15*I, 
      0.5295420088911879 + 3.0129713177806656*^-16*I}, 
     {-0.5295420088917164 + 7.720129535715426*^-15*I, 
      -0.8482837148131468 - 1.2689967749886583*^-15*I}}
 
qSG[-1.5999999999999999, 1.2000000000000002] = 
    {{-0.8004991142408504 - 1.401490992694692*^-15*I, 
      0.5993339370503548 + 3.4335026763704496*^-16*I}, 
     {-0.5993339370509585 + 2.5846874798835573*^-15*I, 
      -0.800499114239039 + 1.1758914046691707*^-16*I}}
 
qSG[-1.5999999999999999, 1.4000000000000001] = 
    {{-0.7397831635347383 - 1.006213771866724*^-16*I, 
      0.6728453544098885 - 1.3084226266306875*^-17*I}, 
     {-0.6728453544105695 + 4.41850237731914*^-15*I, 
      -0.7397831635329846 - 6.403087646272543*^-16*I}}
 
qSG[-1.5999999999999999, 1.6] = 
    {{-0.6640369035897558 + 1.7915258091174501*^-16*I, 
      0.7476997998335222 - 1.6459909581958247*^-16*I}, 
     {-0.7476997998342761 - 4.8772767265908335*^-15*I, 
      -0.6640369035880802 + 3.3469198737314213*^-15*I}}
 
qSG[-1.5999999999999999, 1.8] = 
    {{-0.5716701202367072 - 2.264623572201699*^-15*I, 
      0.820483560852018 + 1.1515047105126288*^-15*I}, 
     {-0.8204835608528486 + 4.975122357973129*^-15*I, 
      -0.5716701202351224 - 1.4564089576397224*^-15*I}}
 
qSG[-1.5999999999999999, 2.] = 
    {{-0.4621173298805872 - 8.847740468807117*^-17*I, 
      0.8868187940180269 + 1.6855988273553278*^-16*I}, 
     {-0.8868187940189193 + 1.358334367864063*^-15*I, 
      -0.46211732987911214 - 2.719315829238073*^-17*I}}
 
qSG[-1.4, 0.] = {{-0.941375573633193 - 3.050357946497711*^-16*I, 
      0.3373603850010347 - 2.64451781553678*^-16*I}, 
     {-0.3373603850013856 + 8.442699679981304*^-15*I, 
      -0.9413755736312361 - 5.691119908839296*^-16*I}}
 
qSG[-1.4, 0.2] = {{-0.9216685994480274 + 5.79638681747118*^-16*I, 
      0.38797808287671687 - 3.93572002628413*^-16*I}, 
     {-0.387978082877116 + 4.421105267239504*^-15*I, 
      -0.9216685994460911 + 1.2045487715758242*^-16*I}}
 
qSG[-1.4, 0.4] = {{-0.8956929311333228 + 6.173699666418842*^-16*I, 
      0.4446731081579609 - 4.734325527124397*^-16*I}, 
     {-0.44467310815840355 - 1.3109867372790621*^-14*I, 
      -0.8956929311314159 + 4.139951776648079*^-15*I}}
 
qSG[-1.4, 0.6000000000000001] = 
    {{-0.861723231456601 - 1.464167573728235*^-15*I, 
      0.5073786282145878 + 1.7929505136800755*^-16*I}, 
     {-0.5073786282150988 + 5.48290212809668*^-15*I, 
      -0.8617232314547247 - 6.622164204907099*^-16*I}}
 
qSG[-1.4, 0.8] = {{-0.817754167663485 + 4.470285917039819*^-16*I, 
      0.5755676513406026 - 3.5710477489257288*^-16*I}, 
     {-0.5755676513411849 - 5.774167510401003*^-15*I, 
      -0.8177541676616547 + 2.8448306474197796*^-15*I}}
 
qSG[-1.4, 1.] = {{-0.7615942656769861 - 1.459034640702329*^-15*I, 
      0.6480541447197536 + 3.246072122212028*^-16*I}, 
     {-0.6480541447204035 + 3.5675137151104786*^-16*I, 
      -0.7615942656752115 + 7.185976166483754*^-16*I}}
 
qSG[-1.4, 1.2000000000000002] = 
    {{-0.6910696013608741 - 7.46056128068424*^-16*I, 
      0.7227882166134 + 1.6638166176321067*^-16*I}, 
     {-0.7227882166141214 - 3.110962363228524*^-16*I, 
      -0.6910696013591733 + 1.1291805445495804*^-15*I}}
 
qSG[-1.4, 1.4000000000000001] = 
    {{-0.6043679308977978 - 2.9221005556458517*^-15*I, 
      0.7967053433373406 + 1.4374831518040102*^-15*I}, 
     {-0.7967053433381479 + 8.094710239789373*^-15*I, 
      -0.6043679308961842 - 3.0081107452996312*^-15*I}}
 
qSG[-1.4, 1.6] = {{-0.5005203856555873 - 2.7720925193104385*^-15*I, 
      0.8657247504506458 + 1.7658618847263265*^-15*I}, 
     {-0.865724750451517 + 6.93779146278196*^-16*I, -0.5005203856540763 + 
       6.3768696900091345*^-16*I}}
 
qSG[-1.4, 1.8] = {{-0.3799491533112289 + 1.03402468050383*^-17*I, 
      0.925007373428679 + 7.686695319131605*^-17*I}, 
     {-0.9250073734296086 + 1.0055104871048976*^-15*I, 
      -0.37994915330984025 + 3.482632890936334*^-16*I}}
 
qSG[-1.4, 2.] = {{-0.244918863377946 - 5.2689932451272794*^-17*I, 
      0.9695435783711447 + 3.600751499717508*^-16*I}, 
     {-0.9695435783721197 + 9.19449654500004*^-16*I, 
      -0.24491886337669344 + 4.5822066988416*^-16*I}}
 
qSG[-1.2, 0.] = {{-0.9051483084028333 - 1.334299879200498*^-15*I, 
      0.4250959183485403 - 1.9906999291328862*^-17*I}, 
     {-0.4250959183489756 - 2.5352567634606077*^-15*I, 
      -0.9051483084009184 + 1.532355027223074*^-15*I}}
 
qSG[-1.2, 0.2] = {{-0.8740533571679125 - 9.608002019177859*^-16*I, 
      0.48582993817227216 - 8.327744421532687*^-17*I}, 
     {-0.48582993817276915 - 6.6780699156178*^-16*I, 
      -0.8740533571660238 + 1.3688980870999006*^-15*I}}
 
qSG[-1.2, 0.4] = {{-0.8336546936491036 + 2.1343118477153748*^-16*I, 
      0.5522860235037855 - 3.4691437702835713*^-16*I}, 
     {-0.5522860235043521 + 5.4399107561841695*^-16*I, 
      -0.8336546936472531 + 8.400788863384627*^-16*I}}
 
qSG[-1.2, 0.6000000000000001] = 
    {{-0.7818064643460696 + 1.4802047004800059*^-16*I, 
      0.6235211723007408 - 3.3863628267404717*^-16*I}, 
     {-0.6235211723013725 + 9.568940121019889*^-15*I, 
      -0.7818064643442753 - 2.6388115247332172*^-15*I}}
 
qSG[-1.2, 0.8] = {{-0.7162979992580627 + 1.2405109135205475*^-15*I, 
      0.6977945086192916 - 7.219531117695618*^-16*I}, 
     {-0.697794508619998 + 1.9531852273993688*^-16*I, 
      -0.716297999256335 + 9.268274763875726*^-16*I}}
 
qSG[-1.2, 1.] = {{-0.6351491048517133 - 1.6306361396625286*^-15*I, 
      0.7723895484832299 + 5.792221853778263*^-16*I}, 
     {-0.7723895484840083 + 1.5171440141426832*^-15*I, 
      -0.6351491048500677 + 9.269758682366867*^-17*I}}
 
qSG[-1.2, 1.2000000000000002] = 
    {{-0.5370497420959843 - 1.8626991778685734*^-15*I, 
      0.8435505761448994 + 8.075388560285586*^-16*I}, 
     {-0.843550576145745 + 5.958729899271771*^-16*I, 
      -0.5370497420944389 + 6.977024983383933*^-16*I}}
 
qSG[-1.2, 1.4000000000000001] = 
    {{-0.42189919971780676 + 5.872661661087155*^-16*I, 
      0.906642744016033 - 3.7860948731063995*^-16*I}, 
     {-0.9066427440169447 + 4.880732618346624*^-16*I, 
      -0.42189919971637346 + 7.463361941709287*^-16*I}}
 
qSG[-1.2, 1.6] = {{-0.29131282026727545 - 1.0016451539372337*^-15*I, 
      0.9566278486156874 + 8.202634335096586*^-16*I}, 
     {-0.9566278486166522 + 8.507675123994741*^-16*I, 
      -0.29131282026597605 + 5.234269431445171*^-16*I}}
 
qSG[-1.2, 1.8] = {{-0.14888524639544087 - 1.4464188275237397*^-15*I, 
      0.9888544803987538 + 1.549918680988442*^-15*I}, 
     {-0.9888544803997464 + 1.5039682987035718*^-15*I, 
      -0.14888524639428513 - 6.313710856447289*^-17*I}}
 
qSG[-1.2, 2.] = {{-2.081040613166607*^-7 - 1.2048032137355163*^-15*I, 
      0.999999999999358 + 1.2652033263283906*^-15*I}, 
     {-1.0000000000003646 + 3.8276166204814997*^-16*I, 
      -2.0810305434437737*^-7 + 6.648437883251136*^-16*I}}
 
qSG[-1., 0.] = {{-0.8482837233318892 - 6.602134145798019*^-16*I, 
      0.5295419952478285 - 1.5298445599434513*^-16*I}, 
     {-0.5295419952483683 - 3.925194538885353*^-15*I, 
      -0.848283723330026 + 1.9503985790808498*^-15*I}}
 
qSG[-1., 0.2] = {{-0.8004991251506692 - 2.6037917763232733*^-15*I, 
      0.599333922478678 + 6.477469900195993*^-16*I}, 
     {-0.5993339224792856 - 1.514803691175963*^-15*I, 
      -0.8004991251488569 + 1.5757970204566548*^-15*I}}
 
qSG[-1., 0.4] = {{-0.7397831772849781 - 3.928736986629658*^-15*I, 
      0.6728453392917081 + 1.2892592942558435*^-15*I}, 
     {-0.6728453392923847 - 8.708953123361638*^-15*I, 
      -0.7397831772832277 + 4.4463481195677315*^-15*I}}
 
qSG[-1., 0.6000000000000001] = 
    {{-0.6640369205696246 + 3.5334777354387135*^-16*I, 
      0.7476997847535933 - 4.252711362967884*^-16*I}, 
     {-0.7476997847543471 + 4.668342437289301*^-15*I, 
      -0.6640369205679493 - 1.2655980291210096*^-15*I}}
 
qSG[-1., 0.8] = {{-0.5716701406832345 - 1.590275500200133*^-15*I, 
      0.8204835466059437 + 7.500163533292667*^-16*I}, 
     {-0.8204835466067711 - 2.2424342251877683*^-15*I, 
      -0.5716701406816527 + 2.0464745618309456*^-15*I}}
 
qSG[-1., 1.] = {{-0.4621173537669221 - 1.7962375814890836*^-15*I, 
      0.8868187815709597 + 9.469783301588945*^-16*I}, 
     {-0.8868187815718513 + 1.1701423446888862*^-15*I, 
      -0.46211735376545215 + 3.7332912102096124*^-16*I}}
 
qSG[-1., 1.2000000000000002] = 
    {{-0.33637575751321735 - 4.961301721025146*^-16*I, 
      0.9417278533401536 + 3.585904444083796*^-16*I}, 
     {-0.9417278533411043 - 9.926432034197154*^-17*I, 
      -0.33637575751187176 + 1.0968344125062359*^-15*I}}
 
qSG[-1., 1.4000000000000001] = 
    {{-0.19737554211384878 + 2.1199068817144987*^-16*I, 
      0.9803279529699503 - 2.2819047563918074*^-16*I}, 
     {-0.9803279529709367 - 3.547153671669571*^-16*I, 
      -0.19737554211264485 + 1.3010164244087084*^-15*I}}
 
qSG[-1., 1.6] = {{-0.049958595797345406 + 1.4971799473563127*^-16*I, 
      0.9987512897136903 - 9.17140569284193*^-18*I}, 
     {-0.9987512897146965 + 1.1377431895434638*^-15*I, 
      -0.049958595796287586 + 1.7287449452301423*^-16*I}}
 
qSG[-1., 1.8] = {{0.09966778482932581 + 6.89981879009571*^-16*I, 
      0.9950207699670985 - 4.453891928118092*^-16*I}, 
     {-0.9950207699681004 + 6.766138499517092*^-16*I, 
      0.09966778483023253 + 8.2972991015135755*^-16*I}}
 
qSG[-1., 2.] = {{0.24491847213608853 - 5.62710825310436*^-16*I, 
      0.9695436772034633 + 1.0645795989391293*^-15*I}, 
     {-0.969543677204441 + 9.32911546196023*^-16*I, 0.24491847213684925 + 
       4.325278606764705*^-16*I}}
 
qSG[-0.7999999999999998, 0.] = 
    {{-0.7615942784326308 + 4.56037549500255*^-16*I, 
      0.6480541297293008 - 5.470064500666864*^-16*I}, 
     {-0.6480541297299557 - 2.3477565117531506*^-15*I, 
      -0.7615942784308531 + 1.651173627634067*^-15*I}}
 
qSG[-0.7999999999999998, 0.2] = 
    {{-0.6910696172281332 - 2.894999850460077*^-15*I, 
      0.722788201442454 + 9.20294715280336*^-16*I}, 
     {-0.7227882014431753 + 4.522367892642235*^-15*I, 
      -0.6910696172264328 - 1.0774973140125476*^-15*I}}
 
qSG[-0.7999999999999998, 0.4] = 
    {{-0.604367950176389 - 6.213571316552425*^-16*I, 
      0.796705328712911 + 6.129399999196331*^-17*I}, 
     {-0.7967053287137156 - 2.5551391945925495*^-15*I, 
      -0.6043679501747747 + 2.307860921848905*^-15*I}}
 
qSG[-0.7999999999999998, 0.6000000000000001] = 
    {{-0.5005204084191104 - 1.3196199064961957*^-15*I, 
      0.865724737289873 + 7.559283363711656*^-16*I}, 
     {-0.8657247372907407 - 2.8623816256711446*^-15*I, 
      -0.5005204084176005 + 2.7735960711786764*^-15*I}}
 
qSG[-0.7999999999999998, 0.8] = 
    {{-0.37994917929906835 - 1.289480749703269*^-15*I, 
      0.9250073627541062 + 7.362391790923818*^-16*I}, 
     {-0.9250073627550384 - 1.135878038099333*^-15*I, 
      -0.37994917929767924 + 1.718657361592733*^-15*I}}
 
qSG[-0.7999999999999998, 1.] = 
    {{-0.2449188919284957 - 8.04879879568805*^-16*I, 
      0.9695435711589178 + 3.9858487292420484*^-16*I}, 
     {-0.9695435711598938 + 7.482895430525356*^-16*I, 
      -0.24491889192724203 + 4.739130875535571*^-16*I}}
 
qSG[-0.7999999999999998, 1.2000000000000002] = 
    {{-0.09966822697370104 + 4.1758047805869435*^-16*I, 
      0.9950207256790051 - 4.853734600889181*^-16*I}, 
     {-0.995020725680007 + 1.31474982602572*^-15*I, -0.09966822697259459 - 
       1.477188306738995*^-16*I}}
 
qSG[-0.7999999999999998, 1.4000000000000001] = 
    {{0.049958150331365636 + 3.7560096788660727*^-16*I, 
      0.9987513119962317 - 1.5596039729290782*^-16*I}, 
     {-0.9987513119972364 - 7.728181091716396*^-18*I, 
      0.04995815033232187 + 1.1478427644919856*^-15*I}}
 
qSG[-0.7999999999999998, 1.6] = 
    {{0.1973751129306982 + 1.493301457250637*^-16*I, 
      0.9803280393798188 - 6.692649269293124*^-17*I}, 
     {-0.980328039380806 + 4.954586636037032*^-16*I, 
      0.19737511293150667 + 7.605895329834968*^-16*I}}
 
qSG[-0.7999999999999998, 1.8] = 
    {{0.3363753614624947 - 2.3893418559221662*^-17*I, 
      0.9417279948051367 + 1.2736051514173996*^-16*I}, 
     {-0.9417279948060849 + 7.070397089883486*^-16*I, 
      0.33637536146316316 + 4.374768511149903*^-16*I}}
 
qSG[-0.7999999999999998, 2.] = 
    {{0.46211700255449806 - 6.075341302449816*^-16*I, 
      0.8868189645857145 + 1.2242904475182599*^-15*I}, 
     {-0.886818964586607 + 9.46006558518656*^-16*I, 0.46211700255504007 + 
       7.335836094952739*^-17*I}}
 
qSG[-0.5999999999999996, 0.] = 
    {{-0.6351491229714807 + 3.4963311433552447*^-15*I, 
      0.772389533583038 - 2.0590749100588865*^-15*I}, 
     {-0.7723895335838169 - 3.730550185441727*^-15*I, 
      -0.6351491229698323 + 2.5630658846516927*^-15*I}}
 
qSG[-0.5999999999999996, 0.2] = 
    {{-0.5370497637083389 + 4.6794872076410465*^-17*I, 
      0.8435505623853119 - 4.790054924126406*^-16*I}, 
     {-0.8435505623861583 + 1.0633518570046073*^-15*I, 
      -0.5370497637067904 + 3.848639897100376*^-16*I}}
 
qSG[-0.5999999999999996, 0.4] = 
    {{-0.4218992246839919 + 6.120689697755427*^-16*I, 
      0.9066427323982117 - 7.817046790750444*^-16*I}, 
     {-0.9066427323991229 - 3.3340290843354085*^-17*I, 
      -0.4218992246825577 + 1.0193634241649208*^-15*I}}
 
qSG[-0.5999999999999996, 0.6000000000000001] = 
    {{-0.29131284806222246 - 4.697683734849014*^-16*I, 
      0.9566278401515558 + 5.035342083140535*^-17*I}, 
     {-0.95662784015252 - 2.0814399034643368*^-16*I, 
      -0.29131284806092195 + 8.724778461094358*^-16*I}}
 
qSG[-0.5999999999999996, 0.8] = 
    {{-0.14888527609462754 + 3.0046297790486576*^-16*I, 
      0.9888544759271436 - 3.487256242445616*^-16*I}, 
     {-0.9888544759281392 + 8.725208223331119*^-16*I, 
      -0.1488852760934707 + 4.0740278788723147*^-16*I}}
 
qSG[-0.5999999999999996, 1.] = 
    {{-2.384765089846752*^-7 - 4.672490810164002*^-19*I, 
      0.9999999999993505 - 1.016948439594723*^-16*I}, 
     {-1.000000000000358 + 2.545633096439372*^-16*I, -2.384755024564811*^-7 + 
       6.868432433878699*^-16*I}}
 
qSG[-0.5999999999999996, 1.2000000000000002] = 
    {{0.1488848097140949 + 1.881188687028568*^-17*I, 
      0.9888545461467451 + 9.879928296410307*^-17*I}, 
     {-0.9888545461477418 + 4.817896425445925*^-16*I, 
      0.14888480971495144 + 4.844505688332058*^-16*I}}
 
qSG[-0.5999999999999996, 1.4000000000000001] = 
    {{0.2913124115848298 - 4.165306255394794*^-16*I, 
      0.9566279730675527 + 6.94726809196379*^-16*I}, 
     {-0.9566279730685169 + 1.0219171146636338*^-15*I, 
      0.2913124115855429 - 8.680746590549664*^-18*I}}
 
qSG[-0.5999999999999996, 1.6] = 
    {{0.42189883262790084 - 4.601290311215149*^-16*I, 
      0.906642914838034 + 9.375596090830055*^-16*I}, 
     {-0.9066429148389468 + 7.844539942915264*^-16*I, 
      0.4218988326284834 + 3.008800976706715*^-16*I}}
 
qSG[-0.5999999999999996, 1.8] = 
    {{0.5370494243189785 - 3.539422016129942*^-16*I, 
      0.843550778458285 + 1.0197981932486602*^-15*I}, 
     {-0.8435507784591343 + 7.649122391713219*^-16*I, 
      0.5370494243194446 + 2.8606229817225907*^-16*I}}
 
qSG[-0.5999999999999996, 2.] = 
    {{0.6351488384278006 - 2.6332336871141843*^-16*I, 
      0.7723897675674476 + 9.635711307307339*^-16*I}, 
     {-0.7723897675682261 + 8.447318052525684*^-16*I, 
      0.635148838428168 + 1.3241048729118016*^-17*I}}
 
qSG[-0.3999999999999999, 0.] = 
    {{-0.4621173776532592 - 6.042878928623203*^-16*I, 
      0.8868187691238943 - 1.330469728215121*^-16*I}, 
     {-0.8868187691247897 + 1.697713094784085*^-16*I, 
      -0.46211737765178684 + 6.748912817088896*^-16*I}}
 
qSG[-0.3999999999999999, 0.2] = 
    {{-0.336375784449066 - 1.6246368361116574*^-15*I, 
      0.9417278437189399 + 7.553672817127607*^-16*I}, 
     {-0.9417278437198893 + 1.2723719663390922*^-15*I, 
      -0.33637578444771843 - 1.0173585261324383*^-16*I}}
 
qSG[-0.3999999999999999, 0.4] = 
    {{-0.19737557130307493 - 4.874592174042032*^-16*I, 
      0.9803279470931011 + 2.058564632401709*^-16*I}, 
     {-0.9803279470940882 - 5.833404158832425*^-16*I, 
      -0.1973755713018699 + 1.3062353541784782*^-15*I}}
 
qSG[-0.3999999999999999, 0.6000000000000001] = 
    {{-0.04995862609398882 - 1.1257549770207107*^-15*I, 
      0.9987512881982206 + 1.0341969207142953*^-15*I}, 
     {-0.9987512881992254 - 1.1809417843128777*^-16*I, 
      -0.049958626092931224 + 9.606100889647055*^-16*I}}
 
qSG[-0.3999999999999999, 0.8] = 
    {{0.09966775475858769 - 4.370876363943408*^-16*I, 
      0.9950207729791789 + 4.759203668632772*^-16*I}, 
     {-0.9950207729801821 + 2.8111314515099456*^-16*I, 
      0.0996677547594943 + 4.496846054355352*^-16*I}}
 
qSG[-0.3999999999999999, 1.] = 
    {{0.2449184435855325 - 1.0388425536882484*^-15*I, 
      0.9695436844156798 + 1.527971164088685*^-15*I}, 
     {-0.9695436844166554 + 4.524152592432773*^-16*I, 
      0.24491844358629278 + 3.611364696454432*^-16*I}}
 
qSG[-0.3999999999999999, 1.2000000000000002] = 
    {{0.3799487711994667 - 8.984275613491239*^-16*I, 
      0.925007530381656 + 1.3287070772806728*^-15*I}, 
     {-0.9250075303825886 + 3.8636902152240233*^-16*I, 
      0.3799487712000911 + 6.84566448841019*^-16*I}}
 
qSG[-0.3999999999999999, 1.4000000000000001] = 
    {{0.5005200509524166 - 2.636365753177903*^-16*I, 
      0.8657249439593775 + 4.892831138980932*^-16*I}, 
     {-0.865724943960249 + 6.67014650358337*^-16*I, 0.5005200509529193 + 
       2.6958425141622695*^-16*I}}
 
qSG[-0.3999999999999999, 1.6] = 
    {{0.6043676474351731 - 2.686500587196374*^-16*I, 
      0.7967055583668923 + 1.0091815843094837*^-15*I}, 
     {-0.7967055583676947 + 7.054705337932699*^-16*I, 
      0.6043676474355717 + 1.4057103769024154*^-16*I}}
 
qSG[-0.3999999999999999, 1.8] = 
    {{0.6910693680565783 - 1.4907279307979893*^-16*I, 
      0.7227884396786299 + 8.630491618629137*^-16*I}, 
     {-0.7227884396793576 + 6.826361377463532*^-16*I, 
      0.6910693680568892 + 1.0566369163751399*^-16*I}}
 
qSG[-0.3999999999999999, 2.] = 
    {{0.761594078124191 - 1.7476364530880452*^-16*I, 
      0.6480543651311226 + 8.924717166488646*^-16*I}, 
     {-0.648054365131775 + 6.487452509745411*^-16*I, 
      0.7615940781244313 + 1.19972610149166*^-16*I}}
 
qSG[-0.19999999999999973, 0.] = 
    {{-0.24491892047904495 + 1.1561816989499337*^-15*I, 
      0.9695435639466901 - 1.3213825003950652*^-15*I}, 
     {-0.969543563947665 - 1.8378154523668888*^-16*I, 
      -0.24491892047779107 + 1.0898532709782064*^-15*I}}
 
qSG[-0.19999999999999973, 0.2] = 
    {{-0.09966825704443782 - 2.274099800118446*^-16*I, 
      0.9950207226669106 + 2.5315340406210104*^-17*I}, 
     {-0.9950207226679127 + 1.3968037566314173*^-15*I, 
      -0.0996682570433296 - 5.797410697949049*^-16*I}}
 
qSG[-0.19999999999999973, 0.4] = 
    {{0.04995812003472111 - 6.389468891554998*^-16*I, 
      0.9987513135116879 + 4.0736433949678167*^-16*I}, 
     {-0.9987513135126938 + 4.1330233550254966*^-16*I, 
      0.049958120035678455 + 2.292241894352268*^-16*I}}
 
qSG[-0.19999999999999973, 0.6000000000000001] = 
    {{0.1973750837414675 - 8.217694322477964*^-16*I, 
      0.9803280452566552 + 8.222626534426395*^-16*I}, 
     {-0.9803280452576421 + 4.565581551327226*^-16*I, 
      0.19737508374227575 + 3.469630752693369*^-16*I}}
 
qSG[-0.19999999999999973, 0.8] = 
    {{0.3363753345266396 - 1.2457029788271648*^-16*I, 
      0.9417280044263405 + 1.2615722203403413*^-16*I}, 
     {-0.9417280044272893 + 5.636362747983486*^-16*I, 
      0.33637533452730783 + 2.908177260591703*^-16*I}}
 
qSG[-0.19999999999999973, 1.] = 
    {{0.4621169786681505 - 2.4085545261019964*^-16*I, 
      0.8868189770327717 + 2.828785788061437*^-16*I}, 
     {-0.886818977033665 + 3.6779253922095557*^-16*I, 
      0.46211697866869184 + 6.380477984586387*^-16*I}}
 
qSG[-0.19999999999999973, 1.2000000000000002] = 
    {{0.5716698196013563 - 3.029848641602201*^-16*I, 
      0.8204837703184185 + 7.760746301249808*^-16*I}, 
     {-0.8204837703192449 + 5.903030285057527*^-16*I, 
      0.5716698196017874 + 2.3366289726291166*^-16*I}}
 
qSG[-0.19999999999999973, 1.4000000000000001] = 
    {{0.6640366539262638 - 3.9074085532538743*^-16*I, 
      0.7477000215604818 + 1.0627674394078131*^-15*I}, 
     {-0.7477000215612348 + 5.974508257880777*^-16*I, 
      0.6640366539266024 + 1.3494831682731246*^-16*I}}
 
qSG[-0.19999999999999973, 1.6] = 
    {{0.7397829613579274 - 1.83526681936489*^-16*I, 0.6728455766992782 + 
       7.038319428127469*^-16*I}, {-0.6728455766999561 + 
       6.396823820679512*^-16*I, 0.7397829613581894 + 6.732975174704737*^-17*
        I}}
 
qSG[-0.19999999999999973, 1.8] = 
    {{0.8004989538280651 - 6.561467717403621*^-17*I, 
      0.5993341513042652 + 6.241894205221844*^-16*I}, 
     {-0.5993341513048689 + 5.600009923042315*^-16*I, 
      0.8004989538282659 + 2.0022620138052926*^-16*I}}
 
qSG[-0.19999999999999973, 2.] = 
    {{0.8482835895866607 - 7.27506264985136*^-17*I, 0.5295422094956381 + 
       5.842330038928603*^-16*I}, {-0.5295422094961715 + 
       5.681273030610234*^-16*I, 0.8482835895868135 + 6.761886836500537*^-17*
        I}}
 
qSG[0., 0.] = {{-2.6884895842904655*^-7 - 9.275638701233218*^-16*I, 
      0.9999999999993436 + 4.74286120416706*^-16*I}, 
     {-1.0000000000003502 + 7.680223725979083*^-16*I, 
      -2.688479514567632*^-7 - 1.8430650269655822*^-19*I}}
 
qSG[0., 0.2] = {{0.14888478001490124 - 1.4987062335742*^-16*I, 
      0.9888545506183417 - 8.628430183733183*^-17*I}, 
     {-0.9888545506193375 + 7.615222072855228*^-16*I, 
      0.14888478001575822 + 1.3263130591189427*^-16*I}}
 
qSG[0., 0.4] = {{0.2913123837898748 - 7.052527682628066*^-16*I, 
      0.9566279815316742 + 7.215850020732159*^-16*I}, 
     {-0.9566279815326383 + 3.761959399436145*^-16*I, 
      0.2913123837905893 + 3.677002752308066*^-16*I}}
 
qSG[0., 0.6000000000000001] = 
    {{0.42189880766170595 - 3.6030830624469574*^-16*I, 
      0.9066429264558467 + 4.5249024891439155*^-16*I}, 
     {-0.9066429264567598 + 4.561966952500918*^-16*I, 
      0.4218988076622885 + 3.100999644510438*^-16*I}}
 
qSG[0., 0.8] = {{0.5370494027066142 - 2.2050845907481002*^-16*I, 
      0.8435507922178689 + 5.4190259097502825*^-16*I}, 
     {-0.843550792218718 + 4.769603664939067*^-16*I, 
      0.5370494027070807 + 2.999251769252987*^-16*I}}
 
qSG[0., 1.] = {{0.6351488203080236 - 3.9502157832370205*^-16*I, 
      0.7723897824676391 + 7.371174952969125*^-16*I}, 
     {-0.7723897824684165 + 4.792000220599714*^-16*I, 
      0.6351488203083905 + 2.988909093052127*^-16*I}}
 
qSG[0., 1.2000000000000002] = 
    {{0.7162977670209938 - 3.1566345283512023*^-17*I, 
      0.6977947470137456 + 2.5263684675474843*^-17*I}, 
     {-0.6977947470144479 + 5.932444846084398*^-16*I, 
      0.7162977670212791 - 1.0117429401912572*^-16*I}}
 
qSG[0., 1.4000000000000001] = 
    {{0.7818062789164038 - 1.1551446524808612*^-16*I, 
      0.62352140480201 + 5.536159789987682*^-16*I}, 
     {-0.6235214048026378 + 6.004174193067119*^-16*I, 
      0.7818062789166236 + 2.155847278033107*^-18*I}}
 
qSG[0., 1.6] = {{0.8336545481683988 - 7.176874421388121*^-17*I, 
      0.5522862431001312 + 6.428245899249038*^-16*I}, 
     {-0.5522862431006872 + 5.031648760815969*^-16*I, 
      0.8336545481685662 + 1.4676722806201712*^-16*I}}
 
qSG[0., 1.8] = {{0.8740532445917403 - 7.923856876509167*^-17*I, 
      0.4858301407058575 + 6.572580241403492*^-16*I}, 
     {-0.4858301407063469 + 5.263117193176696*^-16*I, 
      0.8740532445918672 + 6.46197434221319*^-17*I}}
 
qSG[0., 2.] = {{0.9051482222136735 - 4.7552103987295*^-17*I, 
      0.4250961018677255 + 4.983183155425792*^-16*I}, 
     {-0.4250961018681536 + 4.996699423863095*^-16*I, 
      0.905148222213769 + 4.7037547208952635*^-17*I}}
 
qSG[0.20000000000000018, 0.] = 
    {{0.2449184150349768 - 6.666952634259982*^-16*I, 
      0.9695436916278937 + 5.529346794267206*^-16*I}, 
     {-0.9695436916288701 + 1.1205210200703353*^-16*I, 
      0.24491841503573653 + 6.225828777545996*^-16*I}}
 
qSG[0.20000000000000018, 0.2] = 
    {{0.37994874521161626 - 4.463532213150535*^-16*I, 
      0.9250075410562197 + 5.645761331944698*^-16*I}, 
     {-0.9250075410571512 + 4.2495090166982134*^-16*I, 
      0.37994874521224076 + 2.692650167409771*^-16*I}}
 
qSG[0.20000000000000018, 0.4] = 
    {{0.5005200281888833 - 2.364318292160846*^-16*I, 
      0.8657249571201446 + 3.1344492062610684*^-16*I}, 
     {-0.8657249571210165 + 4.937846699486395*^-16*I, 
      0.5005200281893862 + 1.228360604816046*^-16*I}}
 
qSG[0.20000000000000018, 0.6000000000000001] = 
    {{0.6043676281565722 - 1.198932931991926*^-16*I, 
      0.7967055729913197 + 2.4202342571503665*^-16*I}, 
     {-0.7967055729921217 + 5.682349196999071*^-16*I, 
      0.6043676281569711 - 2.827841942575902*^-17*I}}
 
qSG[0.20000000000000018, 0.8] = 
    {{0.6910693521893083 - 1.6484793809714252*^-16*I, 
      0.7227884548495747 + 5.7923348904790485*^-16*I}, 
     {-0.722788454850303 + 4.695376223430575*^-16*I, 
      0.6910693521896196 + 8.958551447003411*^-17*I}}
 
qSG[0.20000000000000018, 1.] = 
    {{0.7615940653685381 - 1.8617044761484998*^-16*I, 
      0.648054380121577 + 5.748746873309216*^-16*I}, 
     {-0.6480543801222294 + 3.9847417569074503*^-16*I, 
      0.7615940653687782 + 1.8528426086730972*^-16*I}}
 
qSG[0.20000000000000018, 1.2000000000000002] = 
    {{0.8177540096588363 - 1.401267204353276*^-16*I, 
      0.5755678758290546 + 6.230991020807674*^-16*I}, 
     {-0.5755678758296339 + 4.618397957103748*^-16*I, 
      0.8177540096590199 + 5.222242389571448*^-17*I}}
 
qSG[0.20000000000000018, 1.4000000000000001] = 
    {{0.8617231086725264 - 1.0778372977295551*^-16*I, 
      0.507378836747598 + 5.76170541878092*^-16*I}, 
     {-0.5073788367481088 + 4.74624668030073*^-16*I, 
      0.8617231086726657 + 5.282070054713175*^-17*I}}
 
qSG[0.20000000000000018, 1.6] = 
    {{0.8956928368227878 - 1.5560908217920157*^-17*I, 
      0.4446732981234979 + 4.045615300673255*^-16*I}, 
     {-0.4446732981239456 + 4.400998725594693*^-16*I, 
      0.8956928368228928 + 4.863356309740121*^-17*I}}
 
qSG[0.20000000000000018, 1.8] = 
    {{0.9216685276530735 - 6.515950724421932*^-17*I, 
      0.3879782534286851 + 4.1948147923759433*^-16*I}, 
     {-0.38797825342907577 + 4.348705258593965*^-16*I, 
      0.9216685276531524 + 5.854647510484493*^-17*I}}
 
qSG[0.20000000000000018, 2.] = 
    {{0.9413755193495323 - 2.979842783111435*^-17*I, 
      0.33736053647279846 + 3.779762772714201*^-16*I}, 
     {-0.33736053647313824 + 4.0274228496982316*^-16*I, 
      0.9413755193495914 + 3.3258444896221853*^-17*I}}
 
qSG[0.40000000000000036, 0.] = 
    {{0.46211695478180204 - 3.8154080162326*^-16*I, 0.8868189894798291 + 
       5.781132354071728*^-16*I}, {-0.8868189894807228 + 
       3.266731521843241*^-16*I, 0.4621169547823438 + 2.0139108951813635*^-16*
        I}}
 
qSG[0.40000000000000036, 0.2] = 
    {{0.5716697991548173 - 3.419480439575012*^-16*I, 
      0.8204837845644886 + 5.912720494685461*^-16*I}, 
     {-0.8204837845653148 + 3.16154239771304*^-16*I, 
      0.5716697991552487 + 3.0987503825455815*^-16*I}}
 
qSG[0.40000000000000036, 0.4] = 
    {{0.6640366369463842 - 2.6836129111235896*^-16*I, 
      0.7477000366404098 + 4.79767149144777*^-16*I}, 
     {-0.7477000366411624 + 4.850629438988594*^-16*I, 
      0.6640366369467232 - 2.665133662582098*^-16*I}}
 
qSG[0.40000000000000036, 0.6000000000000001] = 
    {{0.7397829476076767 - 6.065860418807575*^-17*I, 
      0.6728455918174591 + 3.028001931636445*^-16*I}, 
     {-0.6728455918181369 + 3.9025718942436245*^-16*I, 
      0.7397829476079386 + 2.1490531492005923*^-16*I}}
 
qSG[0.40000000000000036, 0.8] = 
    {{0.8004989429182381 - 1.9300581114689223*^-16*I, 
      0.5993341658759445 + 4.98670333462568*^-16*I}, 
     {-0.5993341658765481 + 4.273761812103334*^-16*I, 
      0.8004989429184389 + 9.545176366353847*^-17*I}}
 
qSG[0.40000000000000036, 1.] = 
    {{0.8482835810697719 - 9.652267805145653*^-17*I, 
      0.529542223139002 + 4.418618036845535*^-16*I}, 
     {-0.529542223139535 + 4.2164863600262644*^-16*I, 
      0.8482835810699246 + 7.528831904581066*^-17*I}}
 
qSG[0.40000000000000036, 1.2000000000000002] = 
    {{0.8853516048613574 - 4.3987247132758936*^-17*I, 
      0.4649220749427502 + 3.496520535404164*^-16*I}, 
     {-0.46492207494321836 + 4.0710431034469776*^-16*I, 
      0.8853516048614729 + 5.876243283304105*^-17*I}}
 
qSG[0.40000000000000036, 1.4000000000000001] = 
    {{0.9137854586003732 - 1.2677762319545955*^-17*I, 
      0.40619716351821067 + 3.424280133881604*^-16*I}, 
     {-0.4061971635186197 + 4.0219674332173146*^-16*I, 
      0.91378545860046 + 5.822291961667237*^-17*I}}
 
qSG[0.40000000000000036, 1.6] = 
    {{0.9354090479103044 - 2.8842160202442585*^-17*I, 
      0.3535674095378926 + 3.5615300122017813*^-16*I}, 
     {-0.3535674095382487 + 3.6923539724658603*^-16*I, 
      0.9354090479103695 + 4.2752136034789145*^-17*I}}
 
qSG[0.40000000000000036, 1.8] = 
    {{0.9517459409623151 - 4.499614103244394*^-17*I, 
      0.30688705391659143 + 3.756603253657499*^-16*I}, 
     {-0.3068870539169005 + 3.6557658251844834*^-16*I, 
      0.9517459409623638 + 3.6893072430520165*^-17*I}}
 
qSG[0.40000000000000036, 2.] = 
    {{0.9640275685918621 + 3.5347039860459763*^-17*I, 
      0.2658022704845618 + 3.5685228994598546*^-16*I}, 
     {-0.26580227048482946 + 3.3448540822923064*^-16*I, 
      0.9640275685918983 + 2.2262322236617026*^-17*I}}
 
qSG[0.55, 0.] = {{0.5963733923404027 + 1.559373368921398*^-16*I, 
      0.8027071551365508 - 4.012459704588738*^-16*I}, 
     {-0.802707155137359 + 1.4879951548964856*^-16*I, 
      0.5963733923408092 + 4.431520353633705*^-16*I}}
 
qSG[0.6000000000000001, 0.] = {{0.6351488021882465 - 1.20337705958189*^-16*I, 
      0.7723897973678295 + 1.6233347268216838*^-16*I}, 
     {-0.7723897973686071 + 3.6691663397779884*^-16*I, 
      0.6351488021886141 + 5.787260185144865*^-17*I}}
 
qSG[0.6000000000000001, 0.2] = 
    {{0.7162977522321166 - 1.5182472144421174*^-16*I, 
      0.6977947621947704 + 3.561358455347121*^-16*I}, 
     {-0.697794762195473 + 3.0298723832354783*^-16*I, 
      0.7162977522324022 + 1.4585519222392695*^-16*I}}
 
qSG[0.6000000000000001, 0.4] = 
    {{0.7818062671082351 - 1.919530380773637*^-16*I, 
      0.623521419607757 + 6.373163717953233*^-16*I}, 
     {-0.6235214196083847 + 3.9263333481075934*^-16*I, 
      0.7818062671084549 + 2.996497674318797*^-17*I}}
 
qSG[0.6000000000000001, 0.6000000000000001] = 
    {{0.8336545389041914 - 1.2156115586572489*^-16*I, 
      0.5522862570840907 + 5.374586292365104*^-16*I}, 
     {-0.5522862570846468 + 3.657805213390142*^-16*I, 
      0.8336545389043588 + 4.5744705236406565*^-17*I}}
 
qSG[0.6000000000000001, 0.8] = 
    {{0.874053237422903 - 5.513349876640075*^-17*I, 0.48583015360325726 + 
       3.2491201898723515*^-16*I}, {-0.4858301536037463 + 
       3.635836333789363*^-16*I, 0.8740532374230299 + 7.654202404186891*^-17*
        I}}
 
qSG[0.6000000000000001, 1.] = 
    {{0.9051482167251685 - 1.9923717702568915*^-17*I, 
      0.4250961135542839 + 2.99635204963087*^-16*I}, 
     {-0.42509611355471194 + 3.542667633894939*^-16*I, 
      0.905148216725264 + 5.842094699290034*^-17*I}}
 
qSG[0.6000000000000001, 1.2000000000000002] = 
    {{0.9288575947213942 - 3.523007536736321*^-17*I, 
      0.3704369969754165 + 3.5740124541755997*^-16*I}, 
     {-0.37043699697578947 + 3.3730010813645047*^-16*I, 
      0.9288575947214659 + 5.79965592225798*^-17*I}}
 
qSG[0.6000000000000001, 1.4000000000000001] = 
    {{0.9468059936543562 - 7.146622855456315*^-18*I, 
      0.3218049259722724 + 3.139765802527539*^-16*I}, 
     {-0.3218049259725964 + 3.382863071347272*^-16*I, 
      0.9468059936544099 + 2.5937816905987936*^-17*I}}
 
qSG[0.6000000000000001, 1.6] = 
    {{0.9603193748543668 - 9.300683891813237*^-18*I, 
      0.27890266811056547 + 2.318182357611709*^-16*I}, 
     {-0.27890266811084635 + 3.0771440438464197*^-16*I, 
      0.9603193748544067 + 2.2437543512826287*^-17*I}}
 
qSG[0.6000000000000001, 1.8] = 
    {{0.9704519269285294 + 7.333299523212836*^-19*I, 
      0.24129454515303456 + 2.6874052869963666*^-16*I}, 
     {-0.24129454515327756 + 2.8815360101427934*^-16*I, 
      0.9704519269285591 + 1.4926014481550514*^-17*I}}
 
qSG[0.6000000000000001, 2.] = 
    {{0.9780261079213238 - 2.2059377497383462*^-17*I, 
      0.20848245063840837 + 2.769741921347349*^-16*I}, 
     {-0.20848245063861837 + 2.7266090510121215*^-16*I, 
      0.978026107921346 + 1.0119517730369487*^-17*I}}
 
qSG[0.8000000000000003, 0.] = 
    {{0.7615940526128848 - 1.932751256574879*^-17*I, 
      0.6480543951120313 - 9.348776069433329*^-17*I}, 
     {-0.6480543951126843 + 2.0409662507034753*^-16*I, 
      0.7615940526131249 + 2.5123907626186633*^-16*I}}
 
qSG[0.8000000000000003, 0.2] = 
    {{0.8177539995971005 - 1.2866097236286432*^-16*I, 
      0.575567890124544 + 1.490225253741222*^-16*I}, 
     {-0.5755678901251235 + 2.8359001123824305*^-16*I, 
      0.8177539995972839 + 1.7347197885710996*^-16*I}}
 
qSG[0.8000000000000003, 0.4] = 
    {{0.8617231008536471 - 8.626588123195909*^-17*I, 
      0.5073788500270421 + 3.630193949144252*^-16*I}, 
     {-0.5073788500275529 + 3.1105947592107884*^-16*I, 
      0.8617231008537865 + 8.519213562535061*^-17*I}}
 
qSG[0.8000000000000003, 0.6000000000000001] = 
    {{0.8956928308171115 - 2.4923873222564026*^-17*I, 
      0.44467331022056145 + 2.1448037824710804*^-16*I}, 
     {-0.4446733102210093 + 3.18537486513058*^-16*I, 
      0.8956928308172165 + 8.204352007735149*^-17*I}}
 
qSG[0.8000000000000003, 0.8] = 
    {{0.921668523081196 - 5.303151994105331*^-17*I, 0.3879782642894885 + 
       2.6198646115314172*^-16*I}, {-0.38797826428987925 + 
       3.1360508059382977*^-16*I, 0.9216685230812749 + 
       2.684458566040961*^-17*I}}
 
qSG[0.8000000000000003, 1.] = 
    {{0.9413755158927791 - 2.798706108888332*^-17*I, 
      0.33736054611857036 + 2.795563477510287*^-16*I}, 
     {-0.33736054611891 + 3.081833639603064*^-16*I, 0.9413755158928382 + 
       3.4889652742370893*^-17*I}}
 
qSG[0.8000000000000003, 1.2000000000000002] = 
    {{0.956237441937093 - 4.3328384324513624*^-17*I, 
      0.2925917883971898 + 3.9792761847318765*^-16*I}, 
     {-0.2925917883974844 + 2.982719716906242*^-16*I, 
      0.9562374419371372 + 1.4351252635066593*^-17*I}}
 
qSG[0.8000000000000003, 1.4000000000000001] = 
    {{0.967394989734425 - 2.091834598534274*^-17*I, 0.2532724498176376 + 
       2.0116303131976542*^-16*I}, {-0.25327244981789265 + 
       2.7203086193649935*^-16*I, 0.9673949897344578 + 
       1.188325677247031*^-17*I}}
 
qSG[0.8000000000000003, 1.6] = 
    {{0.9757431218775127 - 8.740407992616808*^-18*I, 
      0.21891861526295028 + 2.243125577650705*^-16*I}, 
     {-0.2189186152631708 + 2.5859952286025413*^-16*I, 
      0.9757431218775371 + 1.565057398436649*^-17*I}}
 
qSG[0.8000000000000003, 1.8] = 
    {{0.981973396954672 - 8.407657054346327*^-18*I, 0.18901917276626756 + 
       2.2038991639819764*^-16*I}, {-0.1890191727664579 + 
       2.410861981704817*^-16*I, 0.9819733969546902 + 8.231095831982596*^-18*
        I}}
 
qSG[0.8000000000000003, 2.] = 
    {{0.9866142941318674 - 1.103426709271124*^-17*I, 
      0.16307125624902097 + 2.1638913612513748*^-16*I}, 
     {-0.16307125624918523 + 2.256117285801831*^-16*I, 
      0.9866142941318808 + 7.616933499467791*^-18*I}}
 
qSG[1., 0.] = {{0.8482835725528823 - 7.683444387149274*^-17*I, 
      0.5295422367823661 + 1.8982649884762073*^-16*I}, 
     {-0.5295422367828992 + 2.6280190330621294*^-16*I, 
      0.8482835725530351 + 4.0992692620218085*^-17*I}}
 
qSG[1., 0.2] = {{0.8853515982962754 - 1.4882814665636704*^-17*I, 
      0.4649220874446425 + 1.6025134457354564*^-16*I}, 
     {-0.46492208744511077 + 2.6316725880497167*^-16*I, 
      0.8853515982963909 + 6.894991629705656*^-17*I}}
 
qSG[1., 0.4] = {{0.9137854535890363 - 6.666952473097217*^-17*I, 
      0.40619717479176715 + 2.300459754752872*^-16*I}, 
     {-0.4061971747921763 + 2.6101843903736796*^-16*I, 
      0.9137854535891231 + 4.076994592789158*^-17*I}}
 
qSG[1., 0.6000000000000001] = 
    {{0.9354090441134472 - 4.196948357289898*^-17*I, 
      0.35356741958297744 + 2.99061302312403*^-16*I}, 
     {-0.3535674195833335 + 2.6394604159031677*^-16*I, 
      0.9354090441135122 + 3.6376601453156946*^-17*I}}
 
qSG[1., 0.8] = {{0.951745938101848 - 7.992468859042025*^-18*I, 
      0.30688706278773126 + 2.575517164493993*^-16*I}, 
     {-0.30688706278804023 + 2.759727204152284*^-16*I, 
      0.9517459381018967 + 1.9096519482927718*^-17*I}}
 
qSG[1., 1.] = {{0.9640275664460227 - 6.015886987783174*^-17*I, 
      0.26580227826722 + 2.74866539853027*^-16*I}, 
     {-0.26580227826748776 + 2.5164426785625324*^-16*I, 
      0.964027566446059 + 1.646587916573969*^-17*I}}
 
qSG[1., 1.2000000000000002] = 
    {{0.9732261546541063 - 6.4760135400237705*^-18*I, 
      0.22984962888178842 + 2.0386146969490539*^-16*I}, 
     {-0.22984962888201987 + 2.361866045954864*^-16*I, 
      0.9732261546541333 + 2.2692478106582593*^-17*I}}
 
qSG[1., 1.4000000000000001] = 
    {{0.9800963894112334 - 1.7638162269988276*^-17*I, 
      0.19852220899184014 + 2.3027218147227916*^-16*I}, 
     {-0.19852220899204007 + 2.2142249702719166*^-16*I, 
      0.9800963894112534 + 1.0091346132095474*^-17*I}}
 
qSG[1., 1.6] = {{0.9852169124854094 - 2.641429711624933*^-18*I, 
      0.1713115155284939 + 2.139204518753007*^-16*I}, 
     {-0.1713115155286664 + 2.128999339014725*^-16*I, 
      0.9852169124854243 + 5.683477581282872*^-18*I}}
 
qSG[1., 1.8] = {{0.9890273988193006 - 9.828262251109626*^-18*I, 
      0.14773220496795098 + 1.8697711333372718*^-16*I}, 
     {-0.14773220496809975 + 1.9596242028195298*^-16*I, 
      0.9890273988193117 + 5.233647885840333*^-18*I}}
 
qSG[1., 2.] = {{0.9918597222096659 - 4.480643272311619*^-18*I, 
      0.12733535038683536 + 1.8007451717613548*^-16*I}, 
     {-0.1273353503869635 + 1.770440512512355*^-16*I, 
      0.991859722209674 + 4.6296361591338256*^-18*I}}
 
qSG[1.2000000000000002, 0.] = 
    {{0.9051482112366633 - 1.1707160401877845*^-17*I, 
      0.42509612524084256 + 1.860397369052495*^-16*I}, 
     {-0.4250961252412706 + 2.396499253452377*^-16*I, 
      0.9051482112367588 + 6.096001455742142*^-17*I}}
 
qSG[1.2000000000000002, 0.2] = 
    {{0.9288575905535783 - 7.504429961755493*^-17*I, 
      0.37043700742606633 + 2.745623588097228*^-16*I}, 
     {-0.3704370074264395 + 2.539903332741191*^-16*I, 
      0.92885759055365 + 2.6096786002753167*^-17*I}}
 
qSG[1.2000000000000002, 0.4] = 
    {{0.9468059905090337 - 2.3381869599890972*^-17*I, 
      0.3218049352263574 + 2.1536511901011942*^-16*I}, 
     {-0.3218049352266815 + 2.4193585509596705*^-16*I, 
      0.9468059905090873 + 3.6014465691250464*^-17*I}}
 
qSG[1.2000000000000002, 0.6000000000000001] = 
    {{0.9603193724917942 - 5.1890906467510905*^-18*I, 
      0.27890267624538967 + 2.1466893933101942*^-16*I}, 
     {-0.27890267624567044 + 2.3441633299740445*^-16*I, 
      0.9603193724918342 + 1.0986986022618315*^-17*I}}
 
qSG[1.2000000000000002, 0.8] = 
    {{0.9704519251601526 + 1.4889450336221553*^-17*I, 
      0.2412945522651916 + 1.2875045153517964*^-16*I}, 
     {-0.24129455226543464 + 2.248389572839478*^-16*I, 
      0.9704519251601823 + 1.540216525272851*^-17*I}}
 
qSG[1.2000000000000002, 1.] = 
    {{0.9780261066011875 - 1.4736747198309767*^-17*I, 
      0.20848245683138955 + 2.0325649285286063*^-16*I}, 
     {-0.2084824568315995 + 2.0913235494326742*^-16*I, 
      0.9780261066012096 + 1.2093475722744357*^-17*I}}
 
qSG[1.2000000000000002, 1.2000000000000002] = 
    {{0.9836748519380647 - 4.880871062487392*^-18*I, 
      0.179954954543002 + 1.9522521920247338*^-16*I}, 
     {-0.17995495454318328 + 1.9566366274836202*^-16*I, 
      0.9836748519380811 + 8.037465438524736*^-18*I}}
 
qSG[1.2000000000000002, 1.4000000000000001] = 
    {{0.987880392963538 - 8.802631574735917*^-18*I, 0.15521703900721245 + 
       1.8631482568026824*^-16*I}, {-0.15521703900736872 + 
       1.8941347419063307*^-16*I, 0.9878803929635502 + 
       5.9406789817725435*^-18*I}}
 
qSG[1.2000000000000002, 1.6] = 
    {{0.9910074508358454 - 4.683097886958673*^-18*I, 
      0.1338066978436071 + 1.7259573543815791*^-16*I}, 
     {-0.13380669784374186 + 1.744500096570505*^-16*I, 
      0.9910074508358544 + 4.61480217308864*^-18*I}}
 
qSG[1.2000000000000002, 1.8] = 
    {{0.9933303834008358 - 3.628733834976592*^-18*I, 
      0.11530285951669635 + 1.5810785852752644*^-16*I}, 
     {-0.11530285951681243 + 1.5784505649885608*^-16*I, 
      0.9933303834008425 + 3.449400202623043*^-18*I}}
 
qSG[1.2000000000000002, 2.] = 
    {{0.995054752307795 - 2.4352827832422203*^-18*I, 
      0.0993279412333542 + 1.4475619207660004*^-16*I}, 
     {-0.09932794123345422 + 1.4371794285691385*^-16*I, 
      0.9950547523077999 + 2.636477547416451*^-18*I}}
 
qSG[1.4000000000000004, 0.] = 
    {{0.9413755124360258 - 4.900406789701767*^-18*I, 
      0.33736055576434254 + 1.984614775489263*^-16*I}, 
     {-0.33736055576468227 + 1.9150874521660556*^-16*I, 
      0.9413755124360847 + 2.8122122972196584*^-17*I}}
 
qSG[1.4000000000000004, 0.2] = 
    {{0.9562374393369091 - 4.293775544592476*^-17*I, 
      0.2925917968950129 + 1.9308471938196297*^-16*I}, 
     {-0.29259179689530757 + 2.082060695885022*^-16*I, 
      0.9562374393369532 + 2.506850775267394*^-17*I}}
 
qSG[1.4000000000000004, 0.4] = 
    {{0.9673949877861255 + 1.4059228698769762*^-17*I, 
      0.2532724572593279 + 8.084799650604613*^-17*I}, 
     {-0.25327245725958286 + 1.9712906683884567*^-16*I, 
      0.9673949877861584 + 2.0697454464882385*^-17*I}}
 
qSG[1.4000000000000004, 0.6000000000000001] = 
    {{0.9757431204219021 - 2.5304290174227718*^-17*I, 
      0.21891862175075838 + 1.6479389129838123*^-16*I}, 
     {-0.21891862175097887 + 2.0293505832514277*^-16*I, 
      0.9757431204219266 + 1.268832653986263*^-17*I}}
 
qSG[1.4000000000000004, 0.8] = 
    {{0.9819733958695176 - 1.1202932062867186*^-17*I, 
      0.18901917840375237 + 1.900643762454517*^-16*I}, 
     {-0.18901917840394272 + 1.7555583700727822*^-16*I, 
      0.9819733958695358 + 8.588029469322772*^-18*I}}
 
qSG[1.4000000000000004, 1.] = 
    {{0.9866142933241961 - 1.6535850174878246*^-17*I, 
      0.16307126113559672 + 1.9400820849576926*^-16*I}, 
     {-0.16307126113576093 + 1.665733004902595*^-16*I, 
      0.9866142933242096 + 5.624425747015376*^-18*I}}
 
qSG[1.4000000000000004, 1.2000000000000002] = 
    {{0.990066393298975 - 6.565586398641822*^-18*I, 0.14060062894570358 + 
       1.585085004978602*^-16*I}, {-0.14060062894584519 + 
       1.5857029290138293*^-16*I, 0.9900663932989849 + 
       4.530892767027388*^-18*I}}
 
qSG[1.4000000000000004, 1.4000000000000001] = 
    {{0.9926315178145309 - 4.047544214226037*^-18*I, 
      0.121172067083123 + 1.5369581106657103*^-16*I}, 
     {-0.12117206708324502 + 1.4615476897698499*^-16*I, 
      0.9926315178145383 + 3.648631565285894*^-18*I}}
 
qSG[1.4000000000000004, 1.6] = 
    {{0.9945360768059989 - 2.843332425438038*^-18*I, 
      0.10439344774129514 + 1.4115490321110766*^-16*I}, 
     {-0.1043934477414003 + 1.3958729872162725*^-16*I, 
      0.9945360768060044 + 3.068320936020637*^-18*I}}
 
qSG[1.4000000000000004, 1.8] = 
    {{0.995949358061216 - 2.138708099850969*^-18*I, 0.08991593950706761 + 
       1.2809614023875024*^-16*I}, {-0.08991593950715816 + 
       1.3008636125485748*^-16*I, 0.9959493580612201 + 
       1.9650104498463882*^-18*I}}
 
qSG[1.4000000000000004, 2.] = 
    {{0.9969976346826742 - 1.6382716975424692*^-18*I, 
      0.07743201170796941 + 1.1776924319593556*^-16*I}, 
     {-0.0774320117080474 + 1.161705909075408*^-16*I, 
      0.9969976346826772 + 1.6534180984605989*^-18*I}}
 
qSG[1.6000000000000005, 0.] = 
    {{0.9640275643001834 + 2.2751990478197773*^-17*I, 
      0.2658022860498781 + 6.827087160999951*^-17*I}, 
     {-0.2658022860501457 + 1.7181663781916485*^-16*I, 
      0.9640275643002196 + 3.780534307669407*^-17*I}}
 
qSG[1.6000000000000005, 0.2] = 
    {{0.973226153049504 - 3.4248248029984764*^-17*I, 
      0.22984963567597358 + 1.0523791946383438*^-16*I}, 
     {-0.229849635676205 + 1.6117149974848969*^-16*I, 
      0.973226153049531 + 8.570861349219066*^-18*I}}
 
qSG[1.6000000000000005, 0.4] = 
    {{0.9800963882142228 - 9.400450769120139*^-18*I, 
      0.19852221490143473 + 1.665875550819718*^-16*I}, 
     {-0.19852221490163469 + 1.698893717897087*^-16*I, 
      0.9800963882142428 + 1.1334176635203052*^-17*I}}
 
qSG[1.6000000000000005, 0.6000000000000001] = 
    {{0.9852169115940499 - 1.0414376763522061*^-17*I, 
      0.17131152065472544 + 1.816226296340379*^-16*I}, 
     {-0.17131152065489796 + 1.6520829047009884*^-16*I, 
      0.9852169115940648 + 7.615927756846938*^-18*I}}
 
qSG[1.6000000000000005, 0.8] = 
    {{0.9890273981564278 - 1.3030260335374004*^-17*I, 
      0.1477322094057058 + 1.467104458902099*^-16*I}, 
     {-0.14773220940585455 + 1.4929851072945692*^-16*I, 
      0.9890273981564389 + 6.328501893644121*^-18*I}}
 
qSG[1.6000000000000005, 1.] = 
    {{0.9918597217171982 - 4.632439359125285*^-18*I, 
      0.1273353542228392 + 1.404759622818798*^-16*I}, 
     {-0.12733535422296743 + 1.3781128521880751*^-16*I, 
      0.9918597217172063 + 3.769938954339141*^-18*I}}
 
qSG[1.6000000000000005, 1.2000000000000002] = 
    {{0.9939631653482901 - 3.2160016854071893*^-18*I, 
      0.10971429228130704 + 1.3754519811393557*^-16*I}, 
     {-0.10971429228141752 + 1.3636542256597727*^-16*I, 
      0.9939631653482962 + 2.7450302991790886*^-18*I}}
 
qSG[1.6000000000000005, 1.4000000000000001] = 
    {{0.9955243015565597 - 2.3053155878855483*^-18*I, 
      0.09450589934130862 + 1.2217067099151316*^-16*I}, 
     {-0.0945058993414038 + 1.2284159002403418*^-16*I, 
      0.9955243015565641 + 2.417894306838806*^-18*I}}
 
qSG[1.6000000000000005, 1.6] = 
    {{0.996682396863516 - 1.7240526251973228*^-18*I, 
      0.08138918713432423 + 1.1373215856575343*^-16*I}, 
     {-0.08138918713440621 + 1.1273136958641665*^-16*I, 
      0.9966823968635193 + 1.809895438479105*^-18*I}}
 
qSG[1.6000000000000005, 1.8] = 
    {{0.9975412020803017 - 1.410386468699892*^-18*I, 
      0.07008245252685402 + 1.0485075305436705*^-16*I}, 
     {-0.0700824525269246 + 1.0162918639125527*^-16*I, 
      0.9975412020803042 + 1.2625999084514202*^-18*I}}
 
qSG[1.6000000000000005, 2.] = {{0.9981778971437957 - 8.92294808550467*^-19*I, 
      0.06033975185219168 + 9.37428586088906*^-17*I}, 
     {-0.060339751852252446 + 9.450351623036158*^-17*I, 
      0.9981778971437976 + 8.264987426083358*^-19*I}}
 
qSG[1.8000000000000007, 0.] = 
    {{0.9780261052810509 - 9.120594538613161*^-18*I, 
      0.20848246302437085 + 1.5049170686911918*^-16*I}, 
     {-0.20848246302458076 + 1.4474900339273872*^-16*I, 
      0.978026105281073 + 1.1586243862859317*^-17*I}}
 
qSG[1.8000000000000007, 0.2] = 
    {{0.9836748509544898 - 8.589936783341919*^-18*I, 
      0.1799549599194467 + 1.3450404424798243*^-16*I}, 
     {-0.17995495991962793 + 1.4444107454628718*^-16*I, 
      0.9836748509545062 + 9.01725402036727*^-18*I}}
 
qSG[1.8000000000000007, 0.4] = 
    {{0.987880392231795 - 1.1199276330610813*^-17*I, 
      0.1552170436643983 + 1.4447134663085234*^-16*I}, 
     {-0.15521704366455458 + 1.4340574682199466*^-16*I, 
      0.9878803922318072 + 5.875680060071271*^-18*I}}
 
qSG[1.8000000000000007, 0.6000000000000001] = 
    {{0.99100745029205 - 4.787192971103992*^-18*I, 0.1338067018710981 + 
       1.3569371015287877*^-16*I}, {-0.1338067018712329 + 
       1.302453458029443*^-16*I, 0.9910074502920591 + 4.729864955303668*^-18*
        I}}
 
qSG[1.8000000000000007, 0.8] = 
    {{0.9933303829970417 - 3.2389134007758617*^-18*I, 
      0.11530286299536932 + 1.2224514337591417*^-16*I}, 
     {-0.11530286299548541 + 1.1922982285666097*^-16*I, 
      0.9933303829970483 + 3.0507894029464757*^-18*I}}
 
qSG[1.8000000000000007, 1.] = 
    {{0.9950547520081392 - 2.559097210821552*^-18*I, 
      0.099327944235268 + 1.168579456342604*^-16*I}, 
     {-0.09932794423536803 + 1.1580708087258156*^-16*I, 
      0.9950547520081442 + 2.703899278691348*^-18*I}}
 
qSG[1.8000000000000007, 1.2000000000000002] = 
    {{0.996334120939349 - 1.9400428580588016*^-18*I, 
      0.08554717676231435 + 1.100082187508402*^-16*I}, 
     {-0.08554717676240048 + 1.0666769413728432*^-16*I, 
      0.9963341209393528 + 1.7595555940190855*^-18*I}}
 
qSG[1.8000000000000007, 1.4000000000000001] = 
    {{0.9972829592788666 - 1.459123873380203*^-18*I, 
      0.07366613286970944 + 9.819935744321448*^-17*I}, 
     {-0.0736661328697836 + 9.882711192114411*^-17*I, 
      0.9972829592788693 + 1.3093998233806962*^-18*I}}
 
qSG[1.8000000000000007, 1.6] = 
    {{0.9979864577899097 - 9.728857099735353*^-19*I, 
      0.063427360562633 + 9.222386984464907*^-17*I}, 
     {-0.06342736056269688 + 9.220712016583375*^-17*I, 
      0.9979864577899117 + 1.0934400233088607*^-18*I}}
 
qSG[1.8000000000000007, 1.8] = 
    {{0.998507941938202 - 8.267380591727964*^-19*I, 0.05460668353170015 + 
       8.524704295963068*^-17*I}, {-0.05460668353175515 + 
       8.523688998598254*^-17*I, 0.9985079419382036 + 8.43278739778*^-19*I}}
 
qSG[1.8000000000000007, 2.] = 
    {{0.9988944424550402 - 5.594579168914049*^-19*I, 
      0.047009497257797295 + 7.468222141414766*^-17*I}, 
     {-0.04700949725784463 + 7.531373470962859*^-17*I, 
      0.9988944424550413 + 5.875899351728619*^-19*I}}
 
qSG[2., 0.] = {{0.9866142925165248 - 2.809392848958127*^-18*I, 
      0.1630712660221726 + 1.2769501249099724*^-16*I}, 
     {-0.16307126602233682 + 1.252021874054074*^-16*I, 
      0.9866142925165382 + 9.093727152454926*^-18*I}}
 
qSG[2., 0.2] = {{0.990066392698556 - 8.605377171749337*^-18*I, 
      0.14060063317366872 + 1.2208724187882394*^-16*I}, 
     {-0.14060063317381033 + 1.2142795906130998*^-16*I, 
      0.990066392698566 + 4.7876416772704395*^-18*I}}
 
qSG[2., 0.4] = {{0.9926315173685822 - 4.0957106680261764*^-18*I, 
      0.12117207073629738 + 1.1589251016630895*^-16*I}, 
     {-0.12117207073641936 + 1.1472018388990245*^-16*I, 
      0.9926315173685896 + 3.7815480914971575*^-18*I}}
 
qSG[2., 0.6000000000000001] = {{0.9945360764750002 - 3.07767043721553*^-18*I, 
      0.10439345089465552 + 1.107963210279779*^-16*I}, 
     {-0.10439345089476063 + 1.0927327944712976*^-16*I, 
      0.9945360764750056 + 2.574609493394757*^-18*I}}
 
qSG[2., 0.8] = {{0.9959493578156585 - 2.1409296945423458*^-18*I, 
      0.0899159422269728 + 1.0197975604628722*^-16*I}, 
     {-0.08991594222706334 + 9.888242346431575*^-17*I, 
      0.9959493578156625 + 2.0134088343657525*^-18*I}}
 
qSG[2., 1.] = {{0.9969976345005697 - 1.6695605216265976*^-18*I, 
      0.0774320140527083 + 9.613250591804169*^-17*I}, 
     {-0.0774320140527863 + 9.621881230182588*^-17*I, 
      0.9969976345005727 + 1.670846253732393*^-18*I}}
 
qSG[2., 1.2000000000000002] = 
    {{0.9977749272454872 - 1.2386751809887192*^-18*I, 
      0.06667229229789055 + 9.106318896740878*^-17*I}, 
     {-0.06667229229795768 + 8.917039379706712*^-17*I, 
      0.9977749272454896 + 1.1052007282306287*^-18*I}}
 
qSG[2., 1.4000000000000001] = 
    {{0.9983511501479132 - 9.776679211401222*^-19*I, 
      0.057401925040310706 + 8.362043108620226*^-17*I}, 
     {-0.0574019250403685 + 8.031150929423295*^-17*I, 
      0.9983511501479149 + 8.530098382692896*^-19*I}}
 
qSG[2., 1.6] = {{0.9987782409490907 - 6.338826681225361*^-19*I, 
      0.049416853467578126 + 7.413085306758313*^-17*I}, 
     {-0.049416853467627884 + 7.375956523296377*^-17*I, 
      0.998778240949092 + 6.271675165454961*^-19*I}}
 
qSG[2., 1.8] = {{0.9990947553246357 - 4.651752072996301*^-19*I, 
      0.04254021488901333 + 6.835842480747204*^-17*I}, 
     {-0.04254021488905617 + 6.901585693309046*^-17*I, 
      0.9990947553246365 + 5.104267168997446*^-19*I}}
 
qSG[2., 2.] = {{0.9993292995821939 - 3.3103280237405024*^-19*I, 
      0.03661899775471277 + 6.0450465203662*^-17*I}, 
     {-0.03661899775474964 + 6.267969531924216*^-17*I, 
      0.9993292995821945 + 3.4462067718917653*^-19*I}}
 
qSG[2.2, 0.] = {{0.9918597212247303 - 4.3685631465547*^-18*I, 
      0.12733535805884338 + 1.0561803176459905*^-16*I}, 
     {-0.12733535805897161 + 1.0312711829883445*^-16*I, 
      0.9918597212247385 + 3.958003060601854*^-18*I}}
 
qSG[2.2, 0.2] = {{0.9939631649826901 - 2.882797068554053*^-18*I, 
      0.10971429559348236 + 1.0033478242756744*^-16*I}, 
     {-0.1097142955935928 + 9.917284319040399*^-17*I, 
      0.9939631649826962 + 2.9945469369109183*^-18*I}}
 
qSG[2.2, 0.4] = {{0.9955243012852922 - 2.3292407097493188*^-18*I, 
      0.09450590219883735 + 9.533352567172611*^-17*I}, 
     {-0.09450590219893251 + 9.655883244178675*^-17*I, 
      0.9955243012852967 + 2.26754062530592*^-18*I}}
 
qSG[2.2, 0.6000000000000001] = 
    {{0.9966823966623228 - 1.8424901887386642*^-18*I, 
      0.08138918959811214 + 9.052839869962197*^-17*I}, 
     {-0.0813891895981941 + 9.080742118982908*^-17*I, 
      0.9966823966623262 + 1.7672280098106566*^-18*I}}
 
qSG[2.2, 0.8] = {{0.9975412019311258 - 1.3725909953475003*^-18*I, 
      0.07008245465019604 + 8.135524543291789*^-17*I}, 
     {-0.0700824546502666 + 8.406127517585069*^-17*I, 
      0.9975412019311284 + 1.2379295744584918*^-18*I}}
 
qSG[2.2, 1.] = {{0.9981778970332131 - 9.573523810779138*^-19*I, 
      0.060339753681518456 + 7.646180044453774*^-17*I}, 
     {-0.06033975368157922 + 7.591799653978744*^-17*I, 
      0.9981778970332149 + 8.849358076324167*^-19*I}}
 
qSG[2.2, 1.2000000000000002] = 
    {{0.9986498341359623 - 7.341652358297531*^-19*I, 
      0.05194717297611551 + 7.09124539989365*^-17*I}, 
     {-0.05194717297616781 + 7.005440834083436*^-17*I, 
      0.9986498341359638 + 7.650710595779012*^-19*I}}
 
qSG[2.2, 1.4000000000000001] = 
    {{0.9989995975063366 - 5.083860865929051*^-19*I, 
      0.04471917018655786 + 6.646139982624586*^-17*I}, 
     {-0.04471917018660289 + 6.644560768024273*^-17*I, 
      0.9989995975063376 + 4.931901136538755*^-19*I}}
 
qSG[2.2, 1.6] = {{0.9992587875256966 - 3.8100779095749464*^-19*I, 
      0.038495136740531066 + 5.913063251842769*^-17*I}, 
     {-0.03849513674056983 + 5.904020788818547*^-17*I, 
      0.9992587875256974 + 3.833239506580178*^-19*I}}
 
qSG[2.2, 1.8] = {{0.9994508435551761 - 2.8726870112321557*^-19*I, 
      0.033136253814289446 + 5.552289492879639*^-17*I}, 
     {-0.03313625381432281 + 5.4946421298715096*^-17*I, 
      0.9994508435551767 + 2.5639693826749925*^-19*I}}
 
qSG[2.2, 2.] = {{0.999593145953349 - 2.0235432528292791*^-19*I, 
      0.028522667531022915 + 4.8692599093007916*^-17*I}, 
     {-0.028522667531051635 + 4.8859989082416725*^-17*I, 
      0.9995931459533495 + 2.1402384064651854*^-19*I}}
 
qSG[2.4000000000000004, 0.] = 
    {{0.9950547517084835 - 2.7338410821675855*^-18*I, 
      0.09932794723718194 + 8.746101587836562*^-17*I}, 
     {-0.09932794723728197 + 8.414088319403854*^-17*I, 
      0.9950547517084883 + 2.3810713564034372*^-18*I}}
 
qSG[2.4000000000000004, 0.2] = 
    {{0.9963341207170737 - 1.9757983785970452*^-18*I, 
      0.08554717935106662 + 8.203378560321176*^-17*I}, 
     {-0.08554717935115277 + 8.342224145731656*^-17*I, 
      0.9963341207170775 + 1.9256005912024854*^-18*I}}
 
qSG[2.4000000000000004, 0.4] = 
    {{0.9972829591140444 - 1.4808381254364465*^-18*I, 
      0.0736661351010511 + 8.02053518362013*^-17*I}, 
     {-0.07366613510112528 + 8.189018850994112*^-17*I, 
      0.9972829591140472 + 1.4065358681756897*^-18*I}}
 
qSG[2.4000000000000004, 0.6000000000000001] = 
    {{0.9979864576677204 - 1.0463002042271961*^-18*I, 
      0.06342736248519831 + 7.198393408319632*^-17*I}, 
     {-0.06342736248526219 + 7.322058975214609*^-17*I, 
      0.9979864576677224 + 1.0036800919973315*^-18*I}}
 
qSG[2.4000000000000004, 0.8] = 
    {{0.9985079418476348 - 7.961448339293727*^-19*I, 
      0.05460668518776428 + 6.636804087878756*^-17*I}, 
     {-0.054606685187819255 + 6.702884829483835*^-17*I, 
      0.9985079418476362 + 7.412187131086483*^-19*I}}
 
qSG[2.4000000000000004, 1.] = 
    {{0.9988944423879204 - 5.618820638159997*^-19*I, 
      0.04700949868401236 + 6.163915140596962*^-17*I}, 
     {-0.04700949868405971 + 6.159123810385114*^-17*I, 
      0.9988944423879215 + 5.925970635369033*^-19*I}}
 
qSG[2.4000000000000004, 1.2000000000000002] = 
    {{0.9991808654349303 - 4.574601178073909*^-19*I, 
      0.04046724785182322 + 5.859620736561984*^-17*I}, 
     {-0.040467247851863966 + 5.872158684868791*^-17*I, 
      0.9991808654349312 + 3.8210988001177803*^-19*I}}
 
qSG[2.4000000000000004, 1.4000000000000001] = 
    {{0.9993931057772577 - 3.2010754322682086*^-19*I, 
      0.03483418041069772 + 5.2297721064556265*^-17*I}, 
     {-0.03483418041073279 + 5.2013118162879954*^-17*I, 
      0.9993931057772583 + 2.8446637579349754*^-19*I}}
 
qSG[2.4000000000000004, 1.6] = 
    {{0.9995503663475283 - 2.548866540220401*^-19*I, 
      0.02998441486040173 + 4.7097531098969355*^-17*I}, 
     {-0.029984414860431914 + 4.787167710576343*^-17*I, 
      0.9995503663475287 + 2.2929798545627134*^-19*I}}
 
qSG[2.4000000000000004, 1.8] = 
    {{0.9996668837937825 - 1.7790472969641505*^-19*I, 
      0.025809328662847908 + 4.3759594475293077*^-17*I}, 
     {-0.025809328662873894 + 4.3372774792313566*^-17*I, 
      0.9996668837937829 + 1.869745950838323*^-19*I}}
 
qSG[2.4000000000000004, 2.] = 
    {{0.9997532107959136 - 1.3546362589330723*^-19*I, 
      0.022215253841913613 + 4.000732725037031*^-17*I}, 
     {-0.022215253841935984 + 3.948861791989398*^-17*I, 
      0.9997532107959138 + 1.493351258204179*^-19*I}}
 
qSG[2.6000000000000005, 0.] = 
    {{0.996997634318465 - 1.5464530222465559*^-18*I, 
      0.07743201639744718 + 7.399338641611684*^-17*I}, 
     {-0.07743201639752514 + 7.230412245924653*^-17*I, 
      0.9969976343184681 + 1.5504663008391324*^-18*I}}
 
qSG[2.6000000000000005, 0.2] = 
    {{0.9977749271104758 - 1.1534144958835526*^-18*I, 
      0.06667229431838553 + 7.030768139024065*^-17*I}, 
     {-0.06667229431845267 + 7.023664099343106*^-17*I, 
      0.9977749271104781 + 1.1620311497402596*^-18*I}}
 
qSG[2.6000000000000005, 0.4] = 
    {{0.9983511500478366 - 8.645154455583549*^-19*I, 
      0.057401926780873025 + 6.378386564940487*^-17*I}, 
     {-0.057401926780930826 + 6.313385424653425*^-17*I, 
      0.9983511500478383 + 9.210601693963276*^-19*I}}
 
qSG[2.6000000000000005, 0.6000000000000001] = 
    {{0.9987782408749204 - 6.634631278179232*^-19*I, 
      0.04941685496665519 + 6.095167370329316*^-17*I}, 
     {-0.04941685496670495 + 5.903681095252049*^-17*I, 
      0.9987782408749216 + 6.68053438126948*^-19*I}}
 
qSG[2.6000000000000005, 0.8] = 
    {{0.9990947552696716 - 5.041483267737469*^-19*I, 
      0.042540216179894175 + 5.620212491994926*^-17*I}, 
     {-0.042540216179937015 + 5.56806197568938*^-17*I, 
      0.9990947552696725 + 4.742284635302041*^-19*I}}
 
qSG[2.6000000000000005, 1.] = 
    {{0.9993292995414659 - 3.802371538635568*^-19*I, 
      0.03661899886617541 + 5.408527408330306*^-17*I}, 
     {-0.03661899886621228 + 5.164830982664931*^-17*I, 
      0.9993292995414665 + 3.524402187950438*^-19*I}}
 
qSG[2.6000000000000005, 1.2000000000000002] = 
    {{0.9995030896993398 - 2.69375121997255*^-19*I, 0.03152100381447258 + 
       4.717461533291327*^-17*I}, {-0.031521003814504324 + 
       4.674853933291979*^-17*I, 0.9995030896993402 + 2.6040520560389767*^-19*
        I}}
 
qSG[2.6000000000000005, 1.4000000000000001] = 
    {{0.9996318560955687 - 2.0448092144547862*^-19*I, 
      0.027132126325206528 + 4.4277619841549866*^-17*I}, 
     {-0.027132126325233846 + 4.346989526840578*^-17*I, 
      0.9996318560955691 + 1.8152613187793467*^-19*I}}
 
qSG[2.6000000000000005, 1.6] = 
    {{0.9997272592810004 - 1.3894377888842036*^-19*I, 
      0.023353951496449362 + 3.858680234694461*^-17*I}, 
     {-0.023353951496472874 + 3.7691315838946066*^-17*I, 
      0.9997272592810007 + 1.4293435344557148*^-19*I}}
 
qSG[2.6000000000000005, 1.8] = 
    {{0.9997979415679812 - 1.0630273009588766*^-19*I, 
      0.020101642630068597 + 3.4981699075804274*^-17*I}, 
     {-0.020101642630088845 + 3.5691824645324844*^-17*I, 
      0.9997979415679814 + 1.0341353458203672*^-19*I}}
 
qSG[2.6000000000000005, 2.] = 
    {{0.9998503075150719 - 8.455513574471414*^-20*I, 
      0.017302097040987875 + 3.165806505120122*^-17*I}, 
     {-0.0173020970410053 + 3.181860668969024*^-17*I, 
      0.999850307515072 + 7.568737168209156*^-20*I}}
 
qSG[2.8000000000000007, 0.] = 
    {{0.9981778969226305 - 1.0170584020993266*^-18*I, 
      0.06033975551084518 + 6.089862223013679*^-17*I}, 
     {-0.060339755510905924 + 5.776962933416521*^-17*I, 
      0.9981778969226323 + 9.64506244306575*^-19*I}}
 
qSG[2.8000000000000007, 0.2] = 
    {{0.9986498340540021 - 7.80451069157364*^-19*I, 0.051947174551748104 + 
       5.812718336467503*^-17*I}, {-0.05194717455180041 + 
       5.880490257705287*^-17*I, 0.9986498340540034 + 6.550053479157952*^-19*
        I}}
 
qSG[2.8000000000000007, 0.4] = 
    {{0.9989995974455976 - 5.289216160845183*^-19*I, 
      0.044719171543429775 + 5.3212497196053193*^-17*I}, 
     {-0.04471917154347481 + 5.3329266500836424*^-17*I, 
      0.9989995974455986 + 5.321787161947177*^-19*I}}
 
qSG[2.8000000000000007, 0.6000000000000001] = 
    {{0.9992587874806885 - 3.9831519397855946*^-19*I, 
      0.03849513790885602 + 4.8059557865083334*^-17*I}, 
     {-0.03849513790889478 + 4.82297289105973*^-17*I, 
      0.9992587874806892 + 3.834683503255241*^-19*I}}
 
qSG[2.8000000000000007, 0.8] = 
    {{0.9994508435218269 - 3.112483059881871*^-19*I, 
      0.03313625482016589 + 4.5885203352530084*^-17*I}, 
     {-0.03313625482019925 + 4.591682947205041*^-17*I, 
      0.9994508435218274 + 2.9474965396752586*^-19*I}}
 
qSG[2.8000000000000007, 1.] = 
    {{0.9995931459286398 - 1.998952055931319*^-19*I, 
      0.02852266839697369 + 4.024139166440044*^-17*I}, 
     {-0.02852266839700241 + 4.1158449762077747*^-17*I, 
      0.9995931459286402 + 2.203415982553685*^-19*I}}
 
qSG[2.8000000000000007, 1.2000000000000002] = 
    {{0.9996985792042132 - 1.5317298223893406*^-19*I, 
      0.0245509824055239 + 3.6897094497994556*^-17*I}, 
     {-0.02455098240554863 + 3.794387921759908*^-17*I, 
      0.9996985792042136 + 1.3776575692436894*^-19*I}}
 
qSG[2.8000000000000007, 1.4000000000000001] = 
    {{0.9997766932639558 - 1.168076795114022*^-19*I, 
      0.02113205163227678 + 3.3113788733162435*^-17*I}, 
     {-0.02113205163229806 + 3.391189697606089*^-17*I, 
      0.9997766932639561 + 1.109971180563584*^-19*I}}
 
qSG[2.8000000000000007, 1.6] = 
    {{0.9998345655168487 - 8.77939334877885*^-20*I, 0.01818905158972854 + 
       3.138011159112266*^-17*I}, {-0.018189051589746853 + 
       3.128665294540197*^-17*I, 0.9998345655168489 + 9.037915464073713*^-20*
        I}}
 
qSG[2.8000000000000007, 1.8] = 
    {{0.9998774404953499 - 6.618651939850364*^-20*I, 
      0.01565579727984806 + 2.824409809770417*^-17*I}, 
     {-0.015655797279863822 + 2.8401696881945186*^-17*I, 
      0.99987744049535 + 6.660248788213652*^-20*I}}
 
qSG[2.8000000000000007, 2.] = 
    {{0.9999092042454887 - 4.788096719385669*^-20*I, 
      0.013475283490646894 + 2.5720441466547726*^-17*I}, 
     {-0.013475283490660461 + 2.58167976661087*^-17*I, 
      0.9999092042454888 + 4.075438289963351*^-20*I}}
 
qSG[3., 0.] = {{0.9988944423208005 - 6.016223364825356*^-19*I, 
      0.047009500110227476 + 5.121363322419969*^-17*I}, 
     {-0.047009500110274806 + 4.921933653004688*^-17*I, 
      0.9988944423208016 + 5.710545720906612*^-19*I}}
 
qSG[3., 0.2] = {{0.9991808653851925 - 4.474982131344862*^-19*I, 
      0.040467249079905884 + 4.65021110873261*^-17*I}, 
     {-0.04046724907994663 + 4.701574913016999*^-17*I, 
      0.9991808653851934 + 3.8402610992839832*^-19*I}}
 
qSG[3., 0.4] = {{0.9993931057404032 - 3.1763769037452237*^-19*I, 
      0.03483418146805502 + 4.257477401556101*^-17*I}, 
     {-0.03483418146809009 + 4.2265247888591156*^-17*I, 
      0.9993931057404037 + 3.3962120760295495*^-19*I}}
 
qSG[3., 0.6000000000000001] = {{0.9995503663202214 - 2.31031776097026*^-19*I, 
      0.02998441577069238 + 3.969566970781956*^-17*I}, 
     {-0.029984415770722576 + 3.863930691483808*^-17*I, 
      0.9995503663202219 + 2.290900178655658*^-19*I}}
 
qSG[3., 0.8] = {{0.9996668837735508 - 1.7090520295083135*^-19*I, 
      0.025809329446479304 + 3.530242101906777*^-17*I}, 
     {-0.025809329446505304 + 3.5465368561087604*^-17*I, 
      0.9996668837735512 + 1.580362029109187*^-19*I}}
 
qSG[3., 1.] = {{0.9997532107809243 - 1.3062534875265585*^-19*I, 
      0.02221525451647878 + 3.4149417450820794*^-17*I}, 
     {-0.022215254516501155 + 3.2315835153506266*^-17*I, 
      0.9997532107809246 + 1.2369447898417895*^-19*I}}
 
qSG[3., 1.2000000000000002] = 
    {{0.9998171682060515 - 9.960926207579706*^-20*I, 
      0.019121458114679572 + 3.1311959389056074*^-17*I}, 
     {-0.019121458114698835 + 3.100301156272593*^-17*I, 
      0.9998171682060517 + 8.769750655272857*^-20*I}}
 
qSG[3., 1.4000000000000001] = 
    {{0.9998645516690714 - 7.315871744975489*^-20*I, 
      0.01645838131793371 + 2.8369851022778854*^-17*I}, 
     {-0.01645838131795029 + 2.82573453245057*^-17*I, 
      0.9998645516690715 + 6.79948421409517*^-20*I}}
 
qSG[3., 1.6] = {{0.9998996556490605 - 4.944086903505255*^-20*I, 
      0.014166108600809028 + 2.559147913833976*^-17*I}, 
     {-0.014166108600823294 + 2.4742677870778555*^-17*I, 
      0.9998996556490606 + 5.430220938972568*^-20*I}}
 
qSG[3., 1.8] = {{0.999925662111224 - 3.9312676904888667*^-20*I, 
      0.012193041106716953 + 2.291694979277117*^-17*I}, 
     {-0.012193041106729231 + 2.280621861116486*^-17*I, 
      0.999925662111224 + 3.976516409259142*^-20*I}}
 
qSG[3., 2.] = {{0.9999449286080221 - 3.025594604659431*^-20*I, 
      0.010494748739126484 + 2.0214210815725446*^-17*I}, 
     {-0.010494748739137054 + 2.0561051684400645*^-17*I, 
      0.9999449286080222 + 2.724831835920606*^-20*I}}
 
qSG[x_, t_] := qSG[x, t] = SGAuto[x, t]
 
SGAuto[Private`x_, Private`t_] := Piecewise[
     {{SG[0][Private`x, Private`t][[1]], Abs[Private`x] <= 5 && 
        Private`t < 0.1}, {SG[0][Private`x, Private`t][[1]], 
       Private`t > Private`tcrit}, {SG[0][Private`x, Private`t][[1]], True}}]
 
SGAuto /: SGAuto::usage = "NLSAuto[x,t] returns the solution of the mKdV \
equation with deformation selected automagically.  Many things must be \
initialized.  Sample code:\n\n\tq[x_]:=.1 Exp[-x^2+I \
x];\[IndentingNewLine]Defocusing[];\n\tH=ScatteringMatrixFinitemKdV[q,50,6];\
\[IndentingNewLine]aa//Clear;bb//Clear;\[IndentingNewLine]aa[k_]:=aa[k]=H[k][\
[1,1]];\[IndentingNewLine]bb[k_]:=bb[k]=H[k][[2,1]];\n\tSetParams[.6,.1,10.^(\
-9),15,30];\[IndentingNewLine]h[k_]:=3/(1+Abs[k/2+1/3.2]^8);\
\[IndentingNewLine]Setrsamp[h];\[IndentingNewLine]Settimeflag[False];\
\[IndentingNewLine]\[Nu]=Getnu[];\[IndentingNewLine]\[Rho][k_]:=bb[k]/aa[k];\
\n\tup=I(\[Nu]+.0001);m=40;el=8;\[IndentingNewLine]f={Fun[\[Rho],Line[{-el,0}\
-up],m],Fun[\[Rho],Line[{0,el}-up],m],Fun[\[Rho],Line[{el,0}+up],m],Fun[\
\[Rho],Line[{0,-el}+up],m]};\n\n\tup=I(\[Nu]+.0001);m=40;el=8;\
\[IndentingNewLine]f={Fun[\[Rho],Line[{-el,0}-up],m],Fun[\[Rho],Line[{0,el}-u\
p],m],Fun[\[Rho],Line[{el,0}+up],m],Fun[\[Rho],Line[{0,-el}+up],m]};\nSetScat\
teringData[aa,bb,m\[Rho],LocatePoles[q,40]]"
 
SG[Private`i_][Private`x_, Private`t_] := 
    Module[{Private`rhp1, Private`rhp2, Private`scale, 
      Private`\[CapitalPhi]1, Private`\[CapitalPhi]2, Private`\[CapitalPhi], 
      Private`out, Private`t1, Private`t2, Private`t3, Private`t4, 
      Private`poles, Private`pl}, If[Private`i == 2, Private`scale = True, 
       Private`scale = False]; Clear[Private`RHSolved]; 
      Private`RHSolved[Private`X_] := Private`RHSolved[Private`X] = 
        RHSolve[Private`X]; Private`RHSolution[Private`X_][Private`z_] := 
       Cauchy[Private`RHSolved[Private`X], Private`z] + IdentityMatrix[2]; 
      If[Private`scale, Private`t1 = AbsoluteTiming[
          Private`rhp1 = MakeListFun[ConjugateList[Jadapt[Private`i][
               Private`x, Private`t], Q[Private`x, Private`t]]]; ]; 
        Private`t2 = AbsoluteTiming[Private`RHSolved[Private`rhp1]; ]; 
        Private`\[CapitalPhi]1[Private`k_] := 
         Inverse[Private`RHSolution[Private`rhp1][Private`InvScale[Private`x, 
             Private`t][Private`k]]]; , 
       Private`t1 = Timing[Private`rhp1 = MakeListFun[ConjugateList[
              Jadapt[Private`i][Private`x, Private`t], Q[Private`x, 
               Private`t]]]; ]; domainOutput = DomainPlot[Private`rhp1]; 
        Grhp1 = Private`rhp1; Private`t2 = 
         Timing[Private`RHSolved[Private`rhp1]; ]; 
        Private`\[CapitalPhi]1[Private`k_] := 
         Inverse[Private`RHSolution[Private`rhp1][Private`k]]; ]; 
      Private`\[CapitalPhi][Private`k_] := Private`RHSolution[Private`rhp1][
        Private`k]; Private`pl = Private`PoleListn[Private`x, Private`t]; 
      Private`t3 = {0}; Private`t4 = {0}; If[Length[Private`pl[[1]]] > 0, 
       Private`rhp2 = ConjugateList[Private`pl, Q[Private`x, Private`t]]; 
        If[Private`i == 2, Private`rhp2 = ConjugateList[Private`rhp2, 
            \[CapitalPhi]tin[Private`x, Private`t]]; ]; 
        Private`t3 = Timing[Private`rhp2 = MakeListFun[ConjugateList[
              Private`rhp2, Private`\[CapitalPhi]1]]; ]; 
        Grhp2 = Private`rhp2; Private`t4 = 
         Timing[Private`RHSolved[Private`rhp2]; ]; Private`\[CapitalPhi]2 = 
         Private`RHSolution[Private`rhp2]; Private`\[CapitalPhi][
          Private`k_] := Private`RHSolution[Private`rhp2][Private`k] . 
          Private`RHSolution[Private`rhp1][Private`k]; ]; 
      Private`out = Private`\[CapitalPhi][1.*^-12*I]; 
      domainOutput2 = Quiet[DomainPlot[Private`rhp2]]; 
      timestring = StringJoin["Region: ", ToString[Private`i], " (", 
        ToString[Private`x], ",", ToString[Private`t], ") ", 
        "1) Construct: ", ToString[First[Private`t1]], "  ", "1) Solve: ", 
        ToString[First[Private`t2]], "  ", "2) Construct: ", 
        ToString[First[Private`t3]], "  ", "2) Solve: ", 
        ToString[First[Private`t4]]]; If[Private`timeflag, 
       Print[timestring]; ]; {Private`out, Private`\[CapitalPhi], 
       Private`rhp1, Private`rhp2, timestring}]
 
SG /: SG::usage = "mKdV[i][x,t] = {out,\[CapitalPhi],rhp1,rhp2,timestring} \
where out is the solution of mKdV, \[CapitalPhi] is the solution of the \
Riemann-Hilbert problem, rhp1 and rhp2 are the Riemann-Hilbert problems and \
timestring is the string of computation times.  This is done using the \
deformation in Region i."
 
Private`i = 2
 
Private`RHSolved[{IFun[{{{1. + 0.*I, 0. + 0.*I}, {-2.39752517300462*^-16 - 
         0.10495038125896403*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.0014411466099050838 - 0.10494048609974448*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.005840317580212093 - 
         0.10478775318215468*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.013405316744267674 - 0.10409072969956432*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.024398995498130134 - 
         0.10207483306419922*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.03894437193144388 - 0.09745726458949712*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.056617099712656736 - 
         0.08836903612990808*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.07578677564631289 - 0.07260128899363522*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.09302006370709359 - 
         0.048598871121973135*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.10352868986002692 - 0.017216065237685613*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.10352868986002678 + 
         0.017216065237686252*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.09302006370709341 + 0.048598871121973516*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.07578677564631256 + 
         0.07260128899363577*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.056617099712656334 + 0.08836903612990833*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.03894437193144325 + 
         0.09745726458949747*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.02439899549812967 + 0.10207483306419933*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.013405316744267199 + 
         0.1040907296995644*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {-0.005840317580211612 + 0.10478775318215466*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-0.001441146609904604 + 
         0.10494048609974446*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {2.39752517300462*^-16 + 0.10495038125896403*I, 1. + 0.*I}}}, 
       Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {0, Pi}]], 
      IFun[{{{1. + 0.*I, 0. + 0.*I}, {2.39752517300462*^-16 + 
         0.10495038125896403*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.0014411466099049676 + 0.1049404860997445*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.00584031758021163 + 0.10478775318215473*
          I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.01340531674426768 + 
         0.10409072969956432*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.024398995498130356 + 0.10207483306419914*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.038944371931443685 + 
         0.09745726458949742*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.05661709971265682 + 0.08836903612990799*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.07578677564631277 + 0.07260128899363533*
          I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.09302006370709354 + 
         0.04859887112197316*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.10352868986002693 + 0.01721606523768592*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.10352868986002696 - 0.017216065237686446*
          I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.09302006370709326 - 
         0.04859887112197361*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.0757867756463124 - 0.07260128899363567*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.056617099712656334 - 
         0.08836903612990833*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.038944371931443476 - 0.09745726458949737*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.024398995498129978 - 
         0.10207483306419915*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.013405316744267199 - 0.1040907296995644*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0.005840317580211151 - 
         0.10478775318215476*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0.001441146609904488 - 0.1049404860997445*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {-2.39752517300462*^-16 - 
         0.10495038125896403*I, 1. + 0.*I}}}, 
       Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {Pi, 2*Pi}]], 
      IFun[{{{1. + 0.*I, -2.39752517300462*^-16 + 0.10495038125896403*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, -0.0014411466099050838 + 
         0.10494048609974448*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.005840317580212093 + 0.10478775318215468*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.013405316744267674 + 
         0.10409072969956432*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.024398995498130134 + 0.10207483306419922*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.03894437193144388 + 
         0.09745726458949712*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.056617099712656736 + 0.08836903612990808*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.07578677564631289 + 
         0.07260128899363522*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.09302006370709359 + 0.048598871121973135*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.10352868986002692 + 
         0.017216065237685613*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.10352868986002678 - 0.017216065237686252*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.09302006370709341 - 
         0.048598871121973516*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.07578677564631256 - 0.07260128899363577*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.056617099712656334 - 
         0.08836903612990833*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.03894437193144325 - 0.09745726458949747*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.02439899549812967 - 
         0.10207483306419933*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.013405316744267199 - 0.1040907296995644*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -0.005840317580211612 - 
         0.10478775318215466*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        -0.001441146609904604 - 0.10494048609974446*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 2.39752517300462*^-16 - 
         0.10495038125896403*I}, {0. + 0.*I, 1. + 0.*I}}}, 
       Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, {0, -Pi}]], 
      IFun[{{{1. + 0.*I, 2.39752517300462*^-16 - 0.10495038125896403*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.0014411466099049676 - 
         0.1049404860997445*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.00584031758021163 - 0.10478775318215473*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.01340531674426768 - 0.10409072969956432*
          I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.024398995498130356 - 
         0.10207483306419914*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.038944371931443685 - 0.09745726458949742*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.05661709971265682 - 0.08836903612990799*
          I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.07578677564631277 - 
         0.07260128899363533*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.09302006370709354 - 0.04859887112197316*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.10352868986002693 - 0.01721606523768592*
          I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.10352868986002696 + 
         0.017216065237686446*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.09302006370709326 + 0.04859887112197361*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.0757867756463124 + 0.07260128899363567*
          I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.056617099712656334 + 
         0.08836903612990833*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.038944371931443476 + 0.09745726458949737*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.024398995498129978 + 
         0.10207483306419915*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.013405316744267199 + 0.1040907296995644*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0.005840317580211151 + 
         0.10478775318215476*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0.001441146609904488 + 0.1049404860997445*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, -2.39752517300462*^-16 + 
         0.10495038125896403*I}, {0. + 0.*I, 1. + 0.*I}}}, 
       Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, 
        {-Pi, -2*Pi}]]}] = 
    {IFun[{{{0.00002746702842347157 - 0.0005493405893254612*I, 0. + 0.*I}, 
        {-1.441337500203406*^-7 - 0.10494749858385898*I, 0. + 0.*I}}, 
       {{0.0000198860539222737 - 0.0005492906735968751*I, 0. + 0.*I}, 
        {-0.0014412509623481645 - 0.10493760368657315*I, 0. + 0.*I}}, 
       {{-3.2549281657480584*^-6 - 0.0005484969166151237*I, 0. + 0.*I}, 
        {-0.005840300499915144 - 0.10478487493423809*I, 0. + 0.*I}}, 
       {{-0.000043048034497829884 - 0.0005448580613383208*I, 0. + 0.*I}, 
        {-0.013405090848894604 - 0.10408787054660944*I, 0. + 0.*I}}, 
       {{-0.00010087412101209364 - 0.000534319413610591*I, 0. + 0.*I}, 
        {-0.02439846615927727 - 0.10207202921299709*I, 0. + 0.*I}}, 
       {{-0.00017737764482186107 - 0.0005101649738925123*I, 0. + 0.*I}, 
        {-0.03894344113890669 - 0.09745458748917304*I, 0. + 0.*I}}, 
       {{-0.0002703236264112517 - 0.00046260809190526485*I, 0. + 0.*I}, 
        {-0.05661568118432785 - 0.08836660858521933*I, 0. + 0.*I}}, 
       {{-0.00037113503040490904 - 0.0003800799379374064*I, 0. + 0.*I}, 
        {-0.07578482810823989 - 0.0725992945169912*I, 0. + 0.*I}}, 
       {{-0.000461756850781516 - 0.0002544321776283958*I, 0. + 0.*I}, 
        {-0.0930176406293087 - 0.04859753598432151*I, 0. + 0.*I}}, 
       {{-0.0005170139970962105 - 0.00009013403682363476*I, 0. + 0.*I}, 
        {-0.10352597681932438 - 0.017215592257627123*I, 0. + 0.*I}}, 
       {{-0.0005170139970962083 + 0.00009013403682363349*I, 0. + 0.*I}, 
        {-0.10352597681932424 + 0.01721559225762776*I, 0. + 0.*I}}, 
       {{-0.00046175685078152207 + 0.0002544321776283966*I, 0. + 0.*I}, 
        {-0.09301764062930852 + 0.04859753598432189*I, 0. + 0.*I}}, 
       {{-0.00037113503040491055 + 0.0003800799379374075*I, 0. + 0.*I}, 
        {-0.07578482810823955 + 0.07259929451699175*I, 0. + 0.*I}}, 
       {{-0.0002703236264112517 + 0.0004626080919052649*I, 0. + 0.*I}, 
        {-0.05661568118432745 + 0.08836660858521958*I, 0. + 0.*I}}, 
       {{-0.00017737764482186208 + 0.000510164973892512*I, 0. + 0.*I}, 
        {-0.038943441138906056 + 0.09745458748917339*I, 0. + 0.*I}}, 
       {{-0.00010087412101209402 + 0.0005343194136105922*I, 0. + 0.*I}, 
        {-0.024398466159276804 + 0.1020720292129972*I, 0. + 0.*I}}, 
       {{-0.000043048034497830237 + 0.0005448580613383214*I, 0. + 0.*I}, 
        {-0.013405090848894128 + 0.10408787054660952*I, 0. + 0.*I}}, 
       {{-3.2549281657468903*^-6 + 0.0005484969166151216*I, 0. + 0.*I}, 
        {-0.005840300499914662 + 0.10478487493423808*I, 0. + 0.*I}}, 
       {{0.00001988605392227377 + 0.0005492906735968736*I, 0. + 0.*I}, 
        {-0.0014412509623476847 + 0.10493760368657314*I, 0. + 0.*I}}, 
       {{0.000027467028423471506 + 0.0005493405893254627*I, 0. + 0.*I}, 
        {-1.4413374954084912*^-7 + 0.10494749858385898*I, 0. + 0.*I}}}, 
      Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {0, Pi}]], 
     IFun[{{{0.000027467028423471506 + 0.0005493405893254627*I, 0. + 0.*I}, 
        {-1.4413374954084912*^-7 + 0.10494749858385898*I, 0. + 0.*I}}, 
       {{0.000035048054329611116 + 0.0005492869116619987*I, 0. + 0.*I}, 
        {0.0014409626945787388 + 0.104937603706314*I, 0. + 0.*I}}, 
       {{0.00005818982926848801 + 0.0005484816929369014*I, 0. + 0.*I}, 
        {0.005840012227984871 + 0.10478487501412467*I, 0. + 0.*I}}, 
       {{0.00009798653983265896 + 0.0005448233462030114*I, 0. + 0.*I}, 
        {0.013404802558051524 + 0.10408787072877776*I, 0. + 0.*I}}, 
       {{0.0001558229201594693 + 0.0005342574290587178*I, 0. + 0.*I}, 
        {0.02439817781441743 + 0.10207202953826211*I, 0. + 0.*I}}, 
       {{0.000232349291691547 + 0.0005100704343321081*I, 0. + 0.*I}, 
        {0.038943152674152576 + 0.09745458798527147*I, 0. + 0.*I}}, 
       {{0.00032533725198450626 + 0.0004624832770197464*I, 0. + 0.*I}, 
        {0.056615392499289985 + 0.0883666092401877*I, 0. + 0.*I}}, 
       {{0.00042621198778569906 + 0.0003799423576447122*I, 0. + 0.*I}, 
        {0.07578453909086695 + 0.07259929523894648*I, 0. + 0.*I}}, 
       {{0.0005169067561318647 + 0.00025431884105780436*I, 0. + 0.*I}, 
        {0.09301735122913998 + 0.04859753657905733*I, 0. + 0.*I}}, 
       {{0.0005722159304943875 + 0.00009008926762121365*I, 0. + 0.*I}, 
        {0.10352568714613758 + 0.017215592492554666*I, 0. + 0.*I}}, 
       {{0.0005722159304943939 - 0.00009008926762121776*I, 0. + 0.*I}, 
        {0.10352568714613761 - 0.017215592492555193*I, 0. + 0.*I}}, 
       {{0.000516906756131864 - 0.00025431884105780577*I, 0. + 0.*I}, 
        {0.0930173512291397 - 0.04859753657905777*I, 0. + 0.*I}}, 
       {{0.00042621198778569896 - 0.0003799423576447122*I, 0. + 0.*I}, 
        {0.07578453909086658 - 0.07259929523894683*I, 0. + 0.*I}}, 
       {{0.0003253372519845079 - 0.0004624832770197477*I, 0. + 0.*I}, 
        {0.0566153924992895 - 0.08836660924018805*I, 0. + 0.*I}}, 
       {{0.0002323492916915487 - 0.0005100704343321094*I, 0. + 0.*I}, 
        {0.03894315267415237 - 0.09745458798527142*I, 0. + 0.*I}}, 
       {{0.00015582292015947117 - 0.0005342574290587152*I, 0. + 0.*I}, 
        {0.02439817781441705 - 0.10207202953826212*I, 0. + 0.*I}}, 
       {{0.00009798653983265909 - 0.000544823346203011*I, 0. + 0.*I}, 
        {0.013404802558051043 - 0.10408787072877784*I, 0. + 0.*I}}, 
       {{0.00005818982926848813 - 0.0005484816929369016*I, 0. + 0.*I}, 
        {0.005840012227984392 - 0.1047848750141247*I, 0. + 0.*I}}, 
       {{0.000035048054329610886 - 0.0005492869116619972*I, 0. + 0.*I}, 
        {0.0014409626945782591 - 0.104937603706314*I, 0. + 0.*I}}, 
       {{0.00002746702842347157 - 0.0005493405893254612*I, 0. + 0.*I}, 
        {-1.441337500203406*^-7 - 0.10494749858385898*I, 0. + 0.*I}}}, 
      Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {Pi, 2*Pi}]], 
     IFun[{{{0. + 0.*I, -1.4413375002034044*^-7 + 0.10494749858385898*I}, 
        {0. + 0.*I, -0.00002746702842347158 - 0.0005493405893254612*I}}, 
       {{0. + 0.*I, -0.001441250962348164 + 0.10493760368657312*I}, 
        {0. + 0.*I, -0.00001988605392227367 - 0.000549290673596875*I}}, 
       {{0. + 0.*I, -0.005840300499915146 + 0.10478487493423812*I}, 
        {0. + 0.*I, 3.254928165748051*^-6 - 0.0005484969166151241*I}}, 
       {{0. + 0.*I, -0.0134050908488946 + 0.10408787054660944*I}, 
        {0. + 0.*I, 0.0000430480344978299 - 0.0005448580613383209*I}}, 
       {{0. + 0.*I, -0.024398466159277262 + 0.10207202921299709*I}, 
        {0. + 0.*I, 0.00010087412101209356 - 0.0005343194136105907*I}}, 
       {{0. + 0.*I, -0.03894344113890668 + 0.09745458748917303*I}, 
        {0. + 0.*I, 0.00017737764482186107 - 0.0005101649738925121*I}}, 
       {{0. + 0.*I, -0.05661568118432784 + 0.0883666085852193*I}, 
        {0. + 0.*I, 0.0002703236264112516 - 0.00046260809190526463*I}}, 
       {{0. + 0.*I, -0.07578482810823989 + 0.0725992945169912*I}, 
        {0. + 0.*I, 0.00037113503040490887 - 0.00038007993793740625*I}}, 
       {{0. + 0.*I, -0.09301764062930867 + 0.048597535984321504*I}, 
        {0. + 0.*I, 0.00046175685078151616 - 0.00025443217762839584*I}}, 
       {{0. + 0.*I, -0.10352597681932438 + 0.017215592257627133*I}, 
        {0. + 0.*I, 0.0005170139970962105 - 0.00009013403682363475*I}}, 
       {{0. + 0.*I, -0.10352597681932427 - 0.017215592257627758*I}, 
        {0. + 0.*I, 0.0005170139970962084 + 0.00009013403682363349*I}}, 
       {{0. + 0.*I, -0.09301764062930853 - 0.0485975359843219*I}, 
        {0. + 0.*I, 0.000461756850781522 + 0.0002544321776283967*I}}, 
       {{0. + 0.*I, -0.07578482810823954 - 0.07259929451699175*I}, 
        {0. + 0.*I, 0.00037113503040491055 + 0.00038007993793740745*I}}, 
       {{0. + 0.*I, -0.05661568118432747 - 0.08836660858521961*I}, 
        {0. + 0.*I, 0.00027032362641125164 + 0.00046260809190526507*I}}, 
       {{0. + 0.*I, -0.03894344113890607 - 0.09745458748917342*I}, 
        {0. + 0.*I, 0.00017737764482186205 + 0.0005101649738925122*I}}, 
       {{0. + 0.*I, -0.024398466159276808 - 0.1020720292129972*I}, 
        {0. + 0.*I, 0.00010087412101209409 + 0.0005343194136105923*I}}, 
       {{0. + 0.*I, -0.013405090848894128 - 0.10408787054660952*I}, 
        {0. + 0.*I, 0.00004304803449783021 + 0.0005448580613383214*I}}, 
       {{0. + 0.*I, -0.0058403004999146605 - 0.10478487493423805*I}, 
        {0. + 0.*I, 3.254928165746919*^-6 + 0.0005484969166151215*I}}, 
       {{0. + 0.*I, -0.0014412509623476847 - 0.10493760368657312*I}, 
        {0. + 0.*I, -0.000019886053922273763 + 0.0005492906735968737*I}}, 
       {{0. + 0.*I, -1.4413374954084923*^-7 - 0.10494749858385896*I}, 
        {0. + 0.*I, -0.00002746702842347151 + 0.0005493405893254626*I}}}, 
      Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, {0, -Pi}]], 
     IFun[{{{0. + 0.*I, -1.4413374954084928*^-7 - 0.10494749858385898*I}, 
        {0. + 0.*I, -0.00002746702842347152 + 0.0005493405893254628*I}}, 
       {{0. + 0.*I, 0.0014409626945787394 - 0.10493760370631401*I}, 
        {0. + 0.*I, -0.000035048054329611076 + 0.0005492869116619988*I}}, 
       {{0. + 0.*I, 0.005840012227984872 - 0.10478487501412467*I}, 
        {0. + 0.*I, -0.00005818982926848801 + 0.0005484816929369018*I}}, 
       {{0. + 0.*I, 0.013404802558051522 - 0.10408787072877772*I}, 
        {0. + 0.*I, -0.00009798653983265894 + 0.0005448233462030113*I}}, 
       {{0. + 0.*I, 0.02439817781441743 - 0.10207202953826208*I}, 
        {0. + 0.*I, -0.00015582292015946936 + 0.0005342574290587174*I}}, 
       {{0. + 0.*I, 0.03894315267415258 - 0.0974545879852715*I}, 
        {0. + 0.*I, -0.00023234929169154694 + 0.000510070434332108*I}}, 
       {{0. + 0.*I, 0.05661539249928998 - 0.08836660924018769*I}, 
        {0. + 0.*I, -0.0003253372519845063 + 0.0004624832770197465*I}}, 
       {{0. + 0.*I, 0.07578453909086696 - 0.07259929523894651*I}, 
        {0. + 0.*I, -0.0004262119877856991 + 0.0003799423576447123*I}}, 
       {{0. + 0.*I, 0.09301735122914004 - 0.04859753657905734*I}, 
        {0. + 0.*I, -0.0005169067561318647 + 0.0002543188410578044*I}}, 
       {{0. + 0.*I, 0.10352568714613757 - 0.017215592492554666*I}, 
        {0. + 0.*I, -0.0005722159304943873 + 0.00009008926762121368*I}}, 
       {{0. + 0.*I, 0.1035256871461376 + 0.017215592492555193*I}, 
        {0. + 0.*I, -0.0005722159304943935 - 0.00009008926762121775*I}}, 
       {{0. + 0.*I, 0.09301735122913969 + 0.04859753657905776*I}, 
        {0. + 0.*I, -0.000516906756131864 - 0.00025431884105780566*I}}, 
       {{0. + 0.*I, 0.07578453909086658 + 0.07259929523894681*I}, 
        {0. + 0.*I, -0.0004262119877856988 - 0.000379942357644712*I}}, 
       {{0. + 0.*I, 0.056615392499289485 + 0.088366609240188*I}, 
        {0. + 0.*I, -0.00032533725198450773 - 0.00046248327701974766*I}}, 
       {{0. + 0.*I, 0.038943152674152354 + 0.09745458798527139*I}, 
        {0. + 0.*I, -0.0002323492916915486 - 0.0005100704343321092*I}}, 
       {{0. + 0.*I, 0.02439817781441706 + 0.10207202953826217*I}, 
        {0. + 0.*I, -0.0001558229201594712 - 0.0005342574290587155*I}}, 
       {{0. + 0.*I, 0.013404802558051045 + 0.10408787072877786*I}, 
        {0. + 0.*I, -0.00009798653983265914 - 0.0005448233462030112*I}}, 
       {{0. + 0.*I, 0.00584001222798439 + 0.10478487501412467*I}, 
        {0. + 0.*I, -0.00005818982926848811 - 0.0005484816929369016*I}}, 
       {{0. + 0.*I, 0.0014409626945782593 + 0.104937603706314*I}, 
        {0. + 0.*I, -0.000035048054329610906 - 0.0005492869116619975*I}}, 
       {{0. + 0.*I, -1.4413375002034047*^-7 + 0.10494749858385898*I}, 
        {0. + 0.*I, -0.000027467028423471584 - 0.000549340589325461*I}}}, 
      Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, {-Pi, -2*Pi}]]}
 
Private`RHSolved[{IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}}, Line[{-37.58749999999999, -0.29999999999999716}]], 
      IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1, 0}, {0, 1}}}, Line[{-0.3, 0.}]], 
      IFun[{{{1, 0}, {0, 1}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}}, Line[{0., 0.3}]], 
      IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
        {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
        0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
        {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
        1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}}, 
       Line[{0.29999999999999716, 37.587500000000006}]]}] = 
    {IFun[{{{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}}, Line[{-37.58749999999999, 
        -0.29999999999999716}]], IFun[{{{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}}, 
      Line[{-0.3, 0.}]], IFun[{{{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}}, Line[{0., 0.3}]], 
     IFun[{{{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, {{0., 0.}, {0., 0.}}, 
       {{0., 0.}, {0., 0.}}}, Line[{0.29999999999999716, 
        37.587500000000006}]]}
 
Private`RHSolved[Private`X_] := Private`RHSolved[Private`X] = 
     RHSolve[Private`X]
 
IFun[Private`l_List, Private`d_][Private`z_] := 
    Private`ChebyshevLobattoBarycentricInterpolation[Private`l, 
     MapToInterval[Private`d, Private`z]]
 
Values[IFun[Private`l_List, _]] ^:= Private`l
 
(Private`f$_) /@ (Private`g$_IFun) ^:= IFun[Private`f$ /@ Values[Private`g$], 
     Domain[Private`g$]]
 
Length[Private`if_IFun] ^:= Length[Values[Private`if]]
 
(Private`f_IFun) + (Private`g_IFun) ^:= FastPlus[Private`f, Private`g]
 
(Private`f_IFun)*(Private`g_IFun) ^:= Private`FastTimes[Private`f, Private`g]
 
(Private`g$_IFun) + (Private`f$_)?ConstantQ ^:= 
    IFun[Values[Private`g$] + Private`f$, Domain[Private`g$]]
 
(Private`g$_IFun)*(Private`f$_)?ConstantQ ^:= 
    IFun[Values[Private`g$]*Private`f$, Domain[Private`g$]]
 
(Private`f$_IFun)^(Private`c$_)?ConstantQ ^:= 
    IFun[Values[Private`f$]^Private`c$, Domain[Private`f$]]
 
(Private`c$_)?ConstantQ^(Private`f$_IFun) ^:= 
    IFun[Private`c$^Values[Private`f$], Domain[Private`f$]]
 
(Private`f_IFun)?ArrayFunQ . (Private`g_IFun)?ArrayFunQ ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f] . ToArrayOfFuns[Private`g]]
 
IFun /: (Private`f_List)?( !ArrayFunQ[#1] & ) . (Private`g_IFun)?ArrayFunQ := 
     ToArrayFun[Private`f . ToArrayOfFuns[Private`g]]
 
Abs[Private`if$_IFun] ^:= IFun[Abs[Values[Private`if$]], Domain[Private`if$]]
 
Arg[Private`if$_IFun] ^:= IFun[Arg[Values[Private`if$]], Domain[Private`if$]]
 
Re[Private`if$_IFun] ^:= IFun[Re[Values[Private`if$]], Domain[Private`if$]]
 
Im[Private`if$_IFun] ^:= IFun[Im[Values[Private`if$]], Domain[Private`if$]]
 
Conjugate[Private`if$_IFun] ^:= IFun[Conjugate[Values[Private`if$]], 
     Domain[Private`if$]]
 
Exp[Private`if$_IFun] ^:= IFun[Exp[Values[Private`if$]], Domain[Private`if$]]
 
Tan[Private`if$_IFun] ^:= IFun[Tan[Values[Private`if$]], Domain[Private`if$]]
 
ArcSin[Private`if$_IFun] ^:= IFun[ArcSin[Values[Private`if$]], 
     Domain[Private`if$]]
 
Sec[Private`if$_IFun] ^:= IFun[Sec[Values[Private`if$]], Domain[Private`if$]]
 
Sin[Private`if$_IFun] ^:= IFun[Sin[Values[Private`if$]], Domain[Private`if$]]
 
Cos[Private`if$_IFun] ^:= IFun[Cos[Values[Private`if$]], Domain[Private`if$]]
 
Log[Private`if$_IFun] ^:= IFun[Log[Values[Private`if$]], Domain[Private`if$]]
 
ArcTanh[Private`if$_IFun] ^:= IFun[ArcTanh[Values[Private`if$]], 
     Domain[Private`if$]]
 
NIntegrate[Private`f_IFun] ^:= DomainIntegrate[Private`f]
 
Inverse[Private`if_IFun] ^:= Inverse /@ Private`if
 
Transpose[Private`f_IFun] ^:= Transpose /@ Private`f
 
Max[Private`f_IFun] ^:= Max[Values[Private`f]]
 
Min[Private`f_IFun] ^:= Min[Values[Private`f]]
 
Norm[Private`f_IFun] ^:= Norm[Flatten[Values[Private`f]]]
 
First[Private`f_IFun] ^:= First[Values[Private`f]]
 
Last[Private`f_IFun] ^:= Last[Values[Private`f]]
 
Dimensions[Private`f_IFun] ^:= Dimensions[First[Private`f]]
 
(Private`f_IFun)?MatrixFunQ[[Private`i_,Private`j_]] ^:= 
    ToArrayFun[ToMatrixOfFuns[Private`f][[Private`i,Private`j]]]
 
(Private`f_IFun)?ListFunQ[[Private`i_]] ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f][[Private`i]]]
 
Mean[Private`f_IFun] ^:= DCT[Private`f][[1]]
 
Derivative[(Private`k_)?Positive][(Private`f_IFun)?ArrayFunQ] ^:= 
    ToArrayFun[ArrayMap[Derivative[Private`k], ToArrayOfFuns[Private`f]]]
 
Derivative[0][Private`if_IFun] ^:= Private`if
 
Derivative[1][Private`if_IFun] ^:= 
    IFun[ChebyshevLobattoDerivative[Values[Private`if]], Domain[Private`if]]*
     IFun[MapToIntervalD[Private`if, #1] & , Domain[Private`if], 
      Length[Private`if]]
 
Derivative[(Private`k_)?Positive][Private`if_IFun] ^:= 
    Derivative[1][Derivative[Private`k - 1][Private`if]]
 
Derivative[Private`if_IFun] ^:= Derivative[1][Private`if]
 
Integrate[Private`if_IFun] ^:= IFun[ChebyshevLobattoIntegrate[
      Values[Private`if]*Values[IFun[MapFromIntervalD[Private`if, #1] & , 
         UnitInterval, Length[Private`if]]]], Domain[Private`if]]
 
DiagonalMatrix[Private`f_IFun] ^:= DiagonalMatrix[Values[Private`f]]
 
IdentityMatrix[Private`f_IFun] ^:= IdentityMatrix[Length[Private`f]]
 
Roots[Private`cf_IFun] ^:= MapFromInterval[Private`cf, 
     Sort[Re[Select[ComplexRoots[ToUnitInterval[Private`cf]], 
        Abs[Im[#1]] < 100*$MachineTolerance && -1. <= Re[#1] <= 1. & ]]]]
 
Minimize[Private`cf_IFun] ^:= 
    Second[First[Sort[(Thread[{Abs[Private`cf /@ #1], #1}] & )[
        Join[Roots[Derivative[1][Private`cf]], Endpoints[Private`cf]]]]]]
 
IFun[(Private`f_)?NotListOrPatternQ, Private`d_, Private`n_Integer] := 
    IFun[Private`f /@ IntervalPoints[Private`d, Private`n], Private`d]
 
IFun[Private`a_] := IFun[Private`a, UnitInterval]
 
IFun[(Private`f_)?NotListOrPatternQ, Private`d_, 
     Private`opts:OptionsPattern[]] := Private`AdaptiveIFun[4, Private`f, 
     Private`d, Private`opts]
 
MakeBoxes[Private`f:IFun[Private`l_List, _], FormatType_] ^:= 
    Format[ReImLinePlot[Private`f, Sequence @@ $FunFormat], FormatType]
 
Format[Private`f:IFun[Private`l_List, _]] := ReImLinePlot[Private`f, 
     Sequence @@ $FunFormat]
 
Options[IFun] := {InterpolationPrecision -> $MachineTolerance}
 
IFun /: IFun::usage = "IFun[\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\)\
,d,n] constructs an \!\(\*\nStyleBox[\"n\",\nFontSlant->\"Italic\"]\)-th \
order Chebyshev approximation of \
\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\) over the domain d, which is \
either a Line or \
Arc\!\(\*\nStyleBox[\".\",\nFontSlant->\"Italic\"]\)\!\(\*\nStyleBox[\" \
\",\nFontSlant->\"Italic\"]\)IFun\!\(\*\nStyleBox[\"[\",\nFontSlant->\"Italic\
\"]\)\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\)\!\(\*\nStyleBox[\",\",\
\nFontSlant->\"Italic\"]\)d\!\(\*\nStyleBox[\"]\",\nFontSlant->\"Italic\"]\)\
\!\(\*\nStyleBox[\" \",\nFontSlant->\"Italic\"]\)chooses n adaptively. \
\!\(\*\nStyleBox[\" \
\",\nFontSlant->\"Italic\"]\)IFun\!\(\*\nStyleBox[\"[\",\nFontSlant->\"Italic\
\"]\)\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\)\!\(\*\nStyleBox[\",\",\
\nFontSlant->\"Italic\"]\)d\!\(\*\nStyleBox[\",\",\nFontSlant->\"Italic\"]\)I\
nterpolationPrecision\[Rule]tol] chooses n adaptively, so that the last two \
Chebyshev coefficients are less than tol. If f is a constructed IFun, then \
f[x] evaluates the approximation at the point x. Operations that can be \
applied to an IFun include standard mathematical functions (Abs, Sin, Exp, \
etc.) and operators Integrate (returning the indefinite integral) and \
Derivative[k]."
 
Private`ChebyshevLobattoBarycentricInterpolation[Private`f_List, 
     Private`x_] := Module[{Private`w, Private`j, Private`p, Private`k, 
      Private`n}, Private`k = Length[Private`f]; 
      Private`n = NChebyshevLobattoPoints[Private`k]; Private`w[1] = 1/2; 
      Private`w[Private`j_] = (-1)^(Private`j + 1); Private`w[Private`k] = 
       ((-1)^(Private`k + 1)*1)/2; If[MemberQ[Private`n, 
        N[Chop[Private`x, $MachineEpsilon]]], Private`f[[
        Position[Private`n, N[Chop[Private`x, $MachineEpsilon]]][[1,1]]]], 
       Sum[(Private`w[Private`j]/(Private`x - Private`n[[Private`j]]))*
          Private`f[[Private`j]], {Private`j, 1, Private`k}]/
        Sum[Private`w[Private`j]/(Private`x - Private`n[[Private`j]]), 
         {Private`j, 1, Private`k}]]]
 
NChebyshevLobattoPoints[Private`n_, Private`a_:-1., Private`b_:1.] := 
    0.5*(Private`b + Private`a) + 0.5*(Private`b - Private`a)*
      Cos[(Pi*Range[Private`n - 1., 0., -1.])/(Private`n - 1)]
 
Private`a = {-7.281369675782328*^-16 + 2.0000000759311227*I}
 
Attributes[MapToInterval] = {Listable}
 
MapToInterval[Line[{_?InfinityQ, _?InfinityQ}], Private`y_] := 
    RealLineToInterval[Private`y]
 
MapToInterval[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}, 
      Stretch -> Private`L_], Private`z_] := HalfLineToInterval[
     (Exp[-(I*Arg[Private`b])]*(Private`z - Private`a))/Private`L]
 
MapToInterval[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}, 
      Stretch -> Private`L_], Private`z_] := 
    -MapToInterval[Line[{Private`b, Private`a}, Stretch -> Private`L], 
      Private`z]
 
MapToInterval[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}], 
     Private`z_] := MapToInterval[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`z]
 
MapToInterval[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}], 
     Private`z_] := MapToInterval[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`z]
 
MapToInterval[Line[{Private`a_, Private`b_}], Private`z_] := 
    (Private`a + Private`b - 2*Private`z)/(Private`a - Private`b)
 
MapToInterval[Private`z_] := Private`z
 
MapToInterval[Line[{Private`a_, Private`b_}, 
      Stretch -> _?(NEqual[1., #1] & )], _?InfinityQ] := Infinity
 
MapToInterval[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     _?InfinityQ] := (1 + Private`L)/(1 - Private`L)
 
MapToInterval[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     Private`z_] := (-Private`a - Private`b*Private`L + 
      (1 + Private`L)*Private`z)/(-Private`a + Private`b*Private`L + 
      Private`z - Private`L*Private`z)
 
MapToInterval[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
      Private`z_] /; NEqual[-(E^((1*I*(Private`t0 + Private`t1))/2)*
         Private`r) + Private`z0, Private`z] := Infinity
 
MapToInterval[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     _?InfinityQ] := -((E^((I*Private`t0)/2) + E^((I*Private`t1)/2))/
      (E^((I*Private`t0)/2) - E^((I*Private`t1)/2)))
 
MapToInterval[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     Private`z_] := -(((E^((I*Private`t0)/2) + E^((I*Private`t1)/2))*
       (E^((I*Private`t0)/2 + (I*Private`t1)/2)*Private`r - Private`z + 
        Private`z0))/((-E^((I*Private`t0)/2) + E^((I*Private`t1)/2))*
       (E^((I*Private`t0)/2 + (I*Private`t1)/2)*Private`r + Private`z - 
        Private`z0)))
 
MapToInterval[Private`f_IFun, Private`z_] := MapToInterval[Domain[Private`f], 
     Private`z]
 
MapToInterval[Curve[Private`cr_], (Private`z_)?InfinityQ] := Private`z
 
MapToInterval[Curve[Private`cr_], Private`z_] /; NEqual[Private`z, 
      First[Private`cr]] := -1.
 
MapToInterval[Curve[Private`cr_], Private`z_] /; NEqual[Private`z, 
      Last[Private`cr]] := 1.
 
MapToInterval[Curve[Private`cr_], Private`z_] := 
    (If[#1 == {}, {}, First[#1]] & )[Roots[Private`cr - Private`z]]
 
MapToInterval[Curve[Private`cr_IFun, Stretch -> Private`L_], Private`z_] := 
    MapToInterval[Line[{-1, 1}, Stretch -> Private`L], 
     MapToInterval[Curve[Private`cr], Private`z]]
 
MapToInterval /: MapToInterval::usage = "MapToInterval[d,x] maps the point x \
via the conformal map that maps the domain d to the unit interval. If d is an \
IFun, then it is equivalent to MapToInterval[Domain[d],x]."
 
InfinityQ[-Infinity] := True
 
InfinityQ[Infinity] := True
 
InfinityQ[_DirectedInfinity] := True
 
InfinityQ[_] := False
 
InfinityQ /: InfinityQ::usage = "Test for whether a value is infinite."
 
Attributes[RealLineToInterval] = {Listable}
 
RealLineToInterval[(Private`y_)?NumberQ] := Private`y/Sqrt[1 + Private`y^2]
 
Stretch /: Stretch::usage = "Stretch is a possible parameter for Line used in \
determining the conformal map."
 
Attributes[HalfLineToInterval] = {Listable}
 
HalfLineToInterval[(Private`y_)?InfinityQ] := 1.
 
HalfLineToInterval[Private`y_] /; Private`y == -1 := Infinity
 
HalfLineToInterval[Private`y_] := (-1 + Private`y)/(1 + Private`y)
 
NEqual[Private`f:{__?FunQ}, Private`g:{__?FunQ}] := 
    Norm[Norm /@ (Private`f - Private`g)] < $MachineTolerance
 
NEqual[Private`f_List, Private`g_List] := Norm[Private`f - Private`g] < 
     $MachineTolerance
 
NEqual[_?InfinityQ, _?InfinityQ] := True
 
NEqual[Private`f_IFun, Private`g_IFun] := Norm[Private`f - Private`g] < 
     $MachineTolerance
 
NEqual[Line[Private`ls_, ___], Line[Private`ls2_, ___]] := 
    NZeroQ[Max[Abs[Flatten[(If[#1[[1]] == #1[[2]], 0, 
           #1[[1]] - #1[[2]]] & ) /@ Thread[{Sort[Private`ls], 
           Sort[Private`ls2]}]]]]]
 
NEqual[Arc[Private`x0_, Private`r_, Private`t0_], 
     Arc[Private`x2_, Private`r2_, Private`t2_]] := 
    NZeroQ[Max[Abs[Flatten[{Private`x0 - Private`x2, Private`r - Private`r2, 
         Exp[I*Private`t0] - Exp[I*Private`t2]}]]]]
 
NEqual[Private`f_LFun, Private`g_LFun] := Norm[Private`f - Private`g] < 
     $MachineTolerance
 
NEqual[Private`f_PFun, Private`g_PFun] := Norm[Private`f - Private`g] < 
     $MachineTolerance
 
NEqual[Curve[Private`f_, Private`opts___], Curve[Private`g_, 
      Private`opts___]] := If[Length[Private`f] == Length[Private`g], 
     Norm[Values[Private`f - Private`g]] < $MachineTolerance, False]
 
NEqual[Private`f_SingFun, Private`g_SingFun] := 
    Norm[Values[Private`f - Private`g]] < $MachineTolerance
 
NEqual[Private`f_, Private`g_] := Abs[Private`f - Private`g] < 
     $MachineTolerance
 
NEqual /: NEqual::usage = "NEqual[i,j] determines whether two values are \
within $MachineTolerence of each other."
 
FunQ[_IFun] := True
 
FunQ[_LFun] := True
 
FunQ[_PFun] := True
 
FunQ[_] := False
 
FunQ /: FunQ::usage = "Tests if an object is in IFun or LFun."
 
LFun[Private`l_List, Private`d_][Private`z_] := 
    MapDot[MapToCircle[Private`d, Private`z]^#1 & , FFT[Private`l]]
 
Values[LFun[Private`l_List, _]] ^:= Private`l
 
(Private`f$_) /@ (Private`g$_LFun) ^:= LFun[Private`f$ /@ Values[Private`g$], 
     Domain[Private`g$]]
 
Length[Private`if_LFun] ^:= Length[Values[Private`if]]
 
(Private`f_LFun) + (Private`g_LFun) ^:= FastPlus[Private`f, Private`g]
 
(Private`f_LFun)*(Private`g_LFun) ^:= Private`FastTimes[Private`f, Private`g]
 
(Private`g$_LFun) + (Private`f$_)?ConstantQ ^:= 
    LFun[Values[Private`g$] + Private`f$, Domain[Private`g$]]
 
(Private`g$_LFun)*(Private`f$_)?ConstantQ ^:= 
    LFun[Values[Private`g$]*Private`f$, Domain[Private`g$]]
 
(Private`f$_LFun)^(Private`c$_)?ConstantQ ^:= 
    LFun[Values[Private`f$]^Private`c$, Domain[Private`f$]]
 
(Private`c$_)?ConstantQ^(Private`f$_LFun) ^:= 
    LFun[Private`c$^Values[Private`f$], Domain[Private`f$]]
 
(Private`f_LFun)?ArrayFunQ . (Private`g_LFun)?ArrayFunQ ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f] . ToArrayOfFuns[Private`g]]
 
LFun /: (Private`f_List)?( !ArrayFunQ[#1] & ) . (Private`g_LFun)?ArrayFunQ := 
     ToArrayFun[Private`f . ToArrayOfFuns[Private`g]]
 
Abs[Private`if$_LFun] ^:= LFun[Abs[Values[Private`if$]], Domain[Private`if$]]
 
Arg[Private`if$_LFun] ^:= LFun[Arg[Values[Private`if$]], Domain[Private`if$]]
 
Re[Private`if$_LFun] ^:= LFun[Re[Values[Private`if$]], Domain[Private`if$]]
 
Im[Private`if$_LFun] ^:= LFun[Im[Values[Private`if$]], Domain[Private`if$]]
 
Conjugate[Private`if$_LFun] ^:= LFun[Conjugate[Values[Private`if$]], 
     Domain[Private`if$]]
 
Exp[Private`if$_LFun] ^:= LFun[Exp[Values[Private`if$]], Domain[Private`if$]]
 
Tan[Private`if$_LFun] ^:= LFun[Tan[Values[Private`if$]], Domain[Private`if$]]
 
ArcSin[Private`if$_LFun] ^:= LFun[ArcSin[Values[Private`if$]], 
     Domain[Private`if$]]
 
Sec[Private`if$_LFun] ^:= LFun[Sec[Values[Private`if$]], Domain[Private`if$]]
 
Sin[Private`if$_LFun] ^:= LFun[Sin[Values[Private`if$]], Domain[Private`if$]]
 
Cos[Private`if$_LFun] ^:= LFun[Cos[Values[Private`if$]], Domain[Private`if$]]
 
Log[Private`if$_LFun] ^:= LFun[Log[Values[Private`if$]], Domain[Private`if$]]
 
ArcTanh[Private`if$_LFun] ^:= LFun[ArcTanh[Values[Private`if$]], 
     Domain[Private`if$]]
 
NIntegrate[Private`f_LFun] ^:= DomainIntegrate[Private`f]
 
Inverse[Private`if_LFun] ^:= Inverse /@ Private`if
 
Transpose[Private`f_LFun] ^:= Transpose /@ Private`f
 
Max[Private`f_LFun] ^:= Max[Values[Private`f]]
 
Min[Private`f_LFun] ^:= Min[Values[Private`f]]
 
Norm[Private`f_LFun] ^:= Norm[Flatten[Values[Private`f]]]
 
First[Private`f_LFun] ^:= First[Values[Private`f]]
 
Last[Private`f_LFun] ^:= Last[Values[Private`f]]
 
Dimensions[Private`f_LFun] ^:= Dimensions[First[Private`f]]
 
(Private`f_LFun)?MatrixFunQ[[Private`i_,Private`j_]] ^:= 
    ToArrayFun[ToMatrixOfFuns[Private`f][[Private`i,Private`j]]]
 
(Private`f_LFun)?ListFunQ[[Private`i_]] ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f][[Private`i]]]
 
Mean[Private`f_LFun] ^:= FFT[Private`f][[0]]
 
Derivative[0][Private`if_LFun] ^:= Private`if
 
Derivative[1][Private`f_LFun] ^:= 
    (#1*LFun[MapToCircleD[Private`f, #1] & , Domain[Private`f], 
        Length[#1]] & )[LFun[InverseFFT[PadRight[
        ShiftLeft[MapOuter[#1 & , FFT[Private`f]]], Length[Private`f] + 2]], 
      Domain[Private`f]]]
 
Derivative[(Private`k_)?Positive][Private`if_LFun] ^:= 
    Derivative[1][Derivative[Private`k - 1][Private`if]]
 
Derivative[Private`if_LFun] ^:= Derivative[1][Private`if]
 
Integrate[Private`lf_LFun, Private`z_] ^:= 
    BoundedIntegrate[Private`lf][Private`z] + DomainIntegrate[Private`lf]*
      (Log[MapToCircle[Private`lf, Private`z]]/(2*Pi*I) - 
       Piecewise[{{-2^(-1), NEqual[MapToCircle[Private`lf, Infinity], -1]}, 
         {Log[MapToCircle[Private`lf, Infinity]]/(2*Pi*I), True}}])
 
Reverse[Private`lf:LFun[_, Line[{-Infinity, Infinity}, ___]]] ^:= 
    LFun[Join[{Values[Private`lf][[1]]}, Reverse[Rest[Values[Private`lf]]]], 
     Domain[Private`lf]]
 
DiagonalMatrix[Private`f_LFun] ^:= DiagonalMatrix[Values[Private`f]]
 
IdentityMatrix[Private`f_LFun] ^:= IdentityMatrix[Length[Private`f]]
 
Roots[Private`lf_LFun] ^:= Module[{Private`dct}, 
     Private`dct = ToList[RemoveZeros[Chop[FFT[Private`lf], 
          $MachineTolerance]]]; MapFromCircle[Private`lf, 
       Select[Eigenvalues[Transpose[Join[Transpose[SparseArray[
             {Private`i_, Private`j_} /; Private`j == Private`i - 1 -> 1, 
             {Length[Private`dct] - 1, Length[Private`dct] - 2}]], 
           -({Most[Private`dct]}/Last[Private`dct])]]], 
        Abs[Abs[#1] - 1] < 10.^(-6) & ]]]
 
LFun /: ToeplitzMatrix[Private`lf_LFun, Private`n_Integer] := 
     ToeplitzMatrix[FFT[Private`lf], Private`n]
 
LFun /: HankelMatrix[Private`lf_LFun, Private`n_Integer] := 
     HankelMatrix[FFT[Private`lf], Private`n]
 
LFun[Private`f_, Private`d_, Private`n_] := 
    LFun[Private`f /@ MapFromCircle[Private`d, Points[UnitCircle, 
        Private`n]], Private`d]
 
LFun[Private`l_ShiftList, Private`d_] := 
    LFun[InverseFFT[MakeFFTIndexRange[Private`l]], Private`d]
 
LFun[Private`f_IFun] := LFun[Join[Values[Private`f], 
      Reverse[Values[Private`f]][[2 ;; -2]]], UnitCircle]
 
LFun[Private`a_] := LFun[Private`a, UnitCircle]
 
LFun[(Private`f_)?NotListOrPatternQ, Private`d_, 
     Private`opts:OptionsPattern[]] := Private`AdaptiveLFun[8, Private`f, 
     Private`d, Private`opts]
 
MakeBoxes[Private`f:LFun[Private`l_List, _], FormatType_] ^:= 
    Format[ReImLinePlot[Private`f, Sequence @@ $FunFormat], FormatType]
 
Format[Private`f:LFun[Private`l_List, _]] := ReImLinePlot[Private`f, 
     Sequence @@ $FunFormat]
 
Options[LFun] := {InterpolationPrecision -> $MachineTolerance}
 
LFun /: LFun::usage = "LFun[\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\)\
,d,n] constructs an \!\(\*\nStyleBox[\"n\",\nFontSlant->\"Italic\"]\)-th \
order Laurent approximation of \
\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\) over the domain d, which is \
either a Circle or the real line \
Line[{-\[Infinity],\[Infinity]}]\!\(\*\nStyleBox[\".\",\nFontSlant->\"Italic\
\"]\)\!\(\*\nStyleBox[\"  \",\nFontSlant->\"Italic\"]\)If f is a constructed \
LFun, then\!\(\*\nStyleBox[\" \
\",\nFontSlant->\"Italic\"]\)\!\(\*\nStyleBox[\"f\",\nFontSlant->\"Italic\"]\
\)[x] evaluates the approximation at the point x. Operations that can be \
applied to an LFun include standard mathematical functions (Abs,Sin,Exp,etc.) \
and operators Integrate (returning the indefinite integral) and \
Derivative[k]."
 
MapDot[Private`f_, Private`ls_List] := Module[{Private`k}, 
     Sum[Private`ls[[Private`k]]*Private`f[Private`k], 
      {Private`k, 1, Length[Private`ls]}]]
 
MapDot[Private`m_, Private`lst_ShiftList] := Module[{Private`k}, 
     Sum[Private`lst[[Private`k]]*Private`m[Private`k], 
      {Private`k, FirstIndex[Private`lst], LastIndex[Private`lst]}]]
 
Attributes[ShiftList] = {NHoldRest}
 
ShiftList[Private`ln_List, Private`ind_Integer][[Private`j_]] ^:= 
    Private`ln[[Private`fixind[Private`j, Private`ind, Length[Private`ln]]]]
 
Length[Private`l_ShiftList] ^:= Length[ToList[Private`l]]
 
Drop[Private`l_ShiftList, Private`n_] ^:= 
    ShiftList[Drop[ToList[Private`l], Private`n], Index[Private`l] - 
      Private`n]
 
(Private`ln_ShiftList) + (Private`ln2_ShiftList) ^:= 
    Module[{Private`lnn, Private`lnn2}, 
     Private`lnn = IncreaseIndexRange[Private`ln, IndexRange[Private`ln2]]; 
      Private`lnn2 = IncreaseIndexRange[Private`ln2, IndexRange[Private`ln]]; 
      ShiftList[ToList[Private`lnn] + ToList[Private`lnn2], 
       Index[Private`lnn]]]
 
(Private`c_) + ShiftList[Private`ln_, Private`ind_] ^:= 
    ShiftList[Private`ln + Private`c, Private`ind]
 
(Private`sl1_ShiftList) . (Private`sl2_ShiftList) ^:= 
    Module[{Private`indm, Private`indM}, 
     Private`indm = Max[FirstIndex[Private`sl1], FirstIndex[Private`sl2]]; 
      Private`indM = Min[LastIndex[Private`sl1], LastIndex[Private`sl2]]; 
      If[Private`indM < Private`indm, 0, 
       Private`sl1[[Private`indm ;; Private`indM]] . 
        Private`sl2[[Private`indm ;; Private`indM]]]]
 
ShiftList[Private`ln_, Private`ind_]*ShiftList[Private`ln2_, 
      Private`ind_] ^:= ShiftList[Private`ln*Private`ln2, Private`ind]
 
(Private`c_)*ShiftList[Private`ln_, Private`ind_] ^:= 
    ShiftList[Private`c*Private`ln, Private`ind]
 
ListConvolve[Private`a_ShiftList, Private`b_ShiftList, Private`opts___] ^:= 
    ShiftList[ListConvolve[ToList[Private`a], ToList[Private`b], 
      Private`opts], Index[Private`a]]
 
RotateLeft[Private`a_ShiftList, Private`opts___] ^:= 
    ShiftList[RotateLeft[ToList[Private`a], Private`opts], Index[Private`a]]
 
PadRight[Private`f_ShiftList, Private`n_] ^:= 
    ShiftList[PadRight[ToList[Private`f], Private`n, 
      {If[Length[Private`f] == 0, 0, ToList[Private`f][[1]]*0]}], 
     Index[Private`f]]
 
PadLeft[Private`f_ShiftList, Private`n_] ^:= 
    ShiftList[PadLeft[ToList[Private`f], Private`n, 
      {If[Length[Private`f] == 0, 0, ToList[Private`f][[1]]*0]}], 
     Index[Private`f] + Private`n - Length[Private`f]]
 
Append[Private`f_ShiftList, Private`el_] ^:= 
    ShiftList[Append[ToList[Private`f], Private`el], Index[Private`f]]
 
Riffle[Private`sl_ShiftList, Private`x_] ^:= 
    ShiftList[Riffle[ToList[Private`sl], Private`x], Index[Private`sl]*2 - 1]
 
Reverse[Private`sl_ShiftList] ^:= ShiftList[Reverse[ToList[Private`sl]], 
     Length[Private`sl] - Index[Private`sl] + 1]
 
MatrixForm[ShiftList[Private`l_, Private`ind_Integer]] ^:= 
    MatrixForm[Join[Private`l[[1 ;; Private`ind - 1]], 
      {Style[Private`l[[Private`ind]], Bold]}, 
      Private`l[[Private`ind + 1 ;; -1]]]]
 
(Private`f_) @@ ShiftList[Private`l_, _] ^:= Private`f @@ Private`l
 
(Private`f_) /@ ShiftList[Private`l_, Private`ind_] ^:= 
    ShiftList[Private`f /@ Private`l, Private`ind]
 
MapIndexed[Private`f_, ShiftList[Private`ln_, Private`ind_]] ^:= 
    ShiftList[MapIndexed[Private`f[#1, #2 - Private`ind] & , Private`ln], 
     Private`ind]
 
ReplacePart[Private`sl_ShiftList, Private`pat_] ^:= 
    ShiftList[MapIndexed[
      If[Or @@ Function[Private`pm, MatchQ[First[#2] - Index[Private`sl], 
            Private`pm]] /@ First /@ Private`pat, 
        First[#2] - Index[Private`sl] /. Private`pat, #1] & , 
      ToList[Private`sl]], Index[Private`sl]]
 
Abs[Private`f_ShiftList] ^:= Abs /@ Private`f
 
Re[Private`f_ShiftList] ^:= Re /@ Private`f
 
Im[Private`f_ShiftList] ^:= Im /@ Private`f
 
Indices[Private`sl_ShiftList] ^:= Array[#1 - Index[Private`sl] & , 
     Length[Private`sl]]
 
Private`LinePlot[Private`sl_ShiftList, Private`opts___] ^:= 
    ListLinePlot[Thread[{Indices[Private`sl], ToList[Private`sl]}], 
     Private`opts]
 
ListLogPlot[Private`sl_ShiftList, Private`opts___] ^:= 
    ListLogPlot[Thread[{Indices[Private`sl], ToList[Private`sl]}], 
     Private`opts]
 
ShiftList /: ToeplitzMatrix[Private`sl_ShiftList, Private`n_Integer] := 
     Transpose[ToeplitzMatrix[PadRight[Reverse[NonPositiveList[Private`sl]], 
        Private`n], PadRight[NonNegativeList[Private`sl], Private`n]]]
 
ToeplitzMatrix[Private`sl_ShiftList] ^:= ToeplitzMatrix[Private`sl, 
     Length[Private`sl]]
 
ShiftList /: HankelMatrix[Private`sl_ShiftList, Private`n_Integer] := 
     Transpose[HankelMatrix[PadRight[PositiveList[Private`sl], Private`n]]]
 
ShiftList[Private`ln_List, Private`lp_List] := 
    ShiftList[Join[Private`ln, Private`lp], Length[Private`ln] + 1]
 
MakeBoxes[ShiftList[Private`l_, Private`ind_Integer], FormatType_] ^:= 
    Format[If[0 < Private`ind < Length[Private`l], 
      Join[Private`l[[1 ;; Private`ind - 1]], 
       {Style[Private`l[[Private`ind]], Bold]}, 
       Private`l[[Private`ind + 1 ;; -1]]], Private`l], FormatType]
 
Format[ShiftList[Private`l_, Private`ind_Integer]] := 
    If[0 < Private`ind < Length[Private`l], 
     Join[Private`l[[1 ;; Private`ind - 1]], 
      {Style[Private`l[[Private`ind]], Bold]}, 
      Private`l[[Private`ind + 1 ;; -1]]], Private`l]
 
Private`fixind[Private`a_Integer, Private`ind_] := Private`a + Private`ind
 
Private`fixind[All, Private`ind_] := All
 
Private`fixind[All ;; (Private`b_Integer), Private`ind_] := 
    1 ;; Private`b + Private`ind
 
Private`fixind[(Private`a_Integer) ;; (Private`b_Integer), Private`ind_] := 
    Private`a + Private`ind ;; Private`b + Private`ind
 
Private`fixind[(Private`a_Integer) ;; All, Private`ind_] := 
    Private`a + Private`ind ;; All
 
Private`fixind[All ;; All, Private`ind_] := 1 ;; All
 
Private`fixind[Private`a_Integer, Private`ind_, Private`n_] := 
    Mod[Private`a + Private`ind - 1, Private`n] + 1
 
Private`fixind[All, Private`ind_, Private`n_] := All
 
Private`fixind[All ;; (Private`b_Integer), Private`ind_, Private`n_] := 
    1 ;; Private`fixind[Private`b, Private`ind, Private`n]
 
Private`fixind[(Private`a_Integer) ;; (Private`b_Integer), Private`ind_, 
     Private`n_] := Private`fixind[Private`a, Private`ind, Private`n] ;; 
     Private`fixind[Private`b, Private`ind, Private`n]
 
Private`fixind[(Private`a_Integer) ;; All, Private`ind_, Private`n_] := 
    Private`fixind[Private`a, Private`ind, Private`n] ;; All
 
Private`fixind[All ;; All, Private`ind_, Private`n_] := 1 ;; All
 
ToList[ShiftList[Private`ln_, _]] := Private`ln
 
ToList[Private`ln_List] := Private`ln
 
Index[ShiftList[_, Private`ind_]] := Private`ind
 
IncreaseIndexRange[Private`sl_ShiftList, Private`ind_] := 
    Module[{Private`sl2}, Private`sl2 = PadLeft[Private`sl, 
        Length[Private`sl] + Max[0, FirstIndex[Private`sl] - 
           First[Private`ind]]]; PadRight[Private`sl2, 
       Length[Private`sl2] + Max[0, Last[Private`ind] - 
          LastIndex[Private`sl]]]]
 
FirstIndex[Private`l_ShiftList] := 1 - Index[Private`l]
 
LastIndex[Private`l_ShiftList] := Length[Private`l] - Index[Private`l]
 
IndexRange[Private`l_ShiftList] := {FirstIndex[Private`l], 
     LastIndex[Private`l]}
 
Private`c = {2.2204468209122236*^-15 + 4.000001227312086*I}
 
Private`el = 100
 
NonPositiveList[ShiftList[Private`ln_, Private`ind_]] := 
    Private`ln[[1 ;; Private`ind]]
 
NonNegativeList[ShiftList[Private`ln_, Private`ind_]] := 
    Private`ln[[Private`ind ;; -1]]
 
PositiveList[ShiftList[Private`ln_, Private`ind_]] := 
    Private`ln[[Private`ind + 1 ;; -1]]
 
Attributes[MakeBoxes] = {HoldAllComplete}
 
Attributes[MapToCircle] = {Listable}
 
MapToCircle[Circle[Private`a_, Private`r_], Private`z_] := 
    (Private`z - Private`a)/Private`r
 
MapToCircle[Circle[Private`a_, Private`r_, Orientation -> 1], Private`z_] := 
    (Private`z - Private`a)/Private`r
 
MapToCircle[Circle[Private`a_, Private`r_, Orientation -> -1], Private`z_] := 
    Private`r/(Private`z - Private`a)
 
MapToCircle[Line[{-Infinity, Infinity}], _?InfinityQ] := -1.
 
MapToCircle[Line[{-Infinity, Infinity}], _?(NEqual[#1, -I] & )] := Infinity
 
MapToCircle[Line[{-Infinity, Infinity}], Private`t_] := 
    (I - Private`t)/(I + Private`t)
 
MapToCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     _?InfinityQ] := -1.
 
MapToCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     Private`t_] := (I - Private`L*Private`t)/(I + Private`L*Private`t)
 
MapToCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_, 
      Centre -> Private`a_], _?InfinityQ] := -1.
 
MapToCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_, 
      Centre -> Private`a_], Private`t_] := 
    (I - Private`L*(Private`t - Private`a))/
     (I + Private`L*(Private`t - Private`a))
 
MapToCircle[Line[{DirectedInfinity[-I], DirectedInfinity[I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], _?InfinityQ] := -1.
 
MapToCircle[Line[{DirectedInfinity[-I], DirectedInfinity[I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], Private`t_] := 
    (I + I*Private`L*(Private`t - Private`a))/
     (I - I*Private`L*(Private`t - Private`a))
 
MapToCircle[Line[{DirectedInfinity[I], DirectedInfinity[-I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], _?InfinityQ] := -1.
 
MapToCircle[Line[{DirectedInfinity[I], DirectedInfinity[-I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], Private`t_] := 
    (I - I*Private`L*(Private`t - Private`a))/
     (I + I*Private`L*(Private`t - Private`a))
 
MapToCircle[Line[{-Pi, Pi}], Private`z_] := Exp[I*Private`z]
 
MapToCircle[Private`l_Line, Private`z_] := 
    MapToCircle[Private`PeriodicInterval, MapToInterval[Private`l, Private`z]*
      Pi]
 
MapToCircle[Ellipse[{Private`a_, Private`b_}, Private`r_], Private`z_] := 
    MapToCircle[Circle[0, Private`r], IntervalToInnerCircle[
      MapToInterval[Line[{Private`a, Private`b}], Private`z]]]
 
MapToCircle[Private`f_LFun, Private`z_] := MapToCircle[Domain[Private`f], 
     Private`z]
 
MapToCircle[Curve[Private`cr_], (Private`z_)?InfinityQ] := Private`z
 
MapToCircle[Curve[Private`cr_], Private`z_] := 
    First[Roots[Private`cr - Private`z]]
 
MapToCircle /: MapToCircle::usage = "MapToCircle[d,z] maps z via the \
conformal map from the domain d to the unit circle."
 
Private`r[Private`k$_] := \[Rho][Private`k$]
 
Attributes[Private`k$] = {Temporary}
 
\[Rho][k_] = 0
 
Centre /: Centre::usage = "Centre is a possible parameter for Line used in \
determining the conformal map."
 
Private`PeriodicInterval = Line[{-Pi, Pi}]
 
Ellipse[Private`r_] := Ellipse[{-1, 1}, Private`r]
 
Ellipse /: Ellipse::usage = "Ellipse[{a_,b_},r] represents the Bernstein \
ellipse arond the interval (a,b)."
 
Attributes[IntervalToInnerCircle] = {Listable}
 
IntervalToInnerCircle[(Private`t_)?InfinityQ] := 0
 
IntervalToInnerCircle[Private`t_] := Private`t - Sqrt[Private`t - 1]*
      Sqrt[Private`t + 1]
 
Domain[IFun[_List, Private`d_]] := Private`d
 
Domain[LFun[_, Private`d_]] := Private`d
 
Domain[PFun[_, Private`d_]] := Private`d
 
Domain[Private`if_SingFun] := Domain[First[Private`if]]
 
Domain /: Domain::usage = "Domain[ifun] returns the domain of an IFun."
 
PFun[Private`c0_, Private`d_][Private`z_] := Private`c0[[1]]
 
Values[PFun[Private`c0_, _]] ^:= Private`c0
 
(Private`f$_) /@ (Private`g$_PFun) ^:= PFun[Private`f$ /@ Values[Private`g$], 
     Domain[Private`g$]]
 
Length[Private`if_PFun] ^:= Length[Values[Private`if]]
 
(Private`f_PFun) + (Private`g_PFun) ^:= FastPlus[Private`f, Private`g]
 
(Private`f_PFun)*(Private`g_PFun) ^:= Private`FastTimes[Private`f, Private`g]
 
(Private`g$_PFun) + (Private`f$_)?ConstantQ ^:= 
    PFun[Values[Private`g$] + Private`f$, Domain[Private`g$]]
 
(Private`g$_PFun)*(Private`f$_)?ConstantQ ^:= 
    PFun[Values[Private`g$]*Private`f$, Domain[Private`g$]]
 
(Private`f$_PFun)^(Private`c$_)?ConstantQ ^:= 
    PFun[Values[Private`f$]^Private`c$, Domain[Private`f$]]
 
(Private`c$_)?ConstantQ^(Private`f$_PFun) ^:= 
    PFun[Private`c$^Values[Private`f$], Domain[Private`f$]]
 
(Private`f_PFun)?ArrayFunQ . (Private`g_PFun)?ArrayFunQ ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f] . ToArrayOfFuns[Private`g]]
 
PFun /: (Private`f_List)?( !ArrayFunQ[#1] & ) . (Private`g_PFun)?ArrayFunQ := 
     ToArrayFun[Private`f . ToArrayOfFuns[Private`g]]
 
Abs[Private`if$_PFun] ^:= PFun[Abs[Values[Private`if$]], Domain[Private`if$]]
 
Arg[Private`if$_PFun] ^:= PFun[Arg[Values[Private`if$]], Domain[Private`if$]]
 
Re[Private`if$_PFun] ^:= PFun[Re[Values[Private`if$]], Domain[Private`if$]]
 
Im[Private`if$_PFun] ^:= PFun[Im[Values[Private`if$]], Domain[Private`if$]]
 
Conjugate[Private`if$_PFun] ^:= PFun[Conjugate[Values[Private`if$]], 
     Domain[Private`if$]]
 
Exp[Private`if$_PFun] ^:= PFun[Exp[Values[Private`if$]], Domain[Private`if$]]
 
Tan[Private`if$_PFun] ^:= PFun[Tan[Values[Private`if$]], Domain[Private`if$]]
 
ArcSin[Private`if$_PFun] ^:= PFun[ArcSin[Values[Private`if$]], 
     Domain[Private`if$]]
 
Sec[Private`if$_PFun] ^:= PFun[Sec[Values[Private`if$]], Domain[Private`if$]]
 
Sin[Private`if$_PFun] ^:= PFun[Sin[Values[Private`if$]], Domain[Private`if$]]
 
Cos[Private`if$_PFun] ^:= PFun[Cos[Values[Private`if$]], Domain[Private`if$]]
 
Log[Private`if$_PFun] ^:= PFun[Log[Values[Private`if$]], Domain[Private`if$]]
 
ArcTanh[Private`if$_PFun] ^:= PFun[ArcTanh[Values[Private`if$]], 
     Domain[Private`if$]]
 
NIntegrate[Private`f_PFun] ^:= DomainIntegrate[Private`f]
 
Inverse[Private`if_PFun] ^:= Inverse /@ Private`if
 
Transpose[Private`f_PFun] ^:= Transpose /@ Private`f
 
Max[Private`f_PFun] ^:= Max[Values[Private`f]]
 
Min[Private`f_PFun] ^:= Min[Values[Private`f]]
 
Norm[Private`f_PFun] ^:= Norm[Flatten[Values[Private`f]]]
 
First[Private`f_PFun] ^:= First[Values[Private`f]]
 
Last[Private`f_PFun] ^:= Last[Values[Private`f]]
 
Dimensions[Private`f_PFun] ^:= Dimensions[First[Private`f]]
 
(Private`f_PFun)?MatrixFunQ[[Private`i_,Private`j_]] ^:= 
    ToArrayFun[ToMatrixOfFuns[Private`f][[Private`i,Private`j]]]
 
(Private`f_PFun)?ListFunQ[[Private`i_]] ^:= 
    ToArrayFun[ToArrayOfFuns[Private`f][[Private`i]]]
 
Mean[Private`f_PFun] ^:= First[Values[Private`f]]
 
DiagonalMatrix[Private`f_PFun] ^:= DiagonalMatrix[Values[Private`f]]
 
IdentityMatrix[Private`f_PFun] ^:= IdentityMatrix[Length[Private`f]]
 
PFun[(Private`c0_)?ScalarQ, Private`d_] := PFun[{Private`c0}, Private`d]
 
PFun[Private`c0:{_, _, ___}, Private`d_] := PFun[{Private`c0}, Private`d]
 
PFun[(Private`f_)?(NotListOrPatternQ[#1] &&  !ScalarQ[#1] && 
          !ScalarQ[First[Flatten[#1]]] & ) & , Private`d_, 1] := 
    PFun[{Private`f[Private`d[[1]]]}, Private`d]
 
PFun[(Private`f_)?(NotListOrPatternQ[#1] &&  !ScalarQ[#1] && 
          !ScalarQ[First[Flatten[#1]]] & ) & , Private`d_, 
     Private`opts:OptionsPattern[]] := PFun[Private`f, Private`d, 1]
 
PFun /: PFun::usage = 
     "PFun[c0,p0,n] defines a function taking the value c0 and the point p0."
 
Attributes[Private`f$] = {Temporary}
 
Attributes[Private`g$] = {Temporary}
 
FastPlus[Private`f$__IFun] := IFun[Plus @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
FastPlus[Private`f$__LFun] := LFun[Plus @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
FastPlus[Private`f$__PFun] := PFun[Plus @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
FastPlus[Private`f$__SingFun] := SingFun[Head[First[First[{Private`f$}]]][
      Plus @@ Values /@ {Private`f$}, Domain[First[First[{Private`f$}]]]], 
     Second[First[{Private`f$}]]]
 
SingFun[Private`if_IFun, {Private`\[Alpha]_, Private`\[Beta]_}][
     Private`x_] := Private`if[Private`x]*
     (MapToInterval[Private`if, Private`x] + 1)^Private`\[Alpha]*
     (1 - MapToInterval[Private`if, Private`x])^Private`\[Beta]
 
Values[Private`if_SingFun] ^:= Values[First[Private`if]]
 
(Private`f$_) /@ (Private`g$_SingFun) ^:= 
    SingFun[Private`f$ /@ Values[Private`g$], Domain[Private`g$]]
 
Length[Private`if_SingFun] ^:= Length[Values[Private`if]]
 
(Private`f:SingFun[_, {Private`a_, Private`b_}]) + 
     (Private`g:SingFun[_, {Private`a_, Private`b_}]) ^:= 
    FastPlus[Private`f, Private`g]
 
(Private`f_SingFun)*(Private`g_SingFun) ^:= FastTimes[Private`f, Private`g]
 
(Private`g$_SingFun)*(Private`f$_)?ConstantQ ^:= 
    SingFun[First[Private`g$]*Private`f$, Second[Private`g$]]
 
(Private`f$_SingFun)^(Private`c$_)?ConstantQ ^:= 
    SingFun[First[Private`f$]^Private`c$, Second[Private`f$]*Private`c$]
 
Abs[Private`if$_SingFun] ^:= SingFun[Abs[First[Private`if$]], 
     Second[Private`if$]]
 
Arg[Private`if$_SingFun] ^:= SingFun[Arg[First[Private`if$]], 
     Second[Private`if$]]
 
Re[Private`if$_SingFun] ^:= SingFun[Re[First[Private`if$]], 
     Second[Private`if$]]
 
Im[Private`if$_SingFun] ^:= SingFun[Im[First[Private`if$]], 
     Second[Private`if$]]
 
Conjugate[Private`if$_SingFun] ^:= SingFun[Conjugate[First[Private`if$]], 
     Second[Private`if$]]
 
Dimensions[Private`f_SingFun] ^:= Dimensions[First[Private`f]]
 
NIntegrate[Private`sf_SingFun] ^:= DomainIntegrate[Private`sf]
 
Integrate[SingFun[Private`f_IFun, {0, 0}]] ^:= SingFun[Integrate[Private`f], 
     {0, 0}]
 
SingFun[Private`f_, (Private`d_)?DomainQ, {Private`\[Alpha]_, 
      Private`\[Beta]_}] := 
    SingFun[((RightEndpoint[Private`d] - LeftEndpoint[Private`d])^
        (Private`\[Beta] + Private`\[Alpha])*IFun[Private`f, Private`d])/
      2^(Private`\[Alpha] + Private`\[Beta]), {Private`\[Alpha], 
      Private`\[Beta]}]
 
SingFun[Private`f_, (Private`d_)?DomainQ, {Private`\[Alpha]_, 
      Private`\[Beta]_}, Private`n_Integer] := 
    SingFun[((RightEndpoint[Private`d] - LeftEndpoint[Private`d])^
        (Private`\[Beta] + Private`\[Alpha])*IFun[Private`f, Private`d, 
        Private`n])/2^(Private`\[Alpha] + Private`\[Beta]), 
     {Private`\[Alpha], Private`\[Beta]}]
 
MakeBoxes[Private`sf:SingFun[_IFun, {_, _}], FormatType_] ^:= 
    Format[ReImLinePlot[Private`sf, Sequence @@ $FunFormat], FormatType]
 
Format[Private`sf:SingFun[_IFun, {_, _}]] := ReImLinePlot[Private`sf, 
     Sequence @@ $FunFormat]
 
FastTimes[Private`f$__SingFun] := SingFun[Head[First[First[{Private`f$}]]][
      Times @@ Values /@ {Private`f$}, Domain[First[First[{Private`f$}]]]], 
     Total[Second /@ {Private`f$}]]
 
Second := #1[[2]] & 
 
ConstantQ[Private`f_] := NumberQ[N[Private`f]]
 
Attributes[Private`c$] = {Temporary}
 
Attributes[Private`if$] = {Temporary}
 
DomainIntegrate[0.] := 0
 
DomainIntegrate[Private`if_IFun] := Last[Integrate[Private`if]]
 
DomainIntegrate[(Private`if_LFun)?(Domain[#1][[1]] == 
        {-Infinity, Infinity} & )] := 
    FFT[Values[Private`if]*Values[LFun[If[#1 == -1., 0, MapFromCircleD[
             Private`if, #1]] & , UnitCircle, Length[Private`if]]]][[-1]]*
     (2*Pi*I)
 
DomainIntegrate[Private`if_LFun] := 
    FFT[Values[Private`if]*Values[LFun[MapFromCircleD[Private`if, #1] & , 
          UnitCircle, Length[Private`if]]]][[-1]]*(2*Pi*I)
 
DomainIntegrate[{(Private`if__)?FunQ}] := 
    Plus @@ DomainIntegrate /@ {Private`if}
 
DomainIntegrate[SingFun[Private`if_IFun, {-1/2, -1/2}]] := 
    MapFromIntervalD[Domain[Private`if], 0]*Pi*Mean[Private`if]
 
DomainIntegrate[SingFun[Private`if_IFun, {1/2, 1/2}]] := 
    First[ToChebyshevUSeries[DCT[(MapFromIntervalD[Domain[Private`if], 0]*Pi*
         Private`if)/2]]]
 
DomainIntegrate /: DomainIntegrate::usage = "DomainIntegrate[ifun] returns \
the definite integral of the function ifun over its domain."
 
FFT[Private`f:{__?ScalarQ}] := Module[{Private`c, Private`cc, Private`n, 
      Private`scale, Private`k}, Private`n = Length[Private`f]; 
      Private`scale = Sqrt[1.*Private`n]; Private`cc = 
       -((Reverse[AlternatingVector[Private`n]]*Fourier[Private`f])/
         Private`scale); Private`c[0] = (-1)^Private`n*Private`cc[[1]]; 
      Private`c[Private`k_] /; Private`k < 0 := (-1)^Private`n*
        Private`cc[[1 - Private`k]]; Private`c[Private`k_] /; 
        Private`k > 0 := Private`cc[[-Private`k]]; If[EvenQ[Private`n], 
       ShiftList[Table[Private`c[Private`k], {Private`k, -(Private`n/2), 
          -1}], Table[Private`c[Private`k], {Private`k, 0, 
          Private`n/2 - 1}]], ShiftList[Table[Private`c[Private`k], 
         {Private`k, -((Private`n - 1)/2), -1}], Table[Private`c[Private`k], 
         {Private`k, 0, (Private`n - 1)/2}]]]]
 
FFT[Private`f:{__?ArrayQ}] := ToShiftListOfArrays[
     Map[FFT, ToArrayOfLists[Private`f], {-2}]]
 
FFT[Private`if_LFun] := FFT[Values[Private`if]]
 
FFT /: FFT::usage = 
     "Returns a ShiftList of Laurent coefficients of a LFun or its value \
list."
 
ScalarQ[Private`f_] := NumberQ[N[Private`f]]
 
ScalarQ /: ScalarQ::usage = "Tests whether something has a scalar value."
 
Private`cc[Private`z_] := Conjugate[Private`z]
 
AlternatingVector[Private`n_] := Table[(-1)^(Private`k + 1), 
     {Private`k, Private`n}]
 
AlternatingVector /: AlternatingVector::usage = "Alternating vector."
 
ToShiftListOfArrays[Private`ar_] := ShiftList[ToListOfArrays[
      ArrayMap[ToList, Private`ar]], Index[Flatten[Private`ar][[1]]]]
 
ToListOfArrays[(Private`A_)?MatrixQ] := Transpose[Private`A]
 
ToListOfArrays[(Private`A_)?(Length[Dimensions[#1]] == 3 & )] := 
    ToListOfMatrices[Private`A]
 
ToListOfArrays[(Private`A_)?VectorQ] := Private`A
 
ToListOfMatrices[Private`gg_] := Array[Private`gg[[All,All,#1]] & , 
     Length[First[First[Private`gg]]]]
 
ArrayMap[Private`f_, (Private`m_)?MatrixQ] := MatrixMap[Private`f, Private`m]
 
ArrayMap[Private`f_, (Private`m_)?VectorQ] := Private`f /@ Private`m
 
ArrayMap[Private`f_, (Private`m_)?TensorQ] := 
    (MatrixMap[Private`f, #1] & ) /@ Private`m
 
ArrayMap[Private`f_, Private`m_ShiftList] := ArrayMap[Private`f, 
     ToArrayOfShiftLists[Private`m]]
 
ArrayMap[Private`f_, (Private`g_)?ScalarFunQ] := Private`f[Private`g]
 
ArrayMap[Private`f_, (Private`g_)?FunQ] := ArrayMap[Private`f, 
     ToArrayOfFuns[Private`g]]
 
ArrayMap[Private`f_, Private`m_] := Private`f[Private`m]
 
MatrixMap[Private`f_, (Private`g_)?FunQ] := MatrixMap[Private`f, 
     ToMatrixOfFuns[Private`g]]
 
MatrixMap[Private`f_, Private`m_] := Map[Private`f, Private`m, {2}]
 
ToMatrixOfFuns[Private`f_] := MatrixMap[
     Head[Private`f][#1, Domain[Private`f]] & , ToMatrixOfLists[
      Values[Private`f]]]
 
ToMatrixOfFuns /: ToMatrixOfFuns::usage = 
     "Changes an IFun whose values are a matrix to a matrix of IFuns"
 
ToMatrixOfLists[Private`g1_] := Array[Private`g1[[All,#1,#2]] & , 
     Dimensions[First[Private`g1]]]
 
ToArrayOfShiftLists[Private`sl_] := Map[ShiftList[#1, Index[Private`sl]] & , 
     ToArrayOfLists[ToList[Private`sl]], {-2}]
 
ToArrayOfLists[(Private`A_)?MatrixQ] := Transpose[Private`A]
 
ToArrayOfLists[(Private`A_)?(Length[Dimensions[#1]] == 3 & )] := 
    ToMatrixOfLists[Private`A]
 
ToArrayOfLists[(Private`A_)?VectorQ] := Private`A
 
ScalarFunQ[(Private`f_)?FunQ] := ScalarQ[First[Values[Private`f]]]
 
ScalarFunQ[_] := False
 
ToArrayOfFuns[(Private`f_)?MatrixFunQ] := ToMatrixOfFuns[Private`f]
 
ToArrayOfFuns[(Private`f_)?VectorFunQ] := 
    (Head[Private`f][#1, Domain[Private`f]] & ) /@ 
     ToArrayOfLists[Values[Private`f]]
 
ToArrayOfFuns[(Private`f_)?ScalarFunQ] := Private`f
 
MatrixFunQ[(Private`f_)?FunQ] := MatrixQ[First[Values[Private`f]]]
 
MatrixFunQ[_] := False
 
MatrixFunQ /: MatrixFunQ::usage = 
     "Tests if an object is in IFun whose values are a matrix."
 
VectorFunQ[(Private`f_)?FunQ] := VectorQ[First[Values[Private`f]]]
 
VectorFunQ[_] := False
 
VectorFunQ /: VectorFunQ::usage = 
     "Tests if an object is in IFun whose values are a vector."
 
MapFromCircleD[Circle[Private`a_, Private`r_], Private`z_] := Private`r
 
MapFromCircleD[Circle[Private`a_, Private`r_, Orientation -> 1], 
     Private`z_] := Private`r
 
MapFromCircleD[Circle[Private`a_, Private`r_, Orientation -> -1], 
     Private`z_] := -(Private`r/Private`z^2)
 
MapFromCircleD[Line[{-Infinity, Infinity}], Private`z_] := 
    -((2*I)/(1 + Private`z)^2)
 
MapFromCircleD[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     Private`z_] := -((2*I)/(Private`L*(1 + Private`z)^2))
 
MapFromCircleD[Line[{-Pi, Pi}], Private`z_] := 
    Derivative[1][CircleToPeriodicInterval][Private`z]
 
MapFromCircleD[Private`l_Line, Private`z_] := 
    (MapFromIntervalD[Private`l, MapFromCircle[Private`PeriodicInterval, 
         Private`z]/Pi]*MapFromCircleD[Private`PeriodicInterval, Private`z])/
     Pi
 
MapFromCircleD[Ellipse[{Private`a_, Private`b_}, Private`r_], Private`z_] := 
    MapFromIntervalD[Line[{Private`a, Private`b}], CircleToInterval[
       MapFromCircle[Circle[0, Private`r], Private`z]]]*
     Derivative[1][CircleToInterval][MapFromCircle[Circle[0, Private`r], 
       Private`z]]*MapFromCircleD[Circle[0, Private`r], Private`z]
 
MapFromCircleD[Private`f_LFun, Private`z_] := 
    MapFromCircleD[Domain[Private`f], Private`z]
 
MapFromCircleD[Curve[Private`cr_LFun], Private`z_] := 
    MapDot[Private`z^#1 & , FFT[Derivative[1][Private`cr]]]
 
MapFromCircleD /: MapFromCircleD::usage = 
     "MapFromCircleD[d,z] is the derivative of MapFromCircle[d,z]."
 
Attributes[Derivative] = {NHoldAll, ReadProtected}
 
CircleToPeriodicInterval[Private`z_] := -(I*Log[Private`z])
 
Attributes[MapFromIntervalD] = {Listable}
 
MapFromIntervalD[Line[{_?InfinityQ, _?InfinityQ}], Private`x_] := 
    Derivative[1][IntervalToRealLine][Private`x]
 
MapFromIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}, 
      Stretch -> Private`L_], 1.] := 0.
 
MapFromIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}, 
      Stretch -> Private`L_], Private`x_] := 
    (2*E^(I*Arg[Private`b])*Private`L)/(-1 + Private`x)^2
 
MapFromIntervalD[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}, 
      Stretch -> Private`L_], Private`x_] := 
    -MapFromIntervalD[Line[{Private`b, Private`a}, Stretch -> Private`L], 
      -Private`x]
 
MapFromIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}], 1.] := 
    0.
 
MapFromIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}], 
     Private`x_] := MapFromIntervalD[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`x]
 
MapFromIntervalD[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}], 
     -1.] := 0.
 
MapFromIntervalD[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}], 
     Private`x_] := MapFromIntervalD[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`x]
 
MapFromIntervalD[Line[{Private`a_, Private`b_}], Private`x_] := 
    (Private`b - Private`a)/2
 
MapFromIntervalD[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     Private`z_] := (2*(-(Private`a*Private`L) + Private`b*Private`L))/
     (1 + Private`L - Private`z + Private`L*Private`z)^2
 
MapFromIntervalD[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     Private`x_] := (2*E^((1*I*(Private`t0 + Private`t1))/2)*
      (-E^(I*Private`t0) + E^(I*Private`t1))*Private`r)/
     (E^((I*Private`t1)/2)*(-1 + Private`x) - E^((I*Private`t0)/2)*
        (1 + Private`x))^2
 
MapFromIntervalD[Private`f_IFun, Private`z_] := 
    MapFromIntervalD[Domain[Private`f], Private`z]
 
MapFromIntervalD[Curve[Private`cr_IFun], Private`z_] := 
    MapDot[ChebyshevT[#1 - 1, Private`z] & , DCT[Derivative[1][Private`cr]]]
 
MapFromIntervalD[Curve[Private`cr_IFun, Stretch -> Private`L_], 
     Private`z_] := MapFromIntervalD[Line[{-1, 1}, Stretch -> Private`L], 
      Private`z]*MapFromIntervalD[Curve[Private`cr], 
      MapFromInterval[Line[{-1, 1}, Stretch -> Private`L], Private`z]]
 
MapFromIntervalD /: MapFromIntervalD::usage = 
     "MapFromIntervalD[d,x] is the derivative of MapFromInterval[d,x]."
 
Attributes[IntervalToRealLine] = {Listable}
 
IntervalToRealLine[_?(NEqual[#1, 1.] & )] := Infinity
 
IntervalToRealLine[_?(NEqual[#1, -1.] & )] := -Infinity
 
IntervalToRealLine[(Private`x_)?NumberQ] := Private`x/Sqrt[1 - Private`x^2]
 
Conjugate[Arc[Private`x0_, Private`r_, {Private`t0_, Private`t1_}]] ^:= 
    Arc[Conjugate[Private`x0], Private`r, {-Private`t0, -Private`t1}]
 
Arc[Private`x0_, Private`r_, {Private`t0_, Private`t1_}]*
     (Private`c_)?NumberQ ^:= Arc[Private`c*Private`x0, Private`r, 
     {Pi - Private`t0, Pi - Private`t1}]
 
Arc[Private`a_, Private`r_, {Private`t0_, Private`t1_}, Left] /; 
     Private`t0 < Private`t1 := Arc[Private`a, Private`r, 
     {Private`t0, Private`t1}]
 
Arc[Private`a_, Private`r_, {Private`t0_, Private`t1_}, Left] := 
    Arc[Private`a, Private`r, {Private`t0 - 2*Pi, Private`t1}, Left]
 
Arc[Private`a_, Private`r_, {Private`t0_, Private`t1_}, Right] /; 
     Private`t0 > Private`t1 := Arc[Private`a, Private`r, 
     {Private`t0, Private`t1}]
 
Arc[Private`a_, Private`r_, {Private`t0_, Private`t1_}, Right] := 
    Arc[Private`a, Private`r, {Private`t0 + 2*Pi, Private`t1}, Right]
 
Arc[{Private`a_, Private`b_, Private`c_}] := 
    Function[Private`x0, Arc[Private`x0, Abs[Private`a - Private`x0], 
       {Arg[Private`a - Private`x0], Arg[Private`c - Private`x0]}]][
     (Det[{{Abs[Private`a]^2, Im[Private`a], 1}, {Abs[Private`b]^2, 
          Im[Private`b], 1}, {Abs[Private`c]^2, Im[Private`c], 1}}] - 
       I*Det[{{Abs[Private`a]^2, Re[Private`a], 1}, {Abs[Private`b]^2, 
           Re[Private`b], 1}, {Abs[Private`c]^2, Re[Private`c], 1}}])/
      (2*Det[{{Re[Private`a], Im[Private`a], 1}, {Re[Private`b], 
          Im[Private`b], 1}, {Re[Private`c], Im[Private`c], 1}}])]
 
Arc /: Arc::usage = "Arc[z0,r,{t0,t1}] represents the arc centred at z0 of \
radius r from argument t0 to t1."
 
Conjugate[Curve[Private`cr_IFun, Private`opts___]] ^:= 
    Curve[Conjugate[Private`cr], Private`opts]
 
Curve[Private`cr_IFun, Private`opts___] + (Private`c_)?NumberQ ^:= 
    Curve[Private`c + Private`cr, Private`opts]
 
Curve[Private`cr_IFun, Private`opts___]*(Private`c_)?NumberQ ^:= 
    Curve[Private`c*Private`cr, Private`opts]
 
Curve /: Curve::usage = "Turns an IFun into a domain"
 
DCT[Private`f:{__?ScalarQ}] := AlternatingVector[Length[Private`f]]*
     HalfFirstAndLast[FourierDCT[Private`f, 1]*
       Sqrt[2/(Length[Private`f] - 1)]]
 
DCT[Private`f:{__?VectorQ}] := ToListOfArrays[
     DCT /@ ToArrayOfLists[Private`f]]
 
DCT[Private`f:{__?MatrixQ}] := ToListOfArrays[MatrixMap[DCT, 
      ToArrayOfLists[Private`f]]]
 
DCT[(Private`f_IFun)?ArrayFunQ] := ToListOfArrays[ArrayMap[DCT, Private`f]]
 
DCT[Private`if_IFun] := DCT[Values[Private`if]]
 
DCT[Private`sf_SingFun] := DCT[First[Private`sf]]
 
DCT /: DCT::usage = "DCT[ifun] returns the Chebyshev coefficients of an IFun."
 
HalfFirstAndLast[{Private`m1_, Private`m___, Private`m2_}] := 
    {Private`m1/2, Private`m, Private`m2/2}
 
ArrayFunQ[(Private`f_)?FunQ] := ArrayQ[First[Values[Private`f]]]
 
ArrayFunQ[_] := False
 
ArrayFunQ /: ArrayFunQ::usage = 
     "Tests if an object is in IFun whose values are an array."
 
Attributes[MapFromInterval] = {Listable}
 
MapFromInterval[Line[{_?InfinityQ, _?InfinityQ}], Private`x_] := 
    IntervalToRealLine[Private`x]
 
MapFromInterval[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}, 
      Stretch -> Private`L_], Private`x_] := 
    Private`L*Exp[I*Arg[Private`b]]*IntervalToHalfLine[Private`x] + Private`a
 
MapFromInterval[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}, 
      Stretch -> Private`L_], Private`x_] := MapFromInterval[
     Line[{Private`b, Private`a}, Stretch -> Private`L], -Private`x]
 
MapFromInterval[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}], 
     Private`x_] := MapFromInterval[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`x]
 
MapFromInterval[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}], 
     Private`x_] := MapFromInterval[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`x]
 
MapFromInterval[Line[{Private`a_, Private`b_}], Private`x_] := 
    (Private`b + Private`a)/2 + ((Private`b - Private`a)*Private`x)/2
 
MapFromInterval[Private`z_] := Private`z
 
MapFromInterval[Line[{Private`a_, Private`b_}, 
      Stretch -> _?(NEqual[1., #1] & )], _?InfinityQ] := Infinity
 
MapFromInterval[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     _?InfinityQ] := (-Private`a + Private`b*Private`L)/(-1 + Private`L)
 
MapFromInterval[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     Private`z_] := (Private`b*Private`L*(-1 - Private`z) + 
      Private`a*(-1 + Private`z))/(-1 - Private`L + Private`z - 
      Private`L*Private`z)
 
MapFromInterval[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     _?InfinityQ] := -(E^((1*I*(Private`t0 + Private`t1))/2)*Private`r) + 
     Private`z0
 
MapFromInterval[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     Private`x_] := (-(E^((1*I*(Private`t0 + 2*Private`t1))/2)*Private`r*
        (1 + Private`x)) - E^((I*Private`t0)/2)*(1 + Private`x)*Private`z0 + 
      E^((I*Private`t1)/2)*(-1 + Private`x)*(E^(I*Private`t0)*Private`r + 
        Private`z0))/(E^((I*Private`t1)/2)*(-1 + Private`x) - 
      E^((I*Private`t0)/2)*(1 + Private`x))
 
MapFromInterval[Private`f_IFun, Private`z_] := 
    MapFromInterval[Domain[Private`f], Private`z]
 
MapFromInterval[Curve[Private`cr_IFun], Private`z_] := 
    MapDot[ChebyshevT[#1 - 1, Private`z] & , DCT[Private`cr]]
 
MapFromInterval[Curve[Private`cr_], (Private`z_)?InfinityQ] := Private`z
 
MapFromInterval[Curve[Private`cr_IFun, Stretch -> Private`L_], Private`z_] := 
    MapFromInterval[Curve[Private`cr], MapFromInterval[
      Line[{-1, 1}, Stretch -> Private`L], Private`z]]
 
MapFromInterval /: MapFromInterval::usage = "MapFromInterval[d,x] maps the \
point x via the conformal map that maps the unit interval to the domain d. If \
d is an IFun, then it is equivalent to MapFromInterval[Domain[d],x]."
 
Attributes[IntervalToHalfLine] = {Listable}
 
IntervalToHalfLine[_?(NEqual[#1, 1.] & )] := Infinity
 
IntervalToHalfLine[_?InfinityQ] := -1.
 
IntervalToHalfLine[Private`x_] := (Private`x + 1)/(1 - Private`x)
 
Attributes[MapFromCircle] = {Listable}
 
MapFromCircle[Circle[Private`a_, Private`r_], Private`z_] := 
    Private`r*Private`z + Private`a
 
MapFromCircle[Circle[Private`a_, Private`r_, Orientation -> 1], 
     Private`z_] := Private`r*Private`z + Private`a
 
MapFromCircle[Circle[Private`a_, Private`r_, Orientation -> -1], 
     Private`z_] := Private`r/Private`z + Private`a
 
MapFromCircle[Line[{-Infinity, Infinity}], _?(NEqual[#1, -1.] & )] := Infinity
 
MapFromCircle[Line[{-Infinity, Infinity}], Private`z_] := 
    (-(I*Private`z) + I)/(Private`z + 1)
 
MapFromCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     _?(NEqual[#1, -1.] & )] := Infinity
 
MapFromCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     Private`z_] := -((I*(-1 + Private`z))/(Private`L*(1 + Private`z)))
 
MapFromCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_, 
      Centre -> Private`a_], _?(NEqual[#1, -1.] & )] := Infinity
 
MapFromCircle[Line[{-Infinity, Infinity}, Stretch -> Private`L_, 
      Centre -> Private`a_], Private`z_] := 
    Private`a - (I*(-1 + Private`z))/(Private`L*(1 + Private`z))
 
MapFromCircle[Line[{DirectedInfinity[-I], DirectedInfinity[I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], 
     _?(NEqual[#1, -1.] & )] := Infinity
 
MapFromCircle[Line[{DirectedInfinity[-I], DirectedInfinity[I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], Private`z_] := 
    Private`a - (I*(I*(-1 + Private`z)))/(Private`L*(1 + Private`z))
 
MapFromCircle[Line[{DirectedInfinity[I], DirectedInfinity[-I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], 
     _?(NEqual[#1, -1.] & )] := Infinity
 
MapFromCircle[Line[{DirectedInfinity[I], DirectedInfinity[-I]}, 
      Stretch -> Private`L_, Centre -> Private`a_], Private`z_] := 
    Private`a - (I*(I*(-1 + 1/Private`z)))/(Private`L*(1 + 1/Private`z))
 
MapFromCircle[Line[{-Pi, Pi}], Private`z_] := CircleToPeriodicInterval[
     Private`z]
 
MapFromCircle[Private`l_Line, Private`z_] := MapFromInterval[Private`l, 
     MapFromCircle[Private`PeriodicInterval, Private`z]/Pi]
 
MapFromCircle[Ellipse[{Private`a_, Private`b_}, Private`r_], Private`z_] := 
    MapFromInterval[Line[{Private`a, Private`b}], 
     CircleToInterval[MapFromCircle[Circle[0, Private`r], Private`z]]]
 
MapFromCircle[Private`f_LFun, Private`z_] := MapFromCircle[Domain[Private`f], 
     Private`z]
 
MapFromCircle[Curve[Private`cr_LFun], Private`z_] := 
    MapDot[Private`z^#1 & , FFT[Private`cr]]
 
MapFromCircle[Curve[Private`cr_], (Private`z_)?InfinityQ] := Private`z
 
MapFromCircle[Curve[Private`cr_], (Private`z_)?ZeroQ] := 0
 
MapFromCircle /: MapFromCircle::usage = "MapToCircle[d,z] maps z via the \
conformal map from the unit circle to the domain d."
 
CircleToInterval[Private`z_] := (1*(Private`z + 1/Private`z))/2
 
CircleToInterval /: CircleToInterval::usage = 
     "CircleToInterval[z] conformally maps the unit circle to the unit \
interval."
 
ZeroQ[Private`f_] := Private`f == 0
 
UnitCircle = Circle[0, 1]
 
UnitCircle /: UnitCircle::usage = "The unit circle Circle[0.,1.]."
 
ToChebyshevUSeries[Private`ts:{_}] := Private`ts
 
ToChebyshevUSeries[Private`ts_] := DoubleFirst[Private`ts]/2 - 
     PadRight[Rest[Rest[Private`ts]]/2, Length[Private`ts]]
 
DoubleFirst[{Private`m1_, Private`m___}] := {2*Private`m1, Private`m}
 
DomainQ[(Private`d_)?IntervalDomainQ] := True
 
DomainQ[(Private`d_)?CircleDomainQ] := True
 
DomainQ[_?PointDomainQ] := True
 
DomainQ[_] := False
 
DomainQ /: DomainQ::usage = 
     "Test whether something is a domain (Line, Arc, Circle, Curve, etc)."
 
IntervalDomainQ[Line[{-Infinity, Infinity}]] := False
 
IntervalDomainQ[_Line] := True
 
IntervalDomainQ[_Arc] := True
 
IntervalDomainQ[Curve[_IFun]] := True
 
IntervalDomainQ[_Ellipse] := False
 
IntervalDomainQ[_] := False
 
IntervalDomainQ /: IntervalDomainQ::usage = 
     "Test whether something is a domain mapped from the unit interval."
 
CircleDomainQ[Line[{-Infinity, Infinity}]] := True
 
CircleDomainQ[_Circle] := True
 
CircleDomainQ[_Ellipse] := True
 
CircleDomainQ[Curve[_LFun]] := True
 
CircleDomainQ[_] := False
 
CircleDomainQ /: CircleDomainQ::usage = 
     "Test whether something is a domain mapped from the unit circle."
 
PointDomainQ[_Point] := True
 
PointDomainQ[_] := False
 
RightEndpoint[Line[{Private`a_, Private`b_}, ___]] := Private`b
 
RightEndpoint[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}]] := 
    N[Private`z0 + Private`r*Exp[I*Private`t1]]
 
RightEndpoint[Private`f_IFun] := RightEndpoint[Domain[Private`f]]
 
RightEndpoint[Private`if_SingFun] := RightEndpoint[First[Private`if]]
 
RightEndpoint[Private`comp_] := MapFromInterval[Private`comp, 1]
 
RightEndpoint /: RightEndpoint::usage = "RightEndpoint[d] returns the right \
endpoint of the domain d. If d is an IFun, then it is equivalent to \
RightEndpoint[Domain[d]]."
 
LeftEndpoint[Line[{Private`a_, Private`b_}, ___]] := Private`a
 
LeftEndpoint[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}]] := 
    N[Private`z0 + Private`r*Exp[I*Private`t0]]
 
LeftEndpoint[Private`f_IFun] := LeftEndpoint[Domain[Private`f]]
 
LeftEndpoint[Private`if_SingFun] := LeftEndpoint[First[Private`if]]
 
LeftEndpoint[Private`comp_] := MapFromInterval[Private`comp, -1]
 
LeftEndpoint /: LeftEndpoint::usage = "LeftEndpoint[d] returns the left \
endpoint of the domain d. If d is an IFun, then it is equivalent to \
LeftEndpoint[Domain[d]]."
 
ReImLinePlot[(Private`f_)?VectorFunQ, Private`opts___] := 
    MatrixForm[{ArrayMap[ReImLinePlot[#1, Private`opts] & , 
       ToArrayOfFuns[Private`f]]}]
 
ReImLinePlot[(Private`f_)?ArrayFunQ, Private`opts___] := 
    MatrixForm[ArrayMap[ReImLinePlot[#1, Private`opts] & , 
      ToArrayOfFuns[Private`f]]]
 
ReImLinePlot[Private`f_, Private`opts___] := 
    ListLinePlot[{Private`PlotPointValueList[Re[Private`f]], 
      Private`PlotPointValueList[Im[Private`f]]}, Private`opts]
 
Private`PlotPointValueList[(Private`f_)?FunQ] := 
    Thread[{Private`FiniteRealPoints[Private`f], FiniteValues[Private`f]}]
 
Private`PlotPointValueList[SingFun[Private`f_IFun, {Private`\[Alpha]_, 
       Private`\[Beta]_}]] := Private`PlotPointValueList[
     Fun[Piecewise[{{0, (NEqual[#1, RightEndpoint[Private`f]] && 
             Private`\[Beta] != 0) || (NEqual[#1, LeftEndpoint[Private`f]] && 
             Private`\[Alpha] != 0)}, 
          {1, (NEqual[#1, RightEndpoint[Private`f]] && Private`\[Beta] == 
              0) || (NEqual[#1, LeftEndpoint[Private`f]] && 
             Private`\[Alpha] == 0)}, {(MapToInterval[Private`f, #1] + 1)^
             Private`\[Alpha]*(1 - MapToInterval[Private`f, #1])^
             Private`\[Beta], True}}] & , Domain[Private`f], 100]*
      SetLength[Private`f, 100]]
 
Private`FiniteRealPoints[Private`if:IFun[_, Line[{-Infinity, Infinity}]]] := 
    FinitePoints[Private`if]
 
Private`FiniteRealPoints[Private`if_IFun] /; 
     NEqual[Re[LeftEndpoint[Private`if]], Re[RightEndpoint[Private`if]]] := 
    Im[FinitePoints[Private`if]]
 
Private`FiniteRealPoints[Private`if_LFun] := Re[FinitePoints[Private`if]]
 
Private`FiniteRealPoints[Private`if_PFun] := Re[FinitePoints[Private`if]]
 
Private`FiniteRealPoints[(Private`if_)?FunQ] := Re[FinitePoints[Private`if]]
 
FinitePoints[(Private`if_IFun)?(LeftEndpointInfinityQ[#1] && 
        RightEndpointInfinityQ[#1] & )] := 
    Rest[Most[IntervalPoints[Private`if]]]
 
FinitePoints[(Private`if_IFun)?LeftEndpointInfinityQ] := 
    Rest[IntervalPoints[Private`if]]
 
FinitePoints[(Private`if_IFun)?RightEndpointInfinityQ] := 
    Most[IntervalPoints[Private`if]]
 
FinitePoints[Private`if_IFun] := IntervalPoints[Private`if]
 
FinitePoints[Private`if:LFun[_, Line[{-Infinity, Infinity}, ___]]] := 
    Rest[Points[Private`if]]
 
FinitePoints[Private`if_LFun] := Points[Private`if]
 
FinitePoints[Private`if_PFun] := Points[Private`if]
 
FinitePoints[Private`l:{__?FunQ}] := Flatten[FinitePoints /@ Private`l]
 
FinitePoints[Private`d_, Private`n_] := Points[Private`d, Private`n]
 
LeftEndpointInfinityQ[Line[{_?InfinityQ, _}, ___]] := True
 
LeftEndpointInfinityQ[Private`f_IFun] := LeftEndpointInfinityQ[
     Domain[Private`f]]
 
LeftEndpointInfinityQ[_] := False
 
LeftEndpointInfinityQ /: LeftEndpointInfinityQ::usage = 
     "LeftEndpointInfinityQ[d] tests if a domain's left endpoint is \
unbounded."
 
RightEndpointInfinityQ[Line[{_, _?InfinityQ}, ___]] := True
 
RightEndpointInfinityQ[Private`f_IFun] := RightEndpointInfinityQ[
     Domain[Private`f]]
 
RightEndpointInfinityQ[_] := False
 
RightEndpointInfinityQ /: RightEndpointInfinityQ::usage = 
     "RightEndpointInfinityQ[d] tests if a domain's right endpoint is \
unbounded."
 
IntervalPoints[Private`d_, Private`n_] := MapFromInterval[Private`d, 
     NChebyshevLobattoPoints[Private`n]]
 
IntervalPoints[Private`f_IFun] := Points[Private`f]
 
Points[(Private`d_)?IntervalDomainQ, Private`n_] := 
    IntervalPoints[Private`d, Private`n]
 
Points[Private`if_IFun] := IntervalPoints[Domain[Private`if], 
     Length[Private`if]]
 
Points[(Private`d_)?CircleDomainQ, Private`n_] := MapFromCircle[Private`d, 
     Private`NCirclePoints[Private`n]]
 
Points[Private`lf_LFun] := MapFromCircle[Domain[Private`lf], 
     Points[UnitCircle, Length[Private`lf]]]
 
Points[Point[Private`z0_], 1] := {Private`z0}
 
Points[Private`if_PFun] := Points[Domain[Private`if], Length[Private`if]]
 
Points[Private`l:{__?FunQ}] := Flatten[Points /@ Private`l]
 
Points[Private`if_SingFun] := Points[Domain[Private`if], Length[Private`if]]
 
Points /: Points::usage = "Points[ifun] returns the the mapped \
Chebyshev\[Dash]Lobatto points.  Points[d,n] returns n mapped \
Chebyshev\[Dash]Lobatto points over a domain d."
 
Private`NCirclePoints[Private`n_] := N[CirclePoints[Private`n]]
 
FiniteValues[(Private`if_IFun)?(LeftEndpointInfinityQ[#1] && 
        RightEndpointInfinityQ[#1] & )] := Rest[Most[Values[Private`if]]]
 
FiniteValues[(Private`if_IFun)?LeftEndpointInfinityQ] := 
    Rest[Values[Private`if]]
 
FiniteValues[(Private`if_IFun)?RightEndpointInfinityQ] := 
    Most[Values[Private`if]]
 
FiniteValues[Private`if_IFun] := Values[Private`if]
 
FiniteValues[Private`if_LFun] := 
    Last /@ Select[Thread[{Points[Private`if], Values[Private`if]}], 
       !InfinityQ[First[#1]] & ]
 
FiniteValues[Private`pf_PFun] := Values[Private`pf]
 
Fun[(Private`f_)?NotListOrPatternQ, Private`l:Line[{_, _}, ___], 
     Private`opts___] := IFun[Private`f, Private`l, Private`opts]
 
Fun[(Private`f_)?NotListOrPatternQ, Line[Private`l:{_, _, ___}, 
      Private`Lopts___], Private`n_List] := 
    (If[Length[#1] == 1, #1[[1]], #1] & )[
     (IFun[Private`f, Line[#1[[1]], Sequence @@ 
          If[Or @@ InfinityQ /@ #1[[1]], {Private`Lopts}, {}]], 
        #1[[2]]] & ) /@ Thread[{Partition[Private`l, 2, 1], Private`n}]]
 
Fun[(Private`f_)?NotListOrPatternQ, Line[Private`l:{_, _, ___}, 
      Private`Lopts___], Private`n_Integer] := 
    Fun[Private`f, Line[Private`l, Private`Lopts], 
     Private`n*OneVector[Length[Private`l] - 1]]
 
Fun[(Private`f_)?NotListOrPatternQ, Line[Private`l:{_, _, ___}, 
      Private`Lopts___], Private`opts:OptionsPattern[]] := 
    (If[Length[#1] == 1, #1[[1]], #1] & )[
     (IFun[Private`f, Line[#1, Sequence @@ If[Or @@ InfinityQ /@ #1, 
           {Private`Lopts}, {}]], Private`opts] & ) /@ 
      Partition[Private`l, 2, 1]]
 
Fun[Private`f_, (Private`d_)?IntervalDomainQ, Private`opts___] := 
    IFun[Private`f, Private`d, Private`opts]
 
Fun[Private`a_] := Fun[Private`a, UnitInterval]
 
Fun[Private`f_, (Private`d_)?CircleDomainQ, Private`opts___] := 
    LFun[Private`f, Private`d, Private`opts]
 
Fun[Private`f_, (Private`d_)?PointDomainQ, Private`opts___] := 
    PFun[Private`f, Private`d, Private`opts]
 
Fun[Private`f_, Private`l_List, Private`n_List] := 
    Flatten[(Fun[Private`f, #1[[1]], #1[[2]]] & ) /@ 
      Thread[{Private`l, Private`n}]]
 
Fun[Private`f_, Private`l_List, Private`opts___] := 
    Flatten[(Fun[Private`f, #1, Private`opts] & ) /@ Private`l]
 
Fun /: Fun::usage = 
     "\nDecides between IFun and LFun, and allows Line[{a,b,c}]"
 
NotListOrPatternQ[Private`f_] :=  !ListQ[Private`f] && 
      !Head[Private`f] === Pattern &&  !Head[Private`f] === Blank
 
OneVector[Private`n_] := Table[1, {Private`n}]
 
OneVector /: OneVector::usage = 
     "OneVector[n] constructs a vector of length n of all ones."
 
UnitInterval = Line[{-1, 1}]
 
UnitInterval /: UnitInterval::usage = "The unit interval Line[{-1.,1.}]."
 
SetLength[Private`if_IFun, Private`n_] := 
    IFun[InverseDCT[PadRight[DCT[Private`if], Private`n]], Domain[Private`if]]
 
SetLength[Private`if_LFun, (Private`n_)?OddQ] := 
    LFun[InverseFFT[SetIndexRange[FFT[Private`if], {(1 - Private`n)/2, 
        (Private`n - 1)/2}]], Domain[Private`if]]
 
SetLength[Private`if_LFun, (Private`n_)?EvenQ] := 
    LFun[InverseFFT[SetIndexRange[FFT[Private`if], {-(Private`n/2), 
        Private`n/2 - 1}]], Domain[Private`if]]
 
InverseDCT[Private`f:{__?ScalarQ}] := 
    Reverse[((Length[Private`f] - 1)*AlternatingVector[Length[Private`f]]*
       DoubleFirstAndLast[DCT[DoubleFirstAndLast[Private`f]]])/2]
 
InverseDCT[Private`f:{__?VectorQ}] := ToListOfArrays[
     InverseDCT /@ ToArrayOfLists[Private`f]]
 
InverseDCT[Private`f:{__?MatrixQ}] := ToListOfArrays[
     MatrixMap[InverseDCT, ToArrayOfLists[Private`f]]]
 
DoubleFirstAndLast[{Private`m1_, Private`m___, Private`m2_}] := 
    {Private`m1*2, Private`m, Private`m2*2}
 
InverseFFT[Private`c:ShiftList[{__?ScalarQ}, _]] := 
    Module[{Private`scale, Private`cc, Private`cf, Private`j, Private`n}, 
     Private`n = Length[Private`c]; Private`scale = 
       First[Fourier[(1 & ) /@ LeftEvenPoints[Private`n]]]; 
      InverseFourier[-(Reverse[AlternatingVector[Private`n]]*Private`scale*
         If[EvenQ[Private`n], RotateLeft[Reverse[ToList[Private`c]], 
           (Private`n - 2)/2], RotateLeft[Reverse[
            ToList[ShiftList[(-1)^Private`n*OneVector[(Private`n - 1)/2], 
               Join[{(-1)^Private`n}, OneVector[(Private`n - 1)/2]]]*
              Private`c]], (Private`n - 1)/2]])]]
 
InverseFFT[Private`sl:ShiftList[{__?ArrayQ}, _]] := 
    ToListOfArrays[ArrayMap[InverseFFT, ToArrayOfShiftLists[Private`sl]]]
 
InverseFFT /: InverseFFT::usage = "Returns values that a ShiftList of Laurent \
coefficients would take on the unit circle."
 
LeftEvenPoints[Private`n_] := Range[-1, (Private`n - 1)/Private`n, 
     2/Private`n]
 
LeftEvenPoints[Private`n_, Private`a_, Private`b_] := 
    Private`a + ((Private`b - Private`a)*(1 + LeftEvenPoints[Private`n]))/2
 
LeftEvenPoints /: LeftEvenPoints::usage = 
     "Evenly spaced points on the unit interval."
 
SetIndexRange[Private`sl_ShiftList, Private`ind_] := 
    Module[{Private`sl2}, Private`sl2 = PadLeft[Private`sl, 
        Length[Private`sl] + FirstIndex[Private`sl] - First[Private`ind]]; 
      PadRight[Private`sl2, Length[Private`sl2] + Last[Private`ind] - 
        LastIndex[Private`sl]]]
 
SetIndexRange[Private`sm_ShiftMatrix, {Private`i_, Private`j_}, 
     {Private`m_, Private`n_}] := PadRight[PadLeft[Private`sm, 
      {Private`i, Private`m}], {Private`j, Private`n}]
 
ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, Private`jind_}][[
     Private`i_,Private`j_]] ^:= Private`ls[[Private`fixind[Private`i, 
      Private`iind],Private`fixind[Private`j, Private`jind]]]
 
ShiftMatrix /: ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, 
        Private`jind_}][[Private`i_Integer]] := 
     ShiftList[Private`ls[[Private`fixind[Private`i, Private`iind]]], 
      Private`jind]
 
(Private`f_) /@ ShiftMatrix[(Private`ls_)?MatrixQ, 
      {Private`iind_, Private`jind_}] ^:= 
    (Private`f[ShiftList[#1, Private`jind]] & ) /@ Private`ls
 
Transpose[ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, 
       Private`jind_}]] ^:= ShiftMatrix[Transpose[Private`ls], 
     {Private`jind, Private`iind}]
 
Inverse[ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, 
       Private`jind_}]] ^:= ShiftMatrix[Inverse[Private`ls], 
     {Private`jind, Private`iind}]
 
Normal[Private`sl_ShiftMatrix] ^:= ToArray[Private`sl]
 
Dimensions[ShiftMatrix[(Private`ls_)?MatrixQ, {_, _}]] ^:= 
    Dimensions[Private`ls]
 
ShiftMatrix /: PadRight[Private`sm_ShiftMatrix, {Private`m_, Private`n_}] := 
     ShiftMatrix[PadRight[ToArray[Private`sm], 
       {Private`m + RowIndex[Private`sm], Private`n + 
         ColumnIndex[Private`sm]}], {RowIndex[Private`sm], 
       ColumnIndex[Private`sm]}]
 
ShiftMatrix /: PadLeft[Private`sm_ShiftMatrix, {Private`m_, Private`n_}] := 
     ShiftMatrix[PadLeft[ToArray[Private`sm], 
       {Length[ToArray[Private`sm]] - RowIndex[Private`sm] + 1 - Private`m, 
        Second[Dimensions[ToArray[Private`sm]]] - ColumnIndex[Private`sm] + 
         1 - Private`n}], {1 - Private`m, 1 - Private`n}]
 
ShiftMatrix /: (Private`sm_ShiftMatrix) . (Private`sl_ShiftList) := 
     ShiftList[ToArray[Private`sm] . ToList[Private`sl], 
      RangeIndex[Private`sm]]
 
ShiftMatrix /: (Private`sl_ShiftList) . (Private`sm_ShiftMatrix) := 
     ShiftList[ToList[Private`sl] . ToArray[Private`sm], 
      ColumnIndex[Private`sm]]
 
(Private`sm_ShiftMatrix) . (Private`sm2_ShiftMatrix) ^:= 
    ShiftMatrix[ToArray[Private`sm] . ToArray[Private`sm2], 
     {RangeIndex[Private`sm], DomainIndex[Private`sm2]}]
 
(Private`sm_ShiftMatrix) + (Private`sm2_ShiftMatrix) ^:= 
    ShiftMatrix[ToArray[Private`sm] + ToArray[Private`sm2], 
     {RangeIndex[Private`sm], DomainIndex[Private`sm2]}]
 
(Private`sm_ShiftMatrix)*(Private`c_)?NumberQ ^:= 
    ShiftMatrix[Private`c*ToArray[Private`sm], {RangeIndex[Private`sm], 
      DomainIndex[Private`sm]}]
 
ShiftMatrix /: LinearSolve[Private`sm_ShiftMatrix, Private`sl_ShiftList] := 
     ShiftList[LinearSolve[ToArray[Private`sm], ToList[Private`sl]], 
      DomainIndex[Private`sm]]
 
Re[ShiftMatrix[(Private`ls_)?MatrixQ, Private`ind_]] ^:= 
    ShiftMatrix[Re[Private`ls], Private`ind]
 
Im[ShiftMatrix[(Private`ls_)?MatrixQ, Private`ind_]] ^:= 
    ShiftMatrix[Im[Private`ls], Private`ind]
 
ShiftMatrix[{(Private`A_)?MatrixQ, (Private`B_)?MatrixQ}] := 
    ShiftMatrix[Private`RightJoin[Private`A, Private`B], 
     {1, Dimensions[Private`A][[2]] + 1}]
 
MakeBoxes[Private`sm:ShiftMatrix[_?MatrixQ, {_Integer, _Integer}], 
     FormatType_] ^:= Format[MatrixForm[Module[{Private`i, Private`j}, 
       Table[If[Private`i == 0 || Private`j == 0, 
         Style[Private`sm[[Private`i,Private`j]], Bold], 
         Private`sm[[Private`i,Private`j]]], {Private`i, 
         RowIndexRange[Private`sm][[1]], RowIndexRange[Private`sm][[2]]}, 
        {Private`j, ColumnIndexRange[Private`sm][[1]], 
         ColumnIndexRange[Private`sm][[2]]}]]], FormatType]
 
Format[Private`sm:ShiftMatrix[_?MatrixQ, {_Integer, _Integer}]] := 
    MatrixForm[Module[{Private`i, Private`j}, 
      Table[If[Private`i == 0 || Private`j == 0, 
        Style[Private`sm[[Private`i,Private`j]], Bold], 
        Private`sm[[Private`i,Private`j]]], {Private`i, 
        RowIndexRange[Private`sm][[1]], RowIndexRange[Private`sm][[2]]}, 
       {Private`j, ColumnIndexRange[Private`sm][[1]], 
        ColumnIndexRange[Private`sm][[2]]}]]]
 
ToArray[ShiftMatrix[Private`ls_, {_, _}]] := Private`ls
 
RowIndex[ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, 
       Private`jind_}]] := Private`iind
 
ColumnIndex[ShiftMatrix[(Private`ls_)?MatrixQ, {Private`iind_, 
       Private`jind_}]] := Private`jind
 
RangeIndex := RowIndex
 
DomainIndex := ColumnIndex
 
RowIndexRange[Private`l_ShiftMatrix] := {1 - RowIndex[Private`l], 
     Dimensions[Private`l][[1]] - RowIndex[Private`l]}
 
ColumnIndexRange[Private`l_ShiftMatrix] := {1 - ColumnIndex[Private`l], 
     Dimensions[Private`l][[2]] - ColumnIndex[Private`l]}
 
$FunFormat = {ImageSize -> Small}
 
Private`FastTimes[Private`f$__IFun] := IFun[Times @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
Private`FastTimes[Private`f$__LFun] := LFun[Times @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
Private`FastTimes[Private`f$__PFun] := PFun[Times @@ Values /@ {Private`f$}, 
     Domain[{Private`f$}[[1]]]]
 
ToArrayFun[Private`f_] := Head[Flatten[{Private`f}][[1]]][
     ToListOfArrays[ArrayMap[Values, Private`f]], 
     Domain[First[Flatten[{Private`f}]]]]
 
ListFunQ[(Private`f_)?FunQ] := ListQ[First[Values[Private`f]]]
 
ListFunQ[_] := False
 
ListFunQ /: ListFunQ::usage = 
     "Tests if an object is in IFun whose values are a list."
 
MapToCircleD[Circle[Private`a_, Private`r_], Private`z_] := 1/Private`r
 
MapToCircleD[Circle[Private`a_, Private`r_, Orientation -> 1], Private`z_] := 
    1/Private`r
 
MapToCircleD[Circle[Private`a_, Private`r_, Orientation -> -1], 
     Private`z_] := -(Private`r/(Private`z - Private`a)^2)
 
MapToCircleD[Line[{-Infinity, Infinity}], Private`t_] := 
    -((2*I)/(I + Private`t)^2)
 
MapToCircleD[Line[{-Infinity, Infinity}, Stretch -> Private`L_], 
     Private`t_] := -((2*I*Private`L)/(I + Private`L*Private`t)^2)
 
MapToCircleD[Line[{-Pi, Pi}], Private`z_] := I*Exp[I*Private`z]
 
MapToCircleD[Private`l_Line, Private`z_] := 
    MapToCircleD[Private`PeriodicInterval, 
      MapToInterval[Private`l, Private`z]*Pi]*MapToIntervalD[Private`l, 
      Private`z]*Pi
 
MapToCircleD[Ellipse[{Private`a_, Private`b_}, Private`r_], Private`z_] := 
    MapToCircleD[Circle[0, Private`r], IntervalToInnerCircle[
       MapToInterval[Line[{Private`a, Private`b}], Private`z]]]*
     Derivative[1][IntervalToInnerCircle][MapToInterval[
       Line[{Private`a, Private`b}], Private`z]]*
     MapToIntervalD[Line[{Private`a, Private`b}], Private`z]
 
MapToCircleD[Private`f_LFun, Private`z_] := MapToCircleD[Domain[Private`f], 
     Private`z]
 
MapToCircleD[Private`cr:Curve[_], Private`z_] := 
    1/MapFromCircleD[Private`cr, MapToCircle[Private`cr, Private`z]]
 
MapToCircleD /: MapToCircleD::usage = 
     "MapToCircleD[d,z] is the derivative of MapToCircle[d,z]."
 
Attributes[MapToIntervalD] = {Listable}
 
MapToIntervalD[Line[{_?InfinityQ, _?InfinityQ}], Private`y_] := 
    Derivative[1][RealLineToInterval][Private`y]
 
MapToIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}, 
      Stretch -> Private`L_], Private`z_] := 
    (2*E^(I*Arg[Private`b])*Private`L)/
     (-Private`a + E^(I*Arg[Private`b])*Private`L + Private`z)^2
 
MapToIntervalD[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}, 
      Stretch -> Private`L_], Private`z_] := 
    -MapToIntervalD[Line[{Private`b, Private`a}, Stretch -> Private`L], 
      Private`z]
 
MapToIntervalD[Line[{(Private`a_)?NumberQ, (Private`b_)?InfinityQ}], 
     Private`z_] := MapToIntervalD[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`z]
 
MapToIntervalD[Line[{(Private`a_)?InfinityQ, (Private`b_)?NumberQ}], 
     Private`z_] := MapToIntervalD[Line[{Private`a, Private`b}, 
      Stretch -> 1.], Private`z]
 
MapToIntervalD[Line[{Private`a_, Private`b_}], Private`x_] := 
    -(2/(Private`a - Private`b))
 
MapToIntervalD[Line[{Private`a_, Private`b_}, Stretch -> Private`L_], 
     Private`z_] := -((2*(Private`a*Private`L - Private`b*Private`L))/
      (Private`a - Private`b*Private`L - Private`z + Private`L*Private`z)^2)
 
MapToIntervalD[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     Private`z_] := (2*E^((I*Private`t0)/2)*(E^(I*Private`t1) + 
       E^((1*I*(Private`t0 + Private`t1))/2))*Private`r)/
     ((-E^((I*Private`t0)/2) + E^((I*Private`t1)/2))*
      (E^((1*I*(Private`t0 + Private`t1))/2)*Private`r + Private`z - 
        Private`z0)^2)
 
MapToIntervalD[Private`f_IFun, Private`z_] := 
    MapToIntervalD[Domain[Private`f], Private`z]
 
MapToIntervalD[Private`cr:Curve[_], Private`z_] := 
    1/MapFromIntervalD[Private`cr, MapToInterval[Private`cr, Private`z]]
 
MapToIntervalD[Curve[Private`cr_IFun, Stretch -> Private`L_], Private`z_] := 
    MapToIntervalD[Line[{-1, 1}, Stretch -> Private`L], 
      MapToInterval[Curve[Private`cr], Private`z]]/
     MapFromIntervalD[Curve[Private`cr], MapToInterval[Curve[Private`cr], 
       Private`z]]
 
MapToIntervalD /: MapToIntervalD::usage = 
     "MapToIntervalD[d,x] is the derivative of MapToInterval[d,x]."
 
ShiftLeft[Private`f_ShiftList] := ShiftList[ToList[Private`f], 
     Index[Private`f] + 1]
 
ShiftLeft[Private`f_ShiftList, Private`d_] := ShiftList[ToList[Private`f], 
     Index[Private`f] + Private`d]
 
ShiftLeft[Private`l_List] := Rest[Private`l]
 
ShiftLeft[Private`l_List, Private`k_] := Private`l[[Private`k + 1 ;; All]]
 
MapOuter[Private`m_, Private`lst_] := MapIndexed[
     SDot[Private`m[First[#2]], #1] & , Private`lst]
 
SDot[Private`f_List, Private`g_List] := Private`f . Private`g
 
SDot[Private`f_, Private`g_] := Private`f*Private`g
 
BoundedIntegrate[(Private`lf_LFun)?UnitCircleFunQ] := 
    LFun[InverseFFT[MakeFFTIndexRange[MapOuter[If[ZeroQ[#1], 0, 1/#1] & , 
        ShiftRight[FFT[Private`lf]]]]], Domain[Private`lf]]
 
BoundedIntegrate[Private`lf_LFun] := SetDomain[BoundedIntegrate[
      ToUnitCircle[Private`lf]*
       LFun[Piecewise[{{0, InfinityQ[MapFromCircle[Private`lf, #1]]}, 
           {MapFromCircleD[Private`lf, #1], True}}] & , UnitCircle, 
        Length[Private`lf]]], Domain[Private`lf]]
 
BoundedIntegrate /: BoundedIntegrate::usage = 
     "BoundedIntegrate[lf] integrates an LFun with its -1 coefficient \
removed"
 
UnitCircleFunQ[Private`f_LFun] := N[Domain[Private`f]] == N[UnitCircle]
 
UnitCircleFunQ[_] := False
 
UnitCircleFunQ /: UnitCircleFunQ::usage = 
     "Tests whether an object is an LFun whose domain is the unit circle."
 
MakeFFTIndexRange[Private`sl_ShiftList] := SetIndexRange[Private`sl, 
     {-1, 1}*Max[Abs[IndexRange[Private`sl]]]]
 
ShiftRight[Private`f_ShiftList] := ShiftList[ToList[Private`f], 
     Index[Private`f] - 1]
 
ShiftRight[Private`f_ShiftList, Private`d_] := ShiftList[ToList[Private`f], 
     Index[Private`f] - Private`d]
 
ShiftRight[Private`l_List] := Join[{0}, Most[Private`l]]
 
SetDomain[(Private`f_)?FunQ, (Private`d_)?FunQ] := 
    SetDomain[Private`f, Domain[Private`d]]
 
SetDomain[(Private`f_)?FunQ, (Private`d_)?DomainQ] := 
    Head[Private`f][Values[Private`f], Private`d]
 
SetDomain[Private`f_List, Private`d_List] := (SetDomain @@ #1 & ) /@ 
     Thread[{Private`f, Private`d}]
 
SetDomain[Private`op_Private`FunValueListOperator, Private`d_] := 
    Private`FunValueListOperator[Private`op[[1]], SetDomain[Private`op[[2]], 
      Private`d]]
 
SetDomain /: SetDomain::usage = 
     "SetDomain[f,d] changes the domain of the Fun (or List of Funs) f to d"
 
Private`FunValueListOperator[Private`mat_, Private`g_][
     Private`f:{__?ScalarFunQ}] := FromValueList[Private`g, 
     Private`mat . ToValueList[Private`f]]
 
Private`FunValueListOperator[Private`mat_, Private`g_][
     Private`f:{__?VectorFunQ}] := FromValueList[(({0, 0} & ) /@ #1 & ) /@ 
      Private`g, ScalarToVectorMatrix[Private`mat] . ToValueList[Private`f]]
 
Private`FunValueListOperator[Private`mat_, Private`g_][
     Private`f:{__?MatrixFunQ}] := FromValueList[
     (({{0, 0}, {0, 0}} & ) /@ #1 & ) /@ Private`g, 
     ScalarToMatrixMatrix[Private`mat] . ToValueList[Private`f]]
 
Private`FunValueListOperator[Private`mat_][Private`f_] := 
    Private`FunValueListOperator[Private`mat, Private`f][Private`f]
 
FromValueList[(Private`f_IFun)?ScalarFunQ, Private`ls_] := 
    ZeroAtInfinityIFun[Private`ls, Domain[Private`f]]
 
FromValueList[(Private`f_IFun)?VectorFunQ, Private`ls_] := 
    ToArrayFun[(ZeroAtInfinityIFun[#1, Domain[Private`f]] & ) /@ 
      Partition[Private`ls, FiniteLength[Private`f]]]
 
FromValueList[(Private`f_IFun)?MatrixFunQ, Private`ls_] := 
    ToArrayFun[MatrixMap[ZeroAtInfinityIFun[#1, Domain[Private`f]] & , 
      PartitionList[Partition[Private`ls, FiniteLength[Private`f]], 
       Dimensions[Private`f]]]]
 
FromValueList[(Private`f_LFun)?ScalarFunQ, Private`ls_] := 
    ZeroAtInfinityLFun[Private`ls, Domain[Private`f]]
 
FromValueList[(Private`f_LFun)?MatrixFunQ, Private`ls_] := 
    ToArrayFun[MatrixMap[ZeroAtInfinityLFun[#1, Domain[Private`f]] & , 
      PartitionList[Partition[Private`ls, FiniteLength[Private`f]], 
       Dimensions[Private`f]]]]
 
FromValueList[(Private`f_LFun)?VectorFunQ, Private`ls_] := 
    ToArrayFun[(ZeroAtInfinityLFun[#1, Domain[Private`f]] & ) /@ 
      Partition[Private`ls, FiniteLength[Private`f]]]
 
FromValueList[(Private`f_PFun)?ScalarFunQ, Private`ls_] := 
    PFun[Private`ls, Domain[Private`f]]
 
FromValueList[(Private`f_PFun)?MatrixFunQ, Private`ls_] := 
    PFun[{PartitionList[Private`ls, Dimensions[Private`f]]}, 
     Domain[Private`f]]
 
FromValueList[(Private`f_PFun)?VectorFunQ, Private`ls_] := 
    PFun[{Private`ls}, Domain[Private`f]]
 
FromValueList[(Private`GI_List)?(VectorFunQ[First[#1]] & ), Private`ls_] := 
    (ZeroAtInfinityFun[#1[[2]], Domain[#1[[1]]]] & ) /@ 
     Thread[{Private`GI, ToListOfArrays /@ Thread[PartitionList[
          PartitionList[Private`ls, Flatten[ArrayMap[FiniteLength, 
             ToArrayOfListOfFuns[Private`GI]]]], Length /@ 
           ToArrayOfLists[ToArrayOfFuns /@ Private`GI]]]}]
 
FromValueList[(Private`GI_List)?(MatrixFunQ[First[#1]] & ), Private`ls_] := 
    (ZeroAtInfinityFun[#1[[2]], Domain[#1[[1]]]] & ) /@ 
     Thread[{Private`GI, ToListOfMatrices /@ ToListOfMatrices[
         PartitionList[Partition[PartitionList[Private`ls, 
            Flatten[ArrayMap[FiniteLength, ToArrayOfListOfFuns[
               Private`GI]]]], Length[Private`GI]], Dimensions[
           First[Private`GI]]]]}]
 
FromValueList[(Private`GI_List)?(ScalarFunQ[First[#1]] & ), Private`ls_] := 
    (ZeroAtInfinityFun[#1[[2]], Domain[#1[[1]]]] & ) /@ 
     Thread[{Private`GI, PartitionList[Private`ls, FiniteLength /@ 
         Private`GI]}]
 
ZeroAtInfinityIFun[Private`ls_List, (Private`d_)?LeftEndpointInfinityQ] := 
    IFun[Join[{0*Private`ls[[1]]}, Private`ls], Private`d]
 
ZeroAtInfinityIFun[Private`ls_List, (Private`d_)?RightEndpointInfinityQ] := 
    IFun[Join[Private`ls, {0*Private`ls[[1]]}], Private`d]
 
ZeroAtInfinityIFun[Private`ls_List, Private`d_] := IFun[Private`ls, Private`d]
 
ZeroAtInfinityIFun[(Private`f_)?NotListOrPatternQ, Private`d_, 
     Private`opts___] := IFun[If[InfinityQ[#1], 0*Private`f[0.], 
       Private`f[#1] /. Underflow[] -> 0] & , Private`d, Private`opts]
 
ZeroAtInfinityIFun /: ZeroAtInfinityIFun::usage = 
     "Constructs a Fun with the default value of zero at infinity"
 
FiniteLength[Private`f_] := Length[FinitePoints[Private`f]]
 
PartitionList[Private`l_, {}] := {}
 
PartitionList[Private`l_, (Private`d_)?VectorQ] := 
    Join[{Private`l[[1 ;; First[Private`d]]]}, 
     PartitionList[Private`l[[First[Private`d] + 1 ;; -1]], Rest[Private`d]]]
 
PartitionList[Private`l_, (Private`d_)?MatrixQ] := 
    PartitionList[PartitionList[Private`l, Flatten[Private`d]], 
     Length /@ Private`d]
 
ZeroAtInfinityLFun[(Private`f_)?NotListOrPatternQ, Private`d_, 
     Private`opts___] := LFun[If[InfinityQ[#1], 0*Private`f[0.], 
       Private`f[#1] /. Underflow[] -> 0] & , Private`d, Private`opts]
 
ZeroAtInfinityLFun[Private`f_List, Line[{-Infinity, Infinity}]] := 
    LFun[Join[{0*Private`f[[1]]}, Private`f], RealLine]
 
ZeroAtInfinityLFun[Private`f_List, Private`d_] := LFun[Private`f, Private`d]
 
ZeroAtInfinityLFun /: ZeroAtInfinityLFun::usage = 
     "Constructs a LFun with the default value of zero at infinity"
 
RealLine = Line[{-Infinity, Infinity}]
 
RealLine /: RealLine::usage = "The real line Line[{-\[Infinity],\[Infinity]}]"
 
ZeroAtInfinityFun[Private`f_List, (Private`d_)?IntervalDomainQ] := 
    ZeroAtInfinityIFun[Private`f, Private`d]
 
ZeroAtInfinityFun[Private`f_List, (Private`d_)?CircleDomainQ] := 
    ZeroAtInfinityLFun[Private`f, Private`d]
 
ZeroAtInfinityFun[Private`f_List, (Private`d_)?PointDomainQ] := 
    PFun[Private`f, Private`d]
 
ZeroAtInfinityFun[(Private`f_)?NotListOrPatternQ, Private`d_, 
     Private`opts___] := Fun[If[InfinityQ[#1], 0*Private`f[0.], 
       Private`f[#1] /. Underflow[] -> 0] & , Private`d, Private`opts]
 
ZeroAtInfinityFun /: ZeroAtInfinityFun::usage = 
     "Constructs a Fun with the default value of zero at infinity"
 
ToArrayOfListOfFuns[Private`f_List] := ToArrayOfLists[
     ToArrayOfFuns /@ Private`f]
 
ToValueList[Private`GI_List] := Flatten[(ArrayMap[FiniteValues, #1] & ) /@ 
      ToArrayOfLists[ToArrayOfFuns /@ Private`GI]]
 
ToValueList[(Private`f_)?FunQ] := Flatten[ArrayMap[FiniteValues, 
      ToArrayOfFuns[Private`f]]]
 
ScalarToVectorMatrix := BlockDiagonalMatrix[{#1, #1}] & 
 
BlockDiagonalMatrix[Private`Al_List] := 
    Module[{Private`Asp, Private`k, Private`j, Private`dim, Private`sete}, 
     Private`dim[(Private`al_)?MatrixQ] := Dimensions[Private`al]; 
      Private`dim[(Private`al_)?VectorQ] := {Length[Private`al], 1}; 
      Private`dim[Private`al_] := {1, 1}; Private`Asp = 
       SparseZeroMatrix @@ Total[Private`dim /@ Private`Al]; 
      {Private`k, Private`j} = {0, 0}; Private`sete[(Private`A_)?MatrixQ] := 
       Private`Asp[[Private`k + 1 ;; (Private`k = Private`k + 
            Dimensions[Private`A][[1]]),Private`j + 1 ;; 
          (Private`j = Private`j + Dimensions[Private`A][[2]])]] = Private`A; 
      Private`sete[(Private`A_)?VectorQ] := 
       Private`Asp[[Private`k + 1 ;; (Private`k = Private`k + 
            Length[Private`A]),Private`j + 1 ;; (Private`j = 
           Private`j + 1)]] = Private`A; Private`sete[Private`A_] := 
       Private`Asp[[Private`k + 1 ;; (Private`k = Private`k + 1),
         Private`j + 1 ;; (Private`j = Private`j + 1)]] = Private`A; 
      Private`sete /@ Private`Al; Private`Asp]
 
SparseZeroMatrix[Private`n_, Private`m_] := SparseArray[{}, 
     {Private`n, Private`m}]
 
ScalarToMatrixMatrix := BlockDiagonalMatrix[{#1, #1, #1, #1}] & 
 
ToUnitCircle[Private`lf_LFun] := SetDomain[Private`lf, UnitCircle]
 
ToUnitCircle /: ToUnitCircle::usage = 
     "ToUnitCircle[lfun] maps lfun to an LFun defined over the unit circle."
 
RemoveZeros[{Private`v___, _?(Norm[#1] == 0 & )}] := RemoveZeros[{Private`v}]
 
RemoveZeros[Private`v_List] := Private`v
 
RemoveZeros[ShiftList[{Private`v___, _?(Norm[#1] == 0 & )}, Private`ind_]] := 
    RemoveZeros[ShiftList[{Private`v}, Private`ind]]
 
RemoveZeros[ShiftList[{_?(Norm[#1] == 0 & ), Private`v___}, Private`ind_]] := 
    RemoveZeros[ShiftList[{Private`v}, Private`ind - 1]]
 
RemoveZeros[Private`v_ShiftList] := Private`v
 
$MachineTolerance = 1.*^-13
 
$MachineTolerance /: $MachineTolerance::usage = "A specified tolerance for \
when two numerical values should be treated as equal."
 
Private`AdaptiveLFun[Private`m_Integer, Private`f_, Private`d_, 
     Private`pars:OptionsPattern[]] := Module[{Private`prec}, 
     Private`prec = InterpolationPrecision /. {Private`pars} /. 
        Options[Private`AdaptiveLFun]; LFun[Private`f, Private`d, 
       Length[ChopDrop[(If[Max[Abs[Flatten[ToList[FFT[#1]][[{1, 2, -1, 
                  -2}]]]]] < Private`prec, #1, Private`AdaptiveLFun[
             2*Private`m, Private`f, Private`d, Private`pars]] & )[
          LFun[Private`f, Private`d, Private`m]], Private`prec]]]]
 
Options[Private`AdaptiveLFun] := {InterpolationPrecision -> $MachineTolerance}
 
ChopDrop[Private`cf_IFun] := 
    IFun[InverseDCT[(Which[Length[#1] == 0, {0, 0}, Length[#1] == 1, 
         {#1[[1]], 0*#1[[1]]}, True, #1] & )[ChopDrop[DCT[Private`cf]]]], 
     Domain[Private`cf]]
 
ChopDrop[Private`cf_LFun] := 
    LFun[InverseFFT[(SetIndexRange[#1, {-Max[Abs[IndexRange[#1]]], 
          Max[Abs[IndexRange[#1]]]}] & )[
       (Which[Length[#1] == 0, ShiftList[{0, 0, 0}, 2], IndexRange[#1] == 
           {0, 0}, ShiftList[{0*#1[[0]], #1[[0]], 0*#1[[0]]}, 2], True, 
          #1] & )[ChopDrop[FFT[Private`cf]]]]], Domain[Private`cf]]
 
ChopDrop[Private`v_] := RemoveZeros[Chop[Private`v]]
 
ChopDrop[Private`cf_IFun, Private`prec_] := 
    IFun[InverseDCT[(Which[Length[#1] == 0, {0, 0}, Length[#1] == 1, 
         {#1[[1]], 0*#1[[1]]}, True, #1] & )[ChopDrop[DCT[Private`cf], 
        Private`prec]]], Domain[Private`cf]]
 
ChopDrop[Private`cf_LFun, Private`prec_] := 
    LFun[InverseFFT[(SetIndexRange[#1, {-Max[Abs[IndexRange[#1]]], 
          Max[Abs[IndexRange[#1]]]}] & )[
       (Which[Length[#1] == 0, ShiftList[{0, 0, 0}, 2], IndexRange[#1] == 
           {0, 0}, ShiftList[{0*#1[[0]], #1[[0]], 0*#1[[0]]}, 2], True, 
          #1] & )[ChopDrop[FFT[Private`cf], Private`prec]]]], 
     Domain[Private`cf]]
 
ChopDrop[Private`v_, Private`prec_] := RemoveZeros[
     Chop[Private`v, Private`prec]]
 
NZeroQ[Private`sl_List] := NZeroQ[Max[Abs[Private`sl]]]
 
NZeroQ[Private`sl_ShiftList] := NZeroQ[ToList[Private`sl]]
 
NZeroQ[Private`f_] := NEqual[Private`f, 0]
 
ChebyshevLobattoDerivative[Private`c_List] := 
    InverseDCT[ChebyshevD[DCT[Private`c]]]
 
ChebyshevLobattoDerivative /: ChebyshevLobattoDerivative::usage = "Maps a \
list of function values at Chebyshev points to those of its derivative."
 
ChebyshevD[Private`c_List] := Module[{Private`d, Private`n}, 
     Private`n = Length[Private`c]; If[Private`n == 1, {0*Private`c[[1]]}, 
       Private`d[Private`n] = Private`d[Private`n - 1] = 0*Private`c[[1]]; 
        Do[Private`d[Private`k] = Private`d[Private`k + 2] + 
           2*(Private`k + 1)*Private`c[[Private`k + 2]], 
         {Private`k, Private`n - 2, 1, -1}]; Private`d[0] = 
         Private`d[2]/2 + Private`c[[2]]; Array[Private`d[#1 - 1] & , 
         {Private`n}]]]
 
ChebyshevD /: ChebyshevD::usage = 
     "Maps a list of Chebyshev coefficients to those of its derivative."
 
ChebyshevLobattoIntegrate[Private`c_List] := 
    InverseDCT[ChebyshevI[DCT[Private`c]]]
 
ChebyshevLobattoIntegrate /: ChebyshevLobattoIntegrate::usage = "Maps a list \
of function values at Chebyshev points to those of its indefinite integral."
 
ChebyshevI[Private`c_List] := Module[{Private`c2}, 
     Private`c2 = ZeroVector[Length[Private`c] + 1]; 
      Private`c2[[2]] = Private`c[[1]]; Private`c2[[1]] = Private`c[[1]]; 
      If[Length[Private`c] > 1, Private`c2[[3]] = Private`c[[2]]/4; 
        Private`c2[[1]] = Private`c2[[1]] - Private`c[[2]]/4; 
        Table[Private`c2[[Private`k + 1]] = Private`c2[[Private`k + 1]] + 
            Private`c[[Private`k]]/(2*Private`k); 
          Private`c2[[Private`k - 1]] = Private`c2[[Private`k - 1]] - 
            Private`c[[Private`k]]/(2*(Private`k - 2)); Private`c2[[1]] = 
           Private`c2[[1]] + (-1)^Private`k*Private`c[[Private`k]]*
             (1/(2*(Private`k - 2)) - 1/(2*Private`k)); , 
         {Private`k, 3, Length[Private`c]}]]; Private`c2]
 
ChebyshevI /: ChebyshevI::usage = 
     "Maps a list of Chebyshev coefficients to those of its indefinite \
integral."
 
ZeroVector[Private`n_] := Table[0, {Private`n}]
 
ZeroVector /: ZeroVector::usage = 
     "ZeroVector[n] constructs a vector of length n of all zeros."
 
ComplexRoots[(Private`cf_IFun)?UnitIntervalFunQ] := 
    Module[{Private`dct}, Private`dct = RemoveZeros[Chop[DCT[Private`cf], 
         $MachineTolerance]]; Which[Length[Private`dct] <= 1, {}, 
       Length[Private`dct] == 2, {-(Private`dct[[1]]/Private`dct[[2]])}, 
       True, Eigenvalues[-PadLeft[{Most[Private`dct]/(2*Last[Private`dct])}, 
           {Length[Private`dct] - 1, Length[Private`dct] - 1}] + 
         SparseArray[{{1, 2} -> 1, {Private`i_, Private`j_} /; 
             Private`j == Private`i + 1 -> 0.5, {Private`i_, Private`j_} /; 
             Private`j == Private`i - 1 -> 0.5}, {Length[Private`dct] - 1, 
           Length[Private`dct] - 1}]]]]
 
ComplexRoots[Private`cf_IFun] := MapFromInterval[Private`cf, 
     ComplexRoots[ToUnitInterval[Private`cf]]]
 
ComplexRoots[Private`lf_LFun] := ComplexRoots[Domain[Private`lf], 
     ChopDrop[FFT[Private`lf], $MachineTolerance]]
 
ComplexRoots[Private`d_, (Private`fft_ShiftList)?(Length[#1] == 1 & )] := 
    Which[Index[Private`fft] == 1, {}, Index[Private`fft] > 1, Infinity, 
     True, 0]
 
ComplexRoots[Private`d_, (Private`fft_ShiftList)?(Length[#1] == 2 & )] := 
    Module[{Private`dct}, Private`dct = ToList[Private`fft]; 
      {-(Private`dct[[1]]/Private`dct[[2]])}]
 
ComplexRoots[Private`d_, Private`fft_ShiftList] := 
    Module[{Private`dct}, Private`dct = ToList[Private`fft]; 
      MapFromCircle[Private`d, Eigenvalues[
        N[Normal[Transpose[Join[Transpose[SparseArray[{Private`i_, 
                 Private`j_} /; Private`j == Private`i - 1 -> 1, 
              {Length[Private`dct] - 1, Length[Private`dct] - 2}]], 
            -({Most[Private`dct]}/Last[Private`dct])]]]]]]]
 
ComplexRoots /: ComplexRoots::usage = "Returns all roots"
 
UnitIntervalFunQ[Private`f_IFun] := N[Domain[Private`f]] === N[UnitInterval]
 
UnitIntervalFunQ[_] := False
 
UnitIntervalFunQ /: UnitIntervalFunQ::usage = 
     "Tests whether an object is an IFun whose domain is the unit interval."
 
ToUnitInterval[Private`lf_IFun] := SetDomain[Private`lf, UnitInterval]
 
ToUnitInterval /: ToUnitInterval::usage = 
     "ToUnitInterval[ifun] maps ifun to an IFun defined over the unit \
interval."
 
Endpoints[Private`GG_IFun] := {Chop[N[LeftEndpoint[Private`GG]]], 
      Chop[N[RightEndpoint[Private`GG]]]} /. _?InfinityQ -> Infinity
 
Endpoints[Private`GG_List] := Union[Flatten[Endpoints /@ Private`GG], 
     SameTest -> NEqual]
 
Endpoints /: Endpoints::usage = "Returns all endpoints of a list of funs"
 
Private`AdaptiveIFun[Private`m_Integer, Private`f_, Private`d_, 
     Private`pars:OptionsPattern[]] := Module[{Private`prec}, 
     Private`prec = InterpolationPrecision /. {Private`pars} /. 
        Options[Private`AdaptiveIFun]; 
      (IFun[Private`f, Private`d, Length[#1]] & )[
       (ChopDrop[#1, Private`prec*Max[$MachineTolerance, 
            Norm /@ Values[#1]]] & )[
        (If[Max[Abs[Flatten[DCT[#1][[-2 ;; -1]]]]] < Private`prec*
             Max[$MachineTolerance, Norm /@ Values[#1]], #1, 
           Private`AdaptiveIFun[2*Private`m, Private`f, Private`d, 
            Private`pars]] & )[IFun[Private`f, Private`d, Private`m]]]]]
 
Options[Private`AdaptiveIFun] := {InterpolationPrecision -> $MachineTolerance}
 
RHSolve[Private`GG_List, Private`GI_List, Private`opts:OptionsPattern[]] := 
    RHSolver[Private`GG, Private`opts][Private`GG, Private`GI]
 
RHSolve[Private`GG_List, Private`opts:OptionsPattern[]] := 
    RHSolve[Private`GG, ((#1 - IdentityMatrix[2] & ) /@ #1 & ) /@ Private`GG, 
     Private`opts]
 
RHSolve[(Private`GG_)?FunQ] := First[RHSolve[{Private`GG}]]
 
RHSolve /: RHSolve::usage = "RHSolve[ifunlist] returns u such that \
IdentityMatrix[2] + CauchyTransform[u,z] has the jumps specified by \
ifunlist."
 
RHSolver[Private`rsolvt_RHSolverTop][Private`GG_List, Private`GR_List] := 
    (ToArrayFun[Join[{ToArrayOfFuns[#1[[1]]]}, 
        {ToArrayOfFuns[#1[[2]]]}]] & ) /@ 
     Thread[Private`rsolvt[Private`GG, {(#1[[1,All]] & ) /@ Private`GR, 
        (#1[[2,All]] & ) /@ Private`GR}]]
 
RHSolver[Private`rsolvt_RHSolverTop][Private`GG_List] := 
    RHSolver[Private`rsolvt][Private`GG, 
     ((#1 - IdentityMatrix[2] & ) /@ #1 & ) /@ Private`GG]
 
RHSolver[Private`matm_, Private`opts:OptionsPattern[]][(Private`GG_)?FunQ] := 
    First[RHSolver[Private`matm, Private`opts][{Private`GG}]]
 
RHSolver[Private`matm_, Private`opts:OptionsPattern[]][(Private`GG_)?FunQ, 
     (Private`GR_)?FunQ] := First[RHSolver[Private`matm, Private`opts][
      {Private`GG}, {Private`GR}]]
 
RHSolver[Private`GGIn_List, Private`opts:OptionsPattern[]] := 
    Module[{Private`rsolvt}, Private`rsolvt = RHSolverTop[Private`GGIn, 
        Private`opts]; RHSolver[Private`rsolvt]]
 
RHSolver[(Private`GG_)?FunQ] := RHSolver[{Private`GG}]
 
RHSolver /: RHSolver::usage = "RHSolver[ifunlist] constructs an anonymous \
function R that precomputes the matrices used in RHSolve, so that if the \
domain and points of ifunlist are the same as ifunlist2, then R[ifunlist2] == \
RHSolve[ifunlist2]."
 
RHSolverTop[Private`matmS_, Private`opts:OptionsPattern[
        {SowCondition -> False, SparseSolve -> False}]][Private`GG_List, 
     Private`GR:{__List}] := Module[{Private`matt, Private`solv, Private`sol, 
      Private`cond, Private`matm}, 
     Private`matm = ScalarToVectorMatrix[Private`matmS]; 
      Private`matt = RHSolverMatrix[RHSolverTop[Private`matmS, Private`opts], 
        Private`GG]; If[OptionValue[SowCondition], 
       Private`cond = LinearAlgebra`MatrixConditionNumber[Private`matt]; 
        Sow[Private`cond]; ]; Private`solv = LinearSolve[
        If[OptionValue[SparseSolve], Private`matt, Normal[Private`matt]]]; 
      Private`sol = (FromValueList[#1, Private`solv[Private`MakeMachineNumber[
            ToValueList[#1]]]] & ) /@ Private`GR]
 
RHSolverTop[Private`matm_, Private`opts:OptionsPattern[]][Private`GG_List] := 
    RHSolverTop[Private`matm, Private`opts][Private`GG, 
     (#1[[1,All]] & ) /@ SubtractIdentityMatrix[Private`GG]]
 
RHSolverTop[Private`matm_, Private`opts:OptionsPattern[]][Private`GG_List, 
     Private`GR_List] := First[RHSolverTop[Private`matm, Private`opts][
      Private`GG, {Private`GR}]]
 
RHSolverTop[Private`matm_, Private`opts:OptionsPattern[]][
     (Private`GG_)?FunQ] := First[RHSolverTop[Private`matm, Private`opts][
      {Private`GG}]]
 
RHSolverTop[Private`matm_, Private`opts:OptionsPattern[]][(Private`GG_)?FunQ, 
     (Private`GR_)?FunQ] := First[RHSolverTop[Private`matm, Private`opts][
      {Private`GG}, {Private`GR}]]
 
RHSolverTop[Private`GGIn:{__?FunQ}, Private`opts:OptionsPattern[]] := 
    RHSolverTop[Private`MakeMachineNumber[CauchyMatrix[-1, 
       (#1[[1,1]] & ) /@ Private`GGIn]], Private`opts]
 
RHSolverTop[(Private`GG_)?FunQ] := RHSolverTop[{Private`GG}]
 
RHSolverTop /: RHSolverTop::usage = "RHSolverTop[ifunlist] constructs an \
anonymous function R that precomputes the matrices used in RHSolveTop, so \
that if the domain and points of ifunlist are the same as ifunlist2, then \
R[ifunlist2] == RHSolveTop[ifunlist2]."
 
SowCondition /: SowCondition::usage = "Option for RHSolve"
 
SparseSolve /: SparseSolve::usage = "Option for RHSolve"
 
RHSolverMatrix[Private`R_RHSolverTop, Private`GG_List] := 
    Module[{Private`matm}, Private`matm = ScalarToVectorMatrix[
        Private`R[[1]]]; Private`MakeMachineNumber[
       SparseIdentityMatrix[Length[Private`matm]] + 
        (SparseIdentityMatrix[Length[Private`matm]] - 
          Private`MakeMachineNumber[RightMatrixMultVectorFun[Private`GG]]) . 
         Private`matm]]
 
RHSolverMatrix[Private`R_RHSolverTop, (Private`GG_)?FunQ] := 
    RHSolverMatrix[Private`R, {Private`GG}]
 
RHSolverMatrix[Private`GG_] := RHSolverMatrix[RHSolverTop[Private`GG], 
     Private`GG]
 
Private`MakeMachineNumber[Private`x_] := N[Chop[Private`x, $MinMachineNumber]]
 
SparseIdentityMatrix[Private`n_] := SparseArray[{Private`i_, Private`i_} -> 
      1, {Private`n, Private`n}]
 
RightMatrixMultVectorFun[Private`G_List] := MatrixMultVectorFun[
     Transpose /@ Private`G]
 
MatrixMultVectorFun[Private`G_List] := Join @@ (RightJoin @@ #1 & ) /@ 
      MatrixMap[SparseDiagonalMatrix[ToValueList[#1]] & , 
       ToArrayOfListOfFuns[Private`G]]
 
RightJoin[Private`v__] := VectorTranspose[
     Join @@ VectorTranspose /@ {Private`v}]
 
VectorTranspose[(Private`f_)?MatrixQ] := Transpose[Private`f]
 
VectorTranspose[Private`f_] := Private`f
 
SparseDiagonalMatrix[Private`l_List] := Module[{Private`i}, 
     SparseArray[{Private`i_, Private`i_} :> Private`l[[Private`i]], 
      Length[Private`l]*{1, 1}]]
 
SubtractIdentityMatrix[(Private`l_)?FunQ] := (#1 - IdentityMatrix[2] & ) /@ 
     Private`l
 
SubtractIdentityMatrix[Private`l_List] := SubtractIdentityMatrix /@ Private`l
 
CauchyMatrix[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`lf_LFun)?ScalarFunQ, 
     (RiemannHilbert`Private`lf2_)?FunQ] := 
    Transpose[FiniteValues /@ FPCauchyBasis[RiemannHilbert`Private`s, 
        RiemannHilbert`Private`lf, Span @@ IndexRange[
          FFT[RiemannHilbert`Private`lf]], RiemannHilbert`Private`lf2]] . 
     FiniteTransformMatrix[RiemannHilbert`Private`lf]
 
CauchyMatrix[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_LFun] := CauchyMatrix[RiemannHilbert`Private`s, 
     RiemannHilbert`Private`f, RiemannHilbert`Private`f]
 
CauchyMatrix[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`lf_PFun)?ScalarFunQ, 
     (RiemannHilbert`Private`lf2_)?FunQ] := 
    Transpose[{FiniteValues[FPCauchyBasis[RiemannHilbert`Private`s, 
        RiemannHilbert`Private`lf, 1, RiemannHilbert`Private`lf2]]}]
 
CauchyMatrix[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_PFun] := CauchyMatrix[RiemannHilbert`Private`s, 
     RiemannHilbert`Private`f, RiemannHilbert`Private`f]
 
CauchyMatrix[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`f_IFun)?ScalarFunQ, (RiemannHilbert`Private`g_)?
      FunQ] := Transpose[FiniteValues /@ FPCauchyBasis[
        RiemannHilbert`Private`s, RiemannHilbert`Private`f, 
        1 ;; Length[RiemannHilbert`Private`f], RiemannHilbert`Private`g]] . 
     FiniteTransformMatrix[RiemannHilbert`Private`f]
 
CauchyMatrix[(Private`s_)?SignQ, (Private`f_)?VectorFunQ, 
     (Private`g_)?FunQ] := ScalarToVectorMatrix[CauchyMatrix[Private`s, 
      Private`f[[1]], Private`g]]
 
CauchyMatrix[(Private`s_)?SignQ, (Private`f_)?MatrixFunQ, 
     (Private`g_)?FunQ] := ScalarToMatrixMatrix[CauchyMatrix[Private`s, 
      Private`f[[1,1]], Private`g]]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?MatrixFunQ}, 
     (Private`g_)?FunQ] := ScalarToMatrixMatrix[CauchyMatrix[Private`s, 
      (#1[[1,1]] & ) /@ Private`l, Private`g]]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?MatrixFunQ}, 
     Private`l2_List] := ScalarToMatrixMatrix[CauchyMatrix[Private`s, 
      (#1[[1,1]] & ) /@ Private`l, Private`l2]]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?VectorFunQ}, 
     (Private`g_)?FunQ] := ScalarToVectorMatrix[CauchyMatrix[Private`s, 
      (#1[[1]] & ) /@ Private`l, Private`g]]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?VectorFunQ}, 
     Private`l2_List] := ScalarToVectorMatrix[CauchyMatrix[Private`s, 
      (#1[[1]] & ) /@ Private`l, Private`l2]]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?FunQ}, (Private`g_)?FunQ] := 
    RightJoin @@ (CauchyMatrix[Private`s, #1, Private`g] & ) /@ Private`l
 
CauchyMatrix[(Private`s_)?SignQ, Private`l:{__?FunQ}, 
     Private`l2:{__?FunQ}] := 
    Join @@ (CauchyMatrix[Private`s, Private`l, #1] & ) /@ Private`l2
 
CauchyMatrix[(Private`s_)?SignQ, (Private`f_)?FunQ] := 
    CauchyMatrix[Private`s, Private`f, Private`f]
 
CauchyMatrix[(Private`s_)?SignQ, Private`f:{__?FunQ}] := 
    CauchyMatrix[Private`s, Private`f, Private`f]
 
CauchyMatrix[(Private`s_)?SignQ, Private`l1:
      {{_?IntervalDomainQ, _Integer}..}, Private`l2:
      {{_?IntervalDomainQ, _Integer}..}] := CauchyMatrix[Private`s, 
     (IFun[Array[0 & , #1[[2]]], #1[[1]]] & ) /@ Private`l1, 
     (IFun[Array[0 & , #1[[2]]], #1[[1]]] & ) /@ Private`l2]
 
SignQ[-1] := True
 
SignQ[1] := True
 
SignQ[_] := False
 
SignQ /: SignQ::usage = "Test for whether a value is \[PlusMinus]1."
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      FunQ, RiemannHilbert`Private`k_, (RiemannHilbert`Private`g_)?FunQ] := 
    FPCauchyBasis[RiemannHilbert`Private`s, Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`g]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      CircleDomainQ, (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`j_), (RiemannHilbert`Private`lf_)?FunQ] := 
    (Fun[#1, Domain[RiemannHilbert`Private`lf]] & ) /@ 
     CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
      RiemannHilbert`Private`i ;; RiemannHilbert`Private`j, 
      Points[RiemannHilbert`Private`lf]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      PointDomainQ, 1, (RiemannHilbert`Private`lf_)?FunQ] := 
    Fun[CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 1, 
      Points[RiemannHilbert`Private`lf]], Domain[RiemannHilbert`Private`lf]]
 
FPCauchyBasis[1, Line[{-1, 1}], RiemannHilbert`Private`k_Integer, 
     (RiemannHilbert`Private`g_IFun)?UnitIntervalFunQ] := 
    IFun[Module[{RiemannHilbert`Private`j}, 
      Join[{First[LeftSingularityDataBasis[Plus[1], UnitInterval, 
          RiemannHilbert`Private`k]]}, 
       (-2*ArcTanh[IntervalToBottomCircle[
            Most[Rest[Points[RiemannHilbert`Private`g]]]]]*
          ChebyshevT[RiemannHilbert`Private`k - 1, 
           Most[Rest[Points[RiemannHilbert`Private`g]]]])/(I*Pi) + 
        Most[Rest[InverseDCT[HalfFirst[PadRight[
              (If[OddQ[RiemannHilbert`Private`k], Join[{0}, #1], #1] & )[4*
                Riffle[Reverse[Table[1/RiemannHilbert`Private`j, 
                   {RiemannHilbert`Private`j, 1., RiemannHilbert`Private`k - 
                     1, 2}]], 0]], Length[RiemannHilbert`Private`g]]]]/
           (2*I*Pi)]], {First[RightSingularityDataBasis[Plus[1], 
          UnitInterval, RiemannHilbert`Private`k]]}]], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[-1, Line[{-1, 1}], RiemannHilbert`Private`k_Integer, 
     (RiemannHilbert`Private`g_IFun)?UnitIntervalFunQ] := 
    IFun[Module[{RiemannHilbert`Private`j}, 
      Join[{First[LeftSingularityDataBasis[-1, UnitInterval, 
          RiemannHilbert`Private`k]]}, 
       (-2*ArcTanh[IntervalToTopCircle[Most[Rest[Points[
               RiemannHilbert`Private`g]]]]]*ChebyshevT[
           RiemannHilbert`Private`k - 1, 
           Most[Rest[Points[RiemannHilbert`Private`g]]]])/(I*Pi) + 
        Most[Rest[InverseDCT[HalfFirst[PadRight[
              (If[OddQ[RiemannHilbert`Private`k], Join[{0}, #1], #1] & )[4*
                Riffle[Reverse[Table[1/RiemannHilbert`Private`j, 
                   {RiemannHilbert`Private`j, 1., RiemannHilbert`Private`k - 
                     1, 2}]], 0]], Length[RiemannHilbert`Private`g]]]]/
           (2*I*Pi)]], {First[RightSingularityDataBasis[-1, UnitInterval, 
          RiemannHilbert`Private`k]]}]], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       RightEndpointInfinityQ, RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    IFun[(#1 + LeftSingularityDataBasis[UnitInterval, 
           RiemannHilbert`Private`k][[2]]*
         Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
            LeftEndpoint[RiemannHilbert`Private`f]]]]*BasisVector[Length[#1]][
          1] & )[Values[FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
         RiemannHilbert`Private`k, ToUnitInterval[
          RiemannHilbert`Private`g]]] - Values[FPCauchyBasis[
         RiemannHilbert`Private`s, UnitInterval, 1, ToUnitInterval[
          RiemannHilbert`Private`g]]] - 
       (1*(RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 1, 1.] + 
          RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 2, 1.]))/
        (I*Pi)], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       LeftEndpointInfinityQ, RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    IFun[(#1 + RightSingularityDataBasis[UnitInterval, 
           RiemannHilbert`Private`k][[2]]*
         Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, RightEndpoint[
             RiemannHilbert`Private`f]]]]*BasisVector[Length[#1]][-1] & )[
      Values[FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
         RiemannHilbert`Private`k, ToUnitInterval[
          RiemannHilbert`Private`g]]] + (-1)^RiemannHilbert`Private`k*
        Values[FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 1, 
          ToUnitInterval[RiemannHilbert`Private`g]]] + 
       ((-1)^RiemannHilbert`Private`k*(RiemannHilbert`Private`\[Mu][
           RiemannHilbert`Private`k - 1, -1.] + RiemannHilbert`Private`\[Mu][
           RiemannHilbert`Private`k - 2, -1.]))/(I*Pi)], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       DomainQ, RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    IFun[Values[FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
        RiemannHilbert`Private`k, ToUnitInterval[
         RiemannHilbert`Private`g]]] - CauchyBasis[UnitInterval, 
       RiemannHilbert`Private`k, MapToInterval[RiemannHilbert`Private`f, 
        Infinity]] + RightSingularityDataBasis[UnitInterval, 
         RiemannHilbert`Private`k][[2]]*
       Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
          RightEndpoint[RiemannHilbert`Private`f]]]]*
       BasisVector[Length[RiemannHilbert`Private`g]][-1] + 
      LeftSingularityDataBasis[UnitInterval, RiemannHilbert`Private`k][[2]]*
       Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
          LeftEndpoint[RiemannHilbert`Private`f]]]]*
       BasisVector[Length[RiemannHilbert`Private`g]][1], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !RightEndpointInfinityQ[#1] &&  !LeftEndpointInfinityQ[#1] & ), 
      RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       LeftEndpoint[RiemannHilbert`Private`g]] && 
      NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       RightEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Most[Rest[Points[RiemannHilbert`Private`g]]]], 
      {First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !RightEndpointInfinityQ[#1] &&  !LeftEndpointInfinityQ[#1] & ), 
      RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       RightEndpoint[RiemannHilbert`Private`g]] && 
      NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       LeftEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Most[Rest[Points[RiemannHilbert`Private`g]]]], 
      {First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?DomainQ, 
      RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`g_IFun)?
       RightEndpointInfinityQ] /; NEqual[RightEndpoint[
       RiemannHilbert`Private`f], LeftEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Most[Rest[Points[RiemannHilbert`Private`g]]]], {0}], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?DomainQ, 
      RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`g_IFun)?
       LeftEndpointInfinityQ] /; NEqual[LeftEndpoint[
       RiemannHilbert`Private`f], RightEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{0}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Rest[Most[Points[RiemannHilbert`Private`g]]]], 
      {First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?DomainQ, 
      RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`g_IFun)?
       LeftEndpointInfinityQ] /; NEqual[RightEndpoint[
       RiemannHilbert`Private`f], RightEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{0}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Rest[Most[Points[RiemannHilbert`Private`g]]]], 
      {First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?DomainQ, 
      RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`g_IFun)?
       RightEndpointInfinityQ] /; NEqual[LeftEndpoint[
       RiemannHilbert`Private`f], LeftEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, 
       Most[Rest[Points[RiemannHilbert`Private`g]]]], {0}], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !RightEndpointInfinityQ[#1] & ), RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, Rest[Points[RiemannHilbert`Private`g]]]], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !LeftEndpointInfinityQ[#1] & ), RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[CauchyBasis[RiemannHilbert`Private`f, RiemannHilbert`Private`k, 
       Most[Points[RiemannHilbert`Private`g]]], 
      {First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !RightEndpointInfinityQ[#1] & ), RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[CauchyBasis[RiemannHilbert`Private`f, RiemannHilbert`Private`k, 
       Most[Points[RiemannHilbert`Private`g]]], 
      {First[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, RightContourArg[
          RiemannHilbert`Private`g]]]}], Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       ( !LeftEndpointInfinityQ[#1] & ), RiemannHilbert`Private`k_Integer, 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    IFun[Join[{First[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         RiemannHilbert`Private`k, LeftContourArg[
          RiemannHilbert`Private`g]]]}, CauchyBasis[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`k, Rest[Points[RiemannHilbert`Private`g]]]], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?DomainQ, 
     RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`g_)?FunQ] := 
    ZeroAtInfinityFun[CauchyBasis[RiemannHilbert`Private`f, 
      RiemannHilbert`Private`k, FinitePoints[RiemannHilbert`Private`g]], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchyBasis[1, Line[{-1, 1}], 1 ;; (RiemannHilbert`Private`n_Integer), 
     (RiemannHilbert`Private`g_IFun)?UnitIntervalFunQ] := 
    Module[{RiemannHilbert`Private`mat, RiemannHilbert`Private`dctmat, 
      RiemannHilbert`Private`j, RiemannHilbert`Private`k}, 
     RiemannHilbert`Private`mat = ToeplitzMatrix[ZeroVector[
         RiemannHilbert`Private`n], 
        (Join[{0}, If[OddQ[RiemannHilbert`Private`n], Join[#1, {0}], #1]] & )[
         4*Riffle[Table[1/RiemannHilbert`Private`j, 
            {RiemannHilbert`Private`j, 1, RiemannHilbert`Private`n - 1, 2}], 
           0]]]; RiemannHilbert`Private`dctmat = 
       ColumnMap[InverseDCT[PadRight[HalfFirst[#1], 
           Length[RiemannHilbert`Private`g]]] & , 
        RiemannHilbert`Private`mat]; (IFun[#1, UnitInterval] & ) /@ 
       Transpose[Join[{Table[First[LeftSingularityDataBasis[Plus[1], 
             UnitInterval, RiemannHilbert`Private`k]], 
           {RiemannHilbert`Private`k, RiemannHilbert`Private`n}]}, 
         (-2*ArcTanh[IntervalToBottomCircle[Most[Rest[Points[
                 RiemannHilbert`Private`g]]]]]*ColumnMap[
             Most[Rest[InverseDCT[#1]]] & , IdentityMatrix[
              {Length[RiemannHilbert`Private`g], RiemannHilbert`Private`n}]])/
           (I*Pi) + ColumnMap[Most[Rest[#1]] & , 
            RiemannHilbert`Private`dctmat]/(2*I*Pi), 
         {Table[First[RightSingularityDataBasis[Plus[1], UnitInterval, 
             RiemannHilbert`Private`k]], {RiemannHilbert`Private`k, 
            RiemannHilbert`Private`n}]}]]]
 
FPCauchyBasis[-1, Line[{-1, 1}], 1 ;; (RiemannHilbert`Private`n_Integer), 
     (RiemannHilbert`Private`g_IFun)?UnitIntervalFunQ] := 
    Module[{RiemannHilbert`Private`mat, RiemannHilbert`Private`dctmat, 
      RiemannHilbert`Private`j, RiemannHilbert`Private`k}, 
     RiemannHilbert`Private`mat = ToeplitzMatrix[ZeroVector[
         RiemannHilbert`Private`n], 
        (Join[{0}, If[OddQ[RiemannHilbert`Private`n], Join[#1, {0}], #1]] & )[
         4*Riffle[Table[1/RiemannHilbert`Private`j, 
            {RiemannHilbert`Private`j, 1, RiemannHilbert`Private`n - 1, 2}], 
           0]]]; RiemannHilbert`Private`dctmat = 
       ColumnMap[InverseDCT[PadRight[HalfFirst[#1], 
           Length[RiemannHilbert`Private`g]]] & , 
        RiemannHilbert`Private`mat]; (IFun[#1, UnitInterval] & ) /@ 
       Transpose[Join[{Table[First[LeftSingularityDataBasis[-1, UnitInterval, 
             RiemannHilbert`Private`k]], {RiemannHilbert`Private`k, 
            RiemannHilbert`Private`n}]}, 
         (-2*ArcTanh[IntervalToTopCircle[Most[Rest[Points[
                 RiemannHilbert`Private`g]]]]]*ColumnMap[
             Most[Rest[InverseDCT[#1]]] & , IdentityMatrix[
              {Length[RiemannHilbert`Private`g], RiemannHilbert`Private`n}]])/
           (I*Pi) + ColumnMap[Most[Rest[#1]] & , 
            RiemannHilbert`Private`dctmat]/(2*I*Pi), 
         {Table[First[RightSingularityDataBasis[-1, UnitInterval, 
             RiemannHilbert`Private`k]], {RiemannHilbert`Private`k, 
            RiemannHilbert`Private`n}]}]]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
       Curve[_IFun], 1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    Module[{RiemannHilbert`Private`lD, RiemannHilbert`Private`rD, 
      RiemannHilbert`Private`pts, RiemannHilbert`Private`vals, 
      RiemannHilbert`Private`\[Psi]B}, 
     {RiemannHilbert`Private`lD, RiemannHilbert`Private`rD} = 
       MapToIntervalD[RiemannHilbert`Private`f, 
        {LeftEndpoint[RiemannHilbert`Private`f], RightEndpoint[
          RiemannHilbert`Private`f]}]; RiemannHilbert`Private`pts = 
       Function[RiemannHilbert`Private`pt, Select[RiemannHilbert`Private`pt, 
           !DomainMemberQ[UnitInterval, #1] & ]] /@ ComplexMapToInterval[
         RiemannHilbert`Private`f, Points[RiemannHilbert`Private`g]]; 
      (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
       (Values /@ FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
          1 ;; RiemannHilbert`Private`k, ToUnitInterval[
           RiemannHilbert`Private`g]] + MatrixMap[Total, 
         CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
          RiemannHilbert`Private`pts]] + 
        Array[RightSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[RiemannHilbert`Private`rD]]*
            BasisVector[Length[RiemannHilbert`Private`g]][-1] + 
           LeftSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[RiemannHilbert`Private`lD]]*
            BasisVector[Length[RiemannHilbert`Private`g]][1] & , 
         RiemannHilbert`Private`k])]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
       Curve[RiemannHilbert`Private`cf_IFun, Stretch -> 
         RiemannHilbert`Private`L_], 1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    Module[{RiemannHilbert`Private`lD, RiemannHilbert`Private`rD, 
      RiemannHilbert`Private`pts, RiemannHilbert`Private`vals, 
      RiemannHilbert`Private`\[Psi]B}, 
     {RiemannHilbert`Private`lD, RiemannHilbert`Private`rD} = 
       MapToIntervalD[RiemannHilbert`Private`f, 
        {LeftEndpoint[RiemannHilbert`Private`f], RightEndpoint[
          RiemannHilbert`Private`f]}]; RiemannHilbert`Private`pts = 
       Function[RiemannHilbert`Private`pt, Select[RiemannHilbert`Private`pt, 
           !DomainMemberQ[UnitInterval, #1] & ]] /@ ComplexMapToInterval[
         RiemannHilbert`Private`f, Points[RiemannHilbert`Private`g]]; 
      (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
       (Values /@ FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
          1 ;; RiemannHilbert`Private`k, ToUnitInterval[
           RiemannHilbert`Private`g]] + MatrixMap[Total, 
         CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
          RiemannHilbert`Private`pts]] + 
        Array[RightSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[RiemannHilbert`Private`rD]]*
            BasisVector[Length[RiemannHilbert`Private`g]][-1] + 
           LeftSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[RiemannHilbert`Private`lD]]*
            BasisVector[Length[RiemannHilbert`Private`g]][1] & , 
         RiemannHilbert`Private`k] - (Length[RiemannHilbert`Private`cf] - 1)*
         CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
          MapToInterval[Line[{-1, 1}, Stretch -> RiemannHilbert`Private`L], 
           Infinity]])]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       RightEndpointInfinityQ, 1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Function[RiemannHilbert`Private`mat, RiemannHilbert`Private`mat - 
        Array[RiemannHilbert`Private`mat[[1]] + 
           (1*(RiemannHilbert`Private`\[Mu][#1 - 1, 1.] + 
              RiemannHilbert`Private`\[Mu][#1 - 2, 1.]))/(I*Pi) - 
           LeftSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, LeftEndpoint[
                RiemannHilbert`Private`f]]]]*
            BasisVector[Length[RiemannHilbert`Private`g]][1] & , 
         RiemannHilbert`Private`k]][Values /@ FPCauchyBasis[
        RiemannHilbert`Private`s, UnitInterval, 
        1 ;; RiemannHilbert`Private`k, ToUnitInterval[
         RiemannHilbert`Private`g]]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       LeftEndpointInfinityQ, 1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Function[RiemannHilbert`Private`mat, RiemannHilbert`Private`mat + 
        Array[(-1)^#1*(RiemannHilbert`Private`mat[[1]] + 
             (1*(RiemannHilbert`Private`\[Mu][#1 - 1, -1.] + 
                RiemannHilbert`Private`\[Mu][#1 - 2, -1.]))/(I*Pi)) + 
           RightSingularityDataBasis[UnitInterval, #1][[2]]*
            Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, RightEndpoint[
                RiemannHilbert`Private`f]]]]*
            BasisVector[Length[RiemannHilbert`Private`g]][-1] & , 
         RiemannHilbert`Private`k]][Values /@ FPCauchyBasis[
        RiemannHilbert`Private`s, UnitInterval, 
        1 ;; RiemannHilbert`Private`k, ToUnitInterval[
         RiemannHilbert`Private`g]]]
 
FPCauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
       IntervalDomainQ, 1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; NEqual[RiemannHilbert`Private`f, 
      Domain[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     (Values /@ FPCauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
        1 ;; RiemannHilbert`Private`k, ToUnitInterval[
         RiemannHilbert`Private`g]] - CauchyBasis[UnitInterval, 
       1 ;; RiemannHilbert`Private`k, MapToInterval[RiemannHilbert`Private`f, 
        Infinity]] + Array[RightSingularityDataBasis[UnitInterval, #1][[2]]*
          Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, RightEndpoint[
              RiemannHilbert`Private`f]]]]*
          BasisVector[Length[RiemannHilbert`Private`g]][-1] + 
         LeftSingularityDataBasis[UnitInterval, #1][[2]]*
          Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, LeftEndpoint[
              RiemannHilbert`Private`f]]]]*
          BasisVector[Length[RiemannHilbert`Private`g]][1] & , 
       RiemannHilbert`Private`k])
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !RightEndpointInfinityQ[#1] && 
          !LeftEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       LeftEndpoint[RiemannHilbert`Private`g]] && 
      NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       RightEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ LeftSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Rest[Most[Points[RiemannHilbert`Private`g]]]]], 
       {First /@ RightSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !RightEndpointInfinityQ[#1] && 
          !LeftEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       RightEndpoint[RiemannHilbert`Private`g]] && 
      NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       LeftEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ RightSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Rest[Most[Points[RiemannHilbert`Private`g]]]]], 
       {First /@ LeftSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      (RiemannHilbert`Private`g_IFun)?RightEndpointInfinityQ] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ RightSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Rest[Points[RiemannHilbert`Private`g]]]]], 
       {ZeroVector[RiemannHilbert`Private`k]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      (RiemannHilbert`Private`g_IFun)?LeftEndpointInfinityQ] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{ZeroVector[RiemannHilbert`Private`k]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Rest[Points[RiemannHilbert`Private`g]]]]], 
       {First /@ LeftSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      (RiemannHilbert`Private`g_IFun)?LeftEndpointInfinityQ] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{ZeroVector[RiemannHilbert`Private`k]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Rest[Points[RiemannHilbert`Private`g]]]]], 
       {First /@ RightSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      (RiemannHilbert`Private`g_IFun)?RightEndpointInfinityQ] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ LeftSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Rest[Points[RiemannHilbert`Private`g]]]]], 
       {ZeroVector[RiemannHilbert`Private`k]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !RightEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Points[RiemannHilbert`Private`g]]]], 
       {First /@ RightSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !RightEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ RightSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Rest[Points[RiemannHilbert`Private`g]]]]]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !LeftEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      RightEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Most[Points[RiemannHilbert`Private`g]]]], 
       {First /@ LeftSingularityDataBasis[RiemannHilbert`Private`f, 
          1 ;; RiemannHilbert`Private`k, RightContourArg[
           RiemannHilbert`Private`g]]}]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?
       (IntervalDomainQ[#1] &&  !LeftEndpointInfinityQ[#1] & ), 
      1 ;; (RiemannHilbert`Private`k_Integer), 
      RiemannHilbert`Private`g_IFun] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      LeftEndpoint[RiemannHilbert`Private`g]] := 
    (IFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     Transpose[Join[{First /@ LeftSingularityDataBasis[
          RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
          LeftContourArg[RiemannHilbert`Private`g]]}, 
       Transpose[CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; RiemannHilbert`Private`k, 
         Rest[Points[RiemannHilbert`Private`g]]]]]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer), (RiemannHilbert`Private`g_IFun)?
      LeftEndpointInfinityQ] := 
    (ZeroAtInfinityIFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     CauchyBasis[RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
      Rest[Points[RiemannHilbert`Private`g]]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer), (RiemannHilbert`Private`g_IFun)?
      RightEndpointInfinityQ] := 
    (ZeroAtInfinityIFun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     CauchyBasis[RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
      Most[Points[RiemannHilbert`Private`g]]]
 
FPCauchyBasis[_?SignQ, (RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer), (RiemannHilbert`Private`g_)?
      FunQ] := (Fun[#1, Domain[RiemannHilbert`Private`g]] & ) /@ 
     CauchyBasis[RiemannHilbert`Private`f, 1 ;; RiemannHilbert`Private`k, 
      Points[RiemannHilbert`Private`g]]
 
CauchyBasis[_?SignQ, _Integer, _?InfinityQ] := 0
 
CauchyBasis[(RiemannHilbert`Private`f_)?FunQ, RiemannHilbert`Private`k_, 
     RiemannHilbert`Private`x_] := CauchyBasis[
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k, 
     RiemannHilbert`Private`x]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      FunQ, RiemannHilbert`Private`k_, RiemannHilbert`Private`x_] := 
    CauchyBasis[RiemannHilbert`Private`s, Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`x]
 
CauchyBasis[(RiemannHilbert`Private`d_)?CircleDomainQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_List] := 
    (CauchyBasis[RiemannHilbert`Private`d, RiemannHilbert`Private`k, 
       #1] & ) /@ RiemannHilbert`Private`z
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      CircleDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_List] := 
    (CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
       RiemannHilbert`Private`k, #1] & ) /@ RiemannHilbert`Private`z
 
CauchyBasis[Circle[0, 1], RiemannHilbert`Private`k_Integer, 
     (RiemannHilbert`Private`z_)?(Abs[#1] <= 1. & )] := 
    CauchyBasisS[Plus[1], UnitCircle, RiemannHilbert`Private`k, 
     RiemannHilbert`Private`z]
 
CauchyBasis[Circle[0, 1], RiemannHilbert`Private`k_Integer, 
     (RiemannHilbert`Private`z_)?(Abs[#1] > 1. & )] := 
    CauchyBasisS[-1, UnitCircle, RiemannHilbert`Private`k, 
     RiemannHilbert`Private`z]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, Circle[0, 1], 
     RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`z_)?
      (DomainMemberQ[UnitCircle, #1] & )] := 
    CauchyBasisS[RiemannHilbert`Private`s, UnitCircle, 
     RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, Circle[0, 1], 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
     RiemannHilbert`Private`z]
 
CauchyBasis[RiemannHilbert`Private`d:Curve[_LFun], 0, 
     RiemannHilbert`Private`z_] := 
    Total[CauchyBasis[UnitCircle, 0, ComplexMapToCircle[
        RiemannHilbert`Private`d, RiemannHilbert`Private`z]]] - 
     Total[CauchyBasis[UnitCircle, 0, ComplexMapToCircle[
        RiemannHilbert`Private`d, 10^18]]]
 
CauchyBasis[RiemannHilbert`Private`d:Curve[_LFun], 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    Total[CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
      ComplexMapToCircle[RiemannHilbert`Private`d, RiemannHilbert`Private`z]]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`d:
      Curve[_LFun], 0, RiemannHilbert`Private`z_] := 
    Total[CauchyBasis[RiemannHilbert`Private`s, UnitCircle, 0, 
       ComplexMapToCircle[RiemannHilbert`Private`d, 
        RiemannHilbert`Private`z]]] - Total[CauchyBasis[UnitCircle, 0, 
       ComplexMapToCircle[RiemannHilbert`Private`d, 10^18]]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`d:
      Curve[_LFun], RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := 
    Total[CauchyBasis[RiemannHilbert`Private`s, UnitCircle, 
      RiemannHilbert`Private`k, ComplexMapToCircle[RiemannHilbert`Private`d, 
       RiemannHilbert`Private`z]]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`d:
      Curve[_LFun], (RiemannHilbert`Private`i_Integer) ;; 
      (RiemannHilbert`Private`j_Integer), RiemannHilbert`Private`z_List] := 
    Transpose[(Total /@ CauchyBasis[RiemannHilbert`Private`s, UnitCircle, 
          RiemannHilbert`Private`i ;; RiemannHilbert`Private`j, #1] & ) /@ 
       ComplexMapToCircle[RiemannHilbert`Private`d, 
        RiemannHilbert`Private`z]] - 
     Count[ComplexMapToCircle[RiemannHilbert`Private`d, 10^18], 
       _?(Abs[#1] < 1 & )]*ToList[BasisShiftList[RiemannHilbert`Private`i ;; 
         RiemannHilbert`Private`j, 0]]
 
CauchyBasis[(RiemannHilbert`Private`f_)?CircleDomainQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
      MapToCircle[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
      MapToCircle[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      CircleDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasis[RiemannHilbert`Private`s, 
      UnitCircle, RiemannHilbert`Private`k, MapToCircle[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
      MapToCircle[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`d_)?CircleDomainQ, 
     (RiemannHilbert`Private`i_) ;; (RiemannHilbert`Private`j_), 
     RiemannHilbert`Private`z_] := Module[{RiemannHilbert`Private`k}, 
     Table[CauchyBasis[RiemannHilbert`Private`d, RiemannHilbert`Private`k, 
       RiemannHilbert`Private`z], {RiemannHilbert`Private`k, 
       RiemannHilbert`Private`i, RiemannHilbert`Private`j}]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      CircleDomainQ, (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`j_), RiemannHilbert`Private`z_] := 
    Module[{RiemannHilbert`Private`k}, 
     Table[CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
       RiemannHilbert`Private`k, RiemannHilbert`Private`z], 
      {RiemannHilbert`Private`k, RiemannHilbert`Private`i, 
       RiemannHilbert`Private`j}]]
 
CauchyBasis[(RiemannHilbert`Private`d_)?PointDomainQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_List] := 
    (CauchyBasis[RiemannHilbert`Private`d, RiemannHilbert`Private`k, 
       #1] & ) /@ RiemannHilbert`Private`z
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      PointDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_List] := 
    (CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
       RiemannHilbert`Private`k, #1] & ) /@ RiemannHilbert`Private`z
 
CauchyBasis[Point[0], RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := -(1/(2*Pi*I*RiemannHilbert`Private`z))
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, Point[0], 
     RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`z_)?
      (DomainMemberQ[UnitPoint, #1] & )] := 
    CauchyBasisS[RiemannHilbert`Private`s, UnitPoint, 
     RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, Point[0], 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitPoint, RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyBasis[(RiemannHilbert`Private`f_)?PointDomainQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitPoint, RiemannHilbert`Private`k, 
     MapToPoint[RiemannHilbert`Private`f, RiemannHilbert`Private`z]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      PointDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasis[RiemannHilbert`Private`s, 
     UnitPoint, RiemannHilbert`Private`k, 
     MapToPoint[RiemannHilbert`Private`f, RiemannHilbert`Private`z]]
 
CauchyBasis[Line[{-1, 1}], RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`x_] := 
    -((\[Psi]p[RiemannHilbert`Private`k - 1, IntervalToInnerCircle[
         RiemannHilbert`Private`x]] + \[Psi]p[-RiemannHilbert`Private`k + 1, 
        IntervalToInnerCircle[RiemannHilbert`Private`x]])/(I*Pi))
 
CauchyBasis[1, Line[{-1, 1}], RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`x_] := 
    -((\[Psi]p[RiemannHilbert`Private`k - 1, IntervalToBottomCircle[
         RiemannHilbert`Private`x]] + \[Psi]p[-RiemannHilbert`Private`k + 1, 
        IntervalToBottomCircle[RiemannHilbert`Private`x]])/(I*Pi))
 
CauchyBasis[-1, Line[{-1, 1}], RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`x_] := 
    -((\[Psi]p[RiemannHilbert`Private`k - 1, IntervalToTopCircle[
         RiemannHilbert`Private`x]] + \[Psi]p[-RiemannHilbert`Private`k + 1, 
        IntervalToTopCircle[RiemannHilbert`Private`x]])/(I*Pi))
 
CauchyBasis[(RiemannHilbert`Private`f_)?RightEndpointInfinityQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitInterval, 1, MapToInterval[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`z]] - 
     (1*(RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 1, 1.] + 
        RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 2, 1.]))/
      (I*Pi)
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      RightEndpointInfinityQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasis[RiemannHilbert`Private`s, 
      UnitInterval, RiemannHilbert`Private`k, MapToInterval[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[RiemannHilbert`Private`s, UnitInterval, 1, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     (1*(RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 1, 1.] + 
        RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 2, 1.]))/
      (I*Pi)
 
CauchyBasis[(RiemannHilbert`Private`f_)?LeftEndpointInfinityQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] + 
     (-1)^RiemannHilbert`Private`k*CauchyBasis[UnitInterval, 1, 
       MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] + 
     ((-1)^RiemannHilbert`Private`k*(RiemannHilbert`Private`\[Mu][
         RiemannHilbert`Private`k - 1, -1.] + RiemannHilbert`Private`\[Mu][
         RiemannHilbert`Private`k - 2, -1.]))/(I*Pi)
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      LeftEndpointInfinityQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasis[RiemannHilbert`Private`s, 
      UnitInterval, RiemannHilbert`Private`k, MapToInterval[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]] + 
     (-1)^RiemannHilbert`Private`k*CauchyBasis[RiemannHilbert`Private`s, 
       UnitInterval, 1, MapToInterval[RiemannHilbert`Private`f, 
        RiemannHilbert`Private`z]] + ((-1)^RiemannHilbert`Private`k*
       (RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 1, -1.] + 
        RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 2, -1.]))/
      (I*Pi)
 
CauchyBasis[(RiemannHilbert`Private`f_)?IntervalDomainQ, 
     RiemannHilbert`Private`k_Integer, RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      IntervalDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasis[RiemannHilbert`Private`s, 
      UnitInterval, RiemannHilbert`Private`k, MapToInterval[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasis[Line[{-1, 1}], (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`k_), RiemannHilbert`Private`x_] := 
    -((RiemannHilbert`Private`\[Psi]pL[RiemannHilbert`Private`i - 1 ;; 
         RiemannHilbert`Private`k - 1, IntervalToInnerCircle[
         RiemannHilbert`Private`x]] + Reverse[RiemannHilbert`Private`\[Psi]pL[
         -RiemannHilbert`Private`k + 1 ;; 1 - RiemannHilbert`Private`i, 
         IntervalToInnerCircle[RiemannHilbert`Private`x]]])/(I*Pi))
 
CauchyBasis[RiemannHilbert`Private`f:Curve[_IFun], 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_List] := 
    MatrixMap[Total, CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      ComplexMapToInterval[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`z]]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
      Curve[_IFun], 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_List] := MatrixMap[Total, 
     CauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
      1 ;; RiemannHilbert`Private`k, ComplexMapToInterval[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]]]
 
CauchyBasis[RiemannHilbert`Private`f:Curve[_IFun], 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_] := 
    Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      ComplexMapToInterval[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`z]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
      Curve[_IFun], 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_] := 
    Total /@ CauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
      1 ;; RiemannHilbert`Private`k, ComplexMapToInterval[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]]
 
CauchyBasis[RiemannHilbert`Private`cr:Curve[RiemannHilbert`Private`cf_IFun, 
       Stretch -> RiemannHilbert`Private`L_], 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_List] := 
    MatrixMap[Total, CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
       ComplexMapToInterval[RiemannHilbert`Private`cr, 
        RiemannHilbert`Private`z]]] - (Length[RiemannHilbert`Private`cf] - 1)*
      CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
       MapToInterval[Line[{-1, 1}, Stretch -> RiemannHilbert`Private`L], 
        Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`cr:
      Curve[RiemannHilbert`Private`cf_IFun, Stretch -> 
        RiemannHilbert`Private`L_], 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_List] := 
    MatrixMap[Total, CauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
       1 ;; RiemannHilbert`Private`k, ComplexMapToInterval[
        RiemannHilbert`Private`cr, RiemannHilbert`Private`z]]] - 
     (Length[RiemannHilbert`Private`cf] - 1)*CauchyBasis[UnitInterval, 
       1 ;; RiemannHilbert`Private`k, MapToInterval[Line[{-1, 1}, 
         Stretch -> RiemannHilbert`Private`L], Infinity]]
 
CauchyBasis[RiemannHilbert`Private`cr:Curve[RiemannHilbert`Private`cf_IFun, 
       Stretch -> RiemannHilbert`Private`L_], 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_] := 
    Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
       ComplexMapToInterval[RiemannHilbert`Private`cr, 
        RiemannHilbert`Private`z]] - (Length[RiemannHilbert`Private`cf] - 1)*
      CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
       MapToInterval[Line[{-1, 1}, Stretch -> RiemannHilbert`Private`L], 
        Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`cr:
      Curve[RiemannHilbert`Private`cf_IFun, Stretch -> 
        RiemannHilbert`Private`L_], 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_] := 
    Total /@ CauchyBasis[RiemannHilbert`Private`s, UnitInterval, 
       1 ;; RiemannHilbert`Private`k, ComplexMapToInterval[
        RiemannHilbert`Private`cr, RiemannHilbert`Private`z]] - 
     (Length[RiemannHilbert`Private`cf] - 1)*CauchyBasis[UnitInterval, 
       1 ;; RiemannHilbert`Private`k, MapToInterval[Line[{-1, 1}, 
         Stretch -> RiemannHilbert`Private`L], Infinity]]
 
CauchyBasis[(RiemannHilbert`Private`f_)?RightEndpointInfinityQ, 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_] := 
    Function[RiemannHilbert`Private`mat, RiemannHilbert`Private`mat - 
       Array[RiemannHilbert`Private`mat[[1]] + 
          (1*(RiemannHilbert`Private`\[Mu][#1 - 1, 1.] + 
             RiemannHilbert`Private`\[Mu][#1 - 2, 1.]))/(I*Pi) & , 
        RiemannHilbert`Private`k]][CauchyBasis[UnitInterval, 
      1 ;; RiemannHilbert`Private`k, MapToInterval[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`z]]]
 
CauchyBasis[(RiemannHilbert`Private`f_)?LeftEndpointInfinityQ, 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_] := 
    Function[RiemannHilbert`Private`mat, RiemannHilbert`Private`mat + 
       Array[(-1)^#1*(RiemannHilbert`Private`mat[[1]] + 
           (1*(RiemannHilbert`Private`\[Mu][#1 - 1, -1.] + 
              RiemannHilbert`Private`\[Mu][#1 - 2, -1.]))/(I*Pi)) & , 
        RiemannHilbert`Private`k]][CauchyBasis[UnitInterval, 
      1 ;; RiemannHilbert`Private`k, MapToInterval[RiemannHilbert`Private`f, 
       RiemannHilbert`Private`z]]]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      DomainQ, RiemannHilbert`Private`k_, (RiemannHilbert`Private`x_)?
      MatrixQ] := Transpose[(CauchyBasis[RiemannHilbert`Private`s, 
        RiemannHilbert`Private`d, RiemannHilbert`Private`k, #1] & ) /@ 
      RiemannHilbert`Private`x]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      DomainQ, RiemannHilbert`Private`k_, RiemannHilbert`Private`x_List] := 
    RightJoin @@ (If[DomainMemberQ[RiemannHilbert`Private`d, First[#1]], 
        CauchyBasisS[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
         RiemannHilbert`Private`k, #1], CauchyBasis[RiemannHilbert`Private`d, 
         RiemannHilbert`Private`k, #1]] & ) /@ 
      SplitBy[RiemannHilbert`Private`x, 
       DomainMemberQ[RiemannHilbert`Private`d, #1] & ]
 
CauchyBasis[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
       DomainQ, RiemannHilbert`Private`k_, RiemannHilbert`Private`x_] /; 
     DomainMemberQ[RiemannHilbert`Private`d, RiemannHilbert`Private`x] := 
    CauchyBasisS[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
     RiemannHilbert`Private`k, RiemannHilbert`Private`x]
 
CauchyBasis[_?SignQ, (RiemannHilbert`Private`d_)?IntervalDomainQ, 
     RiemannHilbert`Private`k_, RiemannHilbert`Private`x_] := 
    CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
     RiemannHilbert`Private`x]
 
CauchyBasis[(RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_), RiemannHilbert`Private`z_] := 
    CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasisS[_?SignQ, _, _Integer, _?InfinityQ] := 0
 
CauchyBasisS[(RiemannHilbert`Private`f_)?FunQ, RiemannHilbert`Private`k_, 
     RiemannHilbert`Private`x_] := CauchyBasisS[
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k, 
     RiemannHilbert`Private`x]
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      FunQ, RiemannHilbert`Private`k_, RiemannHilbert`Private`x_] := 
    CauchyBasisS[RiemannHilbert`Private`s, Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`x]
 
CauchyBasisS[1, Circle[0, 1], (RiemannHilbert`Private`k_)?Negative, 
     RiemannHilbert`Private`z_] := 0*RiemannHilbert`Private`z
 
CauchyBasisS[-1, Circle[0, 1], (RiemannHilbert`Private`k_)?Negative, 
     RiemannHilbert`Private`z_] := -RiemannHilbert`Private`z^
      RiemannHilbert`Private`k
 
CauchyBasisS[1, Circle[0, 1], 0, RiemannHilbert`Private`z_List] := 
    OneVector[Length[RiemannHilbert`Private`z]]
 
CauchyBasisS[1, Circle[0, 1], 0, RiemannHilbert`Private`z_] := 1
 
CauchyBasisS[1, Circle[0, 1], (RiemannHilbert`Private`k_)?NonNegative, 
     RiemannHilbert`Private`z_] := RiemannHilbert`Private`z^
     RiemannHilbert`Private`k
 
CauchyBasisS[-1, Circle[0, 1], (RiemannHilbert`Private`k_)?NonNegative, 
     RiemannHilbert`Private`z_] := 0*RiemannHilbert`Private`z
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      CircleDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasisS[RiemannHilbert`Private`s, 
      UnitCircle, RiemannHilbert`Private`k, MapToCircle[
       RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitCircle, RiemannHilbert`Private`k, 
      MapToCircle[RiemannHilbert`Private`f, Infinity]]
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`d_)?
      CircleDomainQ, (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`j_), RiemannHilbert`Private`z_] := 
    Module[{RiemannHilbert`Private`k}, 
     Table[CauchyBasisS[RiemannHilbert`Private`s, RiemannHilbert`Private`d, 
       RiemannHilbert`Private`k, RiemannHilbert`Private`z], 
      {RiemannHilbert`Private`k, RiemannHilbert`Private`i, 
       RiemannHilbert`Private`j}]]
 
CauchyBasisS[1, Point[0], 1, RiemannHilbert`Private`z_] := 1/2
 
CauchyBasisS[-1, Point[0], 1, RiemannHilbert`Private`z_] := -2^(-1)
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      PointDomainQ, RiemannHilbert`Private`k_Integer, 
     RiemannHilbert`Private`z_] := CauchyBasisS[RiemannHilbert`Private`s, 
     UnitPoint, RiemannHilbert`Private`k, 
     MapToPoint[RiemannHilbert`Private`f, RiemannHilbert`Private`z]]
 
CauchyBasisS[1, Line[{-1, 1}], (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`k_), RiemannHilbert`Private`x_] := 
    -((RiemannHilbert`Private`\[Psi]pL[RiemannHilbert`Private`i - 1 ;; 
         RiemannHilbert`Private`k - 1, IntervalToBottomCircle[
         RiemannHilbert`Private`x]] + Reverse[RiemannHilbert`Private`\[Psi]pL[
         -RiemannHilbert`Private`k + 1 ;; 1 - RiemannHilbert`Private`i, 
         IntervalToBottomCircle[RiemannHilbert`Private`x]]])/(I*Pi))
 
CauchyBasisS[-1, Line[{-1, 1}], (RiemannHilbert`Private`i_) ;; 
      (RiemannHilbert`Private`k_), RiemannHilbert`Private`x_] := 
    -((RiemannHilbert`Private`\[Psi]pL[RiemannHilbert`Private`i - 1 ;; 
         RiemannHilbert`Private`k - 1, IntervalToTopCircle[
         RiemannHilbert`Private`x]] + Reverse[RiemannHilbert`Private`\[Psi]pL[
         -RiemannHilbert`Private`k + 1 ;; 1 - RiemannHilbert`Private`i, 
         IntervalToTopCircle[RiemannHilbert`Private`x]]])/(I*Pi))
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      RightEndpointInfinityQ, 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_] := Function[RiemannHilbert`Private`mat, 
      RiemannHilbert`Private`mat - Array[RiemannHilbert`Private`mat[[1]] + 
          (1*(RiemannHilbert`Private`\[Mu][#1 - 1, 1.] + 
             RiemannHilbert`Private`\[Mu][#1 - 2, 1.]))/(I*Pi) & , 
        RiemannHilbert`Private`k]][CauchyBasisS[RiemannHilbert`Private`s, 
      UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]]]
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      LeftEndpointInfinityQ, 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_] := Function[RiemannHilbert`Private`mat, 
      RiemannHilbert`Private`mat + 
       Array[(-1)^#1*(RiemannHilbert`Private`mat[[1]] + 
           (1*(RiemannHilbert`Private`\[Mu][#1 - 1, -1.] + 
              RiemannHilbert`Private`\[Mu][#1 - 2, -1.]))/(I*Pi)) & , 
        RiemannHilbert`Private`k]][CauchyBasisS[RiemannHilbert`Private`s, 
      UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]]]
 
CauchyBasisS[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_)?
      IntervalDomainQ, 1 ;; (RiemannHilbert`Private`k_), 
     RiemannHilbert`Private`z_] := CauchyBasisS[RiemannHilbert`Private`s, 
      UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, RiemannHilbert`Private`z]] - 
     CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`k, 
      MapToInterval[RiemannHilbert`Private`f, Infinity]]
 
UnitPoint = Point[0]
 
MapToPoint[Private`f_PFun, Private`z_] := MapToPoint[Domain[Private`f], 
     Private`z]
 
MapToPoint[Point[Private`z0_], Private`z_] := Private`z - Private`z0
 
RiemannHilbert`Private`\[Psi]pL[(RiemannHilbert`Private`i_)?Negative ;; 
      (RiemannHilbert`Private`j_)?Negative, RiemannHilbert`Private`x_] := 
    Module[{RiemannHilbert`Private`cur, RiemannHilbert`Private`k}, 
     Join[{RiemannHilbert`Private`cur = \[Psi]p[RiemannHilbert`Private`i, 
         RiemannHilbert`Private`x]}, 
      Table[If[EvenQ[RiemannHilbert`Private`k], RiemannHilbert`Private`cur = 
         RiemannHilbert`Private`cur*RiemannHilbert`Private`x, 
        RiemannHilbert`Private`cur = RiemannHilbert`Private`cur*
           RiemannHilbert`Private`x - 1/RiemannHilbert`Private`k], 
       {RiemannHilbert`Private`k, RiemannHilbert`Private`i + 1, 
        RiemannHilbert`Private`j}]]]
 
RiemannHilbert`Private`\[Psi]pL[(RiemannHilbert`Private`i_)?Positive ;; 
      (RiemannHilbert`Private`j_)?Positive, RiemannHilbert`Private`x_] := 
    Module[{RiemannHilbert`Private`cur, RiemannHilbert`Private`k}, 
     Join[{RiemannHilbert`Private`cur = \[Psi]p[RiemannHilbert`Private`i, 
         RiemannHilbert`Private`x]}, 
      Table[If[EvenQ[RiemannHilbert`Private`k], RiemannHilbert`Private`cur = 
         RiemannHilbert`Private`cur*RiemannHilbert`Private`x, 
        RiemannHilbert`Private`cur = RiemannHilbert`Private`cur*
           RiemannHilbert`Private`x - 1/RiemannHilbert`Private`k], 
       {RiemannHilbert`Private`k, RiemannHilbert`Private`i + 1, 
        RiemannHilbert`Private`j}]]]
 
RiemannHilbert`Private`\[Psi]pL[0 ;; (RiemannHilbert`Private`j_)?Positive, 
     RiemannHilbert`Private`x_] := 
    Join[{\[Psi]p[0, RiemannHilbert`Private`x]}, 
     RiemannHilbert`Private`\[Psi]pL[1 ;; RiemannHilbert`Private`j, 
      RiemannHilbert`Private`x]]
 
RiemannHilbert`Private`\[Psi]pL[(RiemannHilbert`Private`i_)?Negative ;; 0, 
     RiemannHilbert`Private`x_] := Join[RiemannHilbert`Private`\[Psi]pL[
      RiemannHilbert`Private`i ;; -1, RiemannHilbert`Private`x], 
     {\[Psi]p[0, RiemannHilbert`Private`x]}]
 
RiemannHilbert`Private`\[Psi]pL[(RiemannHilbert`Private`i_)?Negative ;; 
      (RiemannHilbert`Private`j_)?Positive, RiemannHilbert`Private`x_] := 
    Join[RiemannHilbert`Private`\[Psi]pL[RiemannHilbert`Private`i ;; -1, 
      RiemannHilbert`Private`x], {\[Psi]p[0, RiemannHilbert`Private`x]}, 
     RiemannHilbert`Private`\[Psi]pL[1 ;; RiemannHilbert`Private`j, 
      RiemannHilbert`Private`x]]
 
Attributes[\[Psi]p] = {Listable}
 
\[Psi]p[0, RiemannHilbert`Private`z_] := N[ArcTanh[RiemannHilbert`Private`z]]
 
\[Psi]p[(RiemannHilbert`Private`n_)?EvenQ, (RiemannHilbert`Private`z_)?
      ZeroQ] := 0.
 
\[Psi]p[(RiemannHilbert`Private`n_)?OddQ, (RiemannHilbert`Private`z_)?
      ZeroQ] := N[-(1/RiemannHilbert`Private`n)]
 
\[Psi]p[(RiemannHilbert`Private`n_)?Positive, RiemannHilbert`Private`z_] := 
    N[RiemannHilbert`Private`\[Psi]pS[RiemannHilbert`Private`n, 
      N[RiemannHilbert`Private`z]]]
 
\[Psi]p[(RiemannHilbert`Private`n_)?Negative, RiemannHilbert`Private`z_] := 
    N[RiemannHilbert`Private`\[Psi]pH[RiemannHilbert`Private`n, 
      N[RiemannHilbert`Private`z]]]
 
Attributes[RiemannHilbert`Private`\[Psi]pS] = {Listable}
 
RiemannHilbert`Private`\[Psi]pS[0, RiemannHilbert`Private`z_] := 
    ArcTanh[RiemannHilbert`Private`z]
 
RiemannHilbert`Private`\[Psi]pS[(RiemannHilbert`Private`n_)?Positive, 
     RiemannHilbert`Private`z_] := RiemannHilbert`Private`z^
      RiemannHilbert`Private`n*(ArcTanh[RiemannHilbert`Private`z] - 
      RiemannHilbert`Private`\[Mu]S[RiemannHilbert`Private`n, 
       1/RiemannHilbert`Private`z])
 
RiemannHilbert`Private`\[Psi]pS[(RiemannHilbert`Private`n_)?Negative, 
     RiemannHilbert`Private`z_] := RiemannHilbert`Private`z^
      RiemannHilbert`Private`n*(ArcTanh[RiemannHilbert`Private`z] - 
      RiemannHilbert`Private`\[Mu]S[-RiemannHilbert`Private`n - 1, 
       RiemannHilbert`Private`z])
 
RiemannHilbert`Private`\[Psi]pS[(RiemannHilbert`Private`n_)?EvenQ, 
     (RiemannHilbert`Private`z_)?ZeroQ] := 0.
 
RiemannHilbert`Private`\[Psi]pS[(RiemannHilbert`Private`n_)?OddQ, 
     (RiemannHilbert`Private`z_)?ZeroQ] := N[-(1/RiemannHilbert`Private`n)]
 
RiemannHilbert`Private`\[Mu]S[RiemannHilbert`Private`n_, 
     RiemannHilbert`Private`z_] := RiemannHilbert`Private`\[Mu]ms[
     Floor[(RiemannHilbert`Private`n + 1)/2], RiemannHilbert`Private`z]
 
RiemannHilbert`Private`\[Mu]ms[RiemannHilbert`Private`m_, 
     RiemannHilbert`Private`z_] := 
    Sum[RiemannHilbert`Private`z^(2*RiemannHilbert`Private`j - 1)/
      (2*RiemannHilbert`Private`j - 1), {RiemannHilbert`Private`j, 1, 
      RiemannHilbert`Private`m}]
 
RiemannHilbert`Private`\[Psi]pH[(RiemannHilbert`Private`n_)?Negative, 
     RiemannHilbert`Private`z_] := 
    With[{RiemannHilbert`Private`M = Floor[-RiemannHilbert`Private`n/2]}, 
     (RiemannHilbert`Private`z^(RiemannHilbert`Private`n + 1 + 
          2*RiemannHilbert`Private`M)*1*Hypergeometric2F1[1, 1, 
         3/2 + RiemannHilbert`Private`M, RiemannHilbert`Private`z^2/
          (RiemannHilbert`Private`z^2 - 1)])/(1 - RiemannHilbert`Private`z^2)/
      (1 + 2*RiemannHilbert`Private`M)]
 
RiemannHilbert`Private`\[Psi]pH[(RiemannHilbert`Private`n_)?Positive, 
     RiemannHilbert`Private`z_] := 
    With[{RiemannHilbert`Private`M = Floor[(RiemannHilbert`Private`n + 1)/
         2]}, RiemannHilbert`Private`z^RiemannHilbert`Private`n*
       (ArcTanh[RiemannHilbert`Private`z] - 
        ArcTanh[1/RiemannHilbert`Private`z]) + 
      (1*RiemannHilbert`Private`z^(RiemannHilbert`Private`n - 1 - 
          2*RiemannHilbert`Private`M)*1*Hypergeometric2F1[1, 1, 
         3/2 + RiemannHilbert`Private`M, 1/(RiemannHilbert`Private`z^2*
           (RiemannHilbert`Private`z^(-2) - 1))])/
       ((1 + 2*RiemannHilbert`Private`M)*(1 - RiemannHilbert`Private`z^(-2)))]
 
Attributes[IntervalToBottomCircle] = {Listable}
 
IntervalToBottomCircle[Private`x_] := Private`x - I*Sqrt[1 - Private`x]*
      Sqrt[1 + Private`x]
 
IntervalToBottomCircle /: IntervalToBottomCircle::usage = "IntervalToBottomCi\
rcle[x] maps the unit interval to the bottom half of the circle."
 
Attributes[IntervalToTopCircle] = {Listable}
 
IntervalToTopCircle[Private`x_] := Private`x + I*Sqrt[1 - Private`x]*
      Sqrt[1 + Private`x]
 
IntervalToTopCircle /: IntervalToTopCircle::usage = "IntervalToTopCircle[x] \
maps the unit interval to the top half of the circle."
 
RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`n_, 
      RiemannHilbert`Private`z_] /; NEqual[RiemannHilbert`Private`z, 1] := 
    N[(1*(-PolyGamma[0, 1/2] + PolyGamma[0, 
         1/2 + Floor[(1 + RiemannHilbert`Private`n)/2]]))/2]
 
RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`n_, 
      RiemannHilbert`Private`z_] /; RiemannHilbert`Private`z == -1 := 
    -RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`n, 1]
 
RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`n_, 
     RiemannHilbert`Private`z_] := ArcTanh[RiemannHilbert`Private`z] - 
     RiemannHilbert`Private`\[Phi][RiemannHilbert`Private`n, 
      RiemannHilbert`Private`z]
 
RiemannHilbert`Private`\[Phi][RiemannHilbert`Private`n_, 
     RiemannHilbert`Private`z_] := (1/2)*RiemannHilbert`Private`z^
      (2*Floor[(RiemannHilbert`Private`n + 1)/2] + 1)*
     LerchPhi[RiemannHilbert`Private`z^2, 1, 
      1/2 + Floor[(RiemannHilbert`Private`n + 1)/2]]
 
DomainMemberQ[(Private`d_)?IntervalDomainQ, Private`x_] := 
    (NumberQ[#1] && Abs[Im[#1]] < 10*$MachineTolerance && 
       Abs[#1] <= 1. + 10*$MachineTolerance & )[MapToInterval[Private`d, 
      Private`x]]
 
DomainMemberQ[(Private`d_)?CircleDomainQ, Private`x_] := 
    Abs[Abs[MapToCircle[Private`d, Private`x]] - 1] <= 10*$MachineTolerance
 
DomainMemberQ[Private`d_Point, Private`x_] := 
    Abs[Private`x - Private`d[[1]]] <= 10*$MachineTolerance
 
DomainMemberQ[(Private`f_)?FunQ, Private`x_] := 
    DomainMemberQ[Domain[Private`f], Private`x]
 
DomainMemberQ /: DomainMemberQ::usage = 
     "DomainMemberQ[d,z] tests whether z is numerically on the domain d."
 
Attributes[ComplexMapToCircle] = {Listable}
 
ComplexMapToCircle[(Private`f_)?FunQ, Private`z_] := 
    ComplexMapToCircle[Domain[Private`f], Private`z]
 
ComplexMapToCircle[Curve[Private`cr_], Private`z_] := 
    ComplexRoots[UnitCircle, (#1 - Private`z*BasisShiftList[#1, 0] & )[
      IncreaseIndexRange[RemoveNZeros[FFT[Private`cr]], {0, 0}]]]
 
ComplexMapToCircle /: ComplexMapToCircle::usage = "MapToInterval[d,x] maps \
the point x via the conformal map that maps the domain d to the unit \
interval. If d is an IFun, then it is equivalent to \
MapToInterval[Domain[d],x]."
 
BasisShiftList[Private`ln_ShiftList, Private`k_] := 
    ShiftList[BasisVector[Length[Private`ln]][Private`k + Index[Private`ln]], 
     Index[Private`ln]]
 
BasisShiftList[(Private`i_) ;; (Private`j_), Private`k_] := 
    ShiftList[BasisVector[Private`j - Private`i + 1][
      Private`k - Private`i + 1], 1 - Private`i]
 
BasisVector[Private`n_][Private`j_] := IdentityMatrix[Private`n][[Private`j]]
 
BasisVector /: BasisVector::usage = "BasisVector[n][j] constructs a vector of \
length n with the jth entry equal to one."
 
RemoveNZeros[{Private`v___, _?NZeroQ}] := RemoveNZeros[{Private`v}]
 
RemoveNZeros[Private`v_List] := Private`v
 
RemoveNZeros[ShiftList[{Private`v___, _?NZeroQ}, Private`ind_]] := 
    RemoveNZeros[ShiftList[{Private`v}, Private`ind]]
 
RemoveNZeros[ShiftList[{_?NZeroQ, Private`v___}, Private`ind_]] := 
    RemoveNZeros[ShiftList[{Private`v}, Private`ind - 1]]
 
RemoveNZeros[Private`v_ShiftList] := Private`v
 
Attributes[ComplexMapToInterval] = {Listable}
 
ComplexMapToInterval[Private`f_IFun, Private`z_] := 
    ComplexMapToInterval[Domain[Private`f], Private`z]
 
ComplexMapToInterval[Curve[Private`cr_], Private`z_] := 
    ComplexRoots[Private`cr - Private`z]
 
ComplexMapToInterval[Curve[Private`cr_IFun, Stretch -> Private`L_], 
     Private`z_] := MapToInterval[Line[{-1, 1}, Stretch -> Private`L], 
     ComplexMapToInterval[Curve[Private`cr], Private`z]]
 
ComplexMapToInterval /: ComplexMapToInterval::usage = "MapToInterval[d,x] \
maps the point x via the conformal map that maps the domain d to the unit \
interval. If d is an IFun, then it is equivalent to \
MapToInterval[Domain[d],x]."
 
LeftSingularityDataBasis[RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`k_] := LeftSingularityDataBasis[
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k]
 
LeftSingularityDataBasis[RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`k_, RiemannHilbert`Private`t_] := 
    LeftSingularityDataBasis[Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`t]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`k_] := 
    LeftSingularityDataBasis[RiemannHilbert`Private`s, 
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k]
 
LeftSingularityDataBasis[Line[{-1, 1}], RiemannHilbert`Private`k_Integer] := 
    {((-1)^(RiemannHilbert`Private`k - 1)*Log[2])/(2*I*Pi) + 
      ((-1)^(RiemannHilbert`Private`k - 1)*(RiemannHilbert`Private`\[Mu][
          RiemannHilbert`Private`k - 1, -1] + RiemannHilbert`Private`\[Mu][
          RiemannHilbert`Private`k - 2, -1]))/(I*Pi), 
     -((-1)^(RiemannHilbert`Private`k - 1)/(2*I*Pi)), -1}
 
LeftSingularityDataBasis[(RiemannHilbert`Private`f_)?RightEndpointInfinityQ, 
     RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] - LeftSingularityDataBasis[UnitInterval, 1][[1]] - 
        (1*(RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 1, 1] + 
           RiemannHilbert`Private`\[Mu][RiemannHilbert`Private`k - 2, 1]))/
         (I*Pi) + #1[[2]]*Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
            LeftEndpoint[RiemannHilbert`Private`f]]]], #1[[2]], 
       #1[[3]]*Exp[I*Arg[MapToIntervalD[RiemannHilbert`Private`f, 
            LeftEndpoint[RiemannHilbert`Private`f]]]]} & )[
     LeftSingularityDataBasis[UnitInterval, RiemannHilbert`Private`k]]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`f_)?DomainQ, 
     RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] - CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
         MapToInterval[RiemannHilbert`Private`f, Infinity]] + 
        #1[[2]]*Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
            LeftEndpoint[RiemannHilbert`Private`f]]]], #1[[2]], 
       #1[[3]]*Exp[I*Arg[MapToIntervalD[RiemannHilbert`Private`f, 
            LeftEndpoint[RiemannHilbert`Private`f]]]]} & )[
     LeftSingularityDataBasis[UnitInterval, RiemannHilbert`Private`k]]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`f_)?DomainQ, 
     RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`t_)?
      ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & )[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
      RiemannHilbert`Private`k]]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_, RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] - #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & )[
     LeftSingularityDataBasis[RiemannHilbert`Private`f, 
      RiemannHilbert`Private`k]]
 
LeftSingularityDataBasis[RiemannHilbert`Private`f:Curve[_IFun], 
     1 ;; (RiemannHilbert`Private`n_Integer)] := 
    Module[{RiemannHilbert`Private`pts, RiemannHilbert`Private`cb, 
      RiemannHilbert`Private`lpD}, RiemannHilbert`Private`pts = 
       Select[ComplexMapToInterval[RiemannHilbert`Private`f, 
         LeftEndpoint[RiemannHilbert`Private`f]], 
         !Abs[#1 + 1] < 100*$MachineTolerance & ]; 
      RiemannHilbert`Private`lpD = MapToIntervalD[RiemannHilbert`Private`f, 
        LeftEndpoint[RiemannHilbert`Private`f]]; RiemannHilbert`Private`cb = 
       Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`n, 
         RiemannHilbert`Private`pts]; 
      ({#1[[1]] + #1[[2]]*Log[Abs[RiemannHilbert`Private`lpD]], #1[[2]], 
          #1[[3]]*Exp[I*Arg[RiemannHilbert`Private`lpD]]} & ) /@ 
        LeftSingularityDataBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n] + ({#1, 0, 0} & ) /@ 
        RiemannHilbert`Private`cb]
 
LeftSingularityDataBasis[RiemannHilbert`Private`f:
      Curve[RiemannHilbert`Private`cf_IFun, Stretch -> 
        RiemannHilbert`Private`L_], 
     1 ;; (RiemannHilbert`Private`n_Integer)] := 
    Module[{RiemannHilbert`Private`pts, RiemannHilbert`Private`cb, 
      RiemannHilbert`Private`lpD, RiemannHilbert`Private`cbinf}, 
     RiemannHilbert`Private`pts = Select[ComplexMapToInterval[
         RiemannHilbert`Private`f, LeftEndpoint[RiemannHilbert`Private`f]], 
         !Abs[#1 + 1] < 100*$MachineTolerance & ]; 
      RiemannHilbert`Private`lpD = MapToIntervalD[RiemannHilbert`Private`f, 
        LeftEndpoint[RiemannHilbert`Private`f]]; RiemannHilbert`Private`cb = 
       Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`n, 
         RiemannHilbert`Private`pts]; RiemannHilbert`Private`cbinf = 
       (Length[RiemannHilbert`Private`cf] - 1)*CauchyBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n, MapToInterval[Line[{-1, 1}, 
           Stretch -> RiemannHilbert`Private`L], Infinity]]; 
      ({#1[[1]] + #1[[2]]*Log[Abs[RiemannHilbert`Private`lpD]], #1[[2]], 
          #1[[3]]*Exp[I*Arg[RiemannHilbert`Private`lpD]]} & ) /@ 
        LeftSingularityDataBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n] + ({#1, 0, 0} & ) /@ 
        (RiemannHilbert`Private`cb - RiemannHilbert`Private`cbinf)]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`d_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer)] := 
    Array[LeftSingularityDataBasis[RiemannHilbert`Private`d, #1] & , 
     RiemannHilbert`Private`k]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer), (RiemannHilbert`Private`t_)?
      ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & ) /@ LeftSingularityDataBasis[RiemannHilbert`Private`f, 
      1 ;; RiemannHilbert`Private`k]
 
LeftSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_)] := 
    ({#1[[1]] - #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & ) /@ 
     LeftSingularityDataBasis[RiemannHilbert`Private`f, 
      1 ;; RiemannHilbert`Private`k]
 
HalfFirst[{Private`m1_, Private`m___}] := {Private`m1/2, Private`m}
 
RightSingularityDataBasis[RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`k_] := RightSingularityDataBasis[
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k]
 
RightSingularityDataBasis[RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`k_, RiemannHilbert`Private`t_] := 
    RightSingularityDataBasis[Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`t]
 
RightSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`k_] := 
    RightSingularityDataBasis[RiemannHilbert`Private`s, 
     Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`k]
 
RightSingularityDataBasis[Line[{-1, 1}], RiemannHilbert`Private`k_Integer] := 
    {-(Log[2]/(2*I*Pi)) + (1*(RiemannHilbert`Private`\[Mu][
          RiemannHilbert`Private`k - 1, 1] + RiemannHilbert`Private`\[Mu][
          RiemannHilbert`Private`k - 2, 1]))/(I*Pi), 1/(2*I*Pi), 1}
 
RightSingularityDataBasis[(RiemannHilbert`Private`f_)?LeftEndpointInfinityQ, 
     RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] - (-1)^(RiemannHilbert`Private`k - 1)*
         RightSingularityDataBasis[UnitInterval, 1][[1]] - 
        ((-1)^(RiemannHilbert`Private`k - 1)*(RiemannHilbert`Private`\[Mu][
            RiemannHilbert`Private`k - 1, -1] + RiemannHilbert`Private`\[Mu][
            RiemannHilbert`Private`k - 2, -1]))/(I*Pi) + 
        #1[[2]]*Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
            RightEndpoint[RiemannHilbert`Private`f]]]], #1[[2]], 
       #1[[3]]*Exp[I*Arg[MapToIntervalD[RiemannHilbert`Private`f, 
            RightEndpoint[RiemannHilbert`Private`f]]]]} & )[
     RightSingularityDataBasis[UnitInterval, RiemannHilbert`Private`k]]
 
RightSingularityDataBasis[(RiemannHilbert`Private`f_)?DomainQ, 
     RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] - CauchyBasis[UnitInterval, RiemannHilbert`Private`k, 
         MapToInterval[RiemannHilbert`Private`f, Infinity]] + 
        #1[[2]]*Log[Abs[MapToIntervalD[RiemannHilbert`Private`f, 
            RightEndpoint[RiemannHilbert`Private`f]]]], #1[[2]], 
       #1[[3]]*Exp[I*Arg[MapToIntervalD[RiemannHilbert`Private`f, 
            RightEndpoint[RiemannHilbert`Private`f]]]]} & )[
     RightSingularityDataBasis[UnitInterval, RiemannHilbert`Private`k]]
 
RightSingularityDataBasis[(RiemannHilbert`Private`f_)?DomainQ, 
     RiemannHilbert`Private`k_Integer, (RiemannHilbert`Private`t_)?
      ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & )[RightSingularityDataBasis[RiemannHilbert`Private`f, 
      RiemannHilbert`Private`k]]
 
RightSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_, RiemannHilbert`Private`k_Integer] := 
    ({#1[[1]] + #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & )[
     RightSingularityDataBasis[RiemannHilbert`Private`f, 
      RiemannHilbert`Private`k]]
 
RightSingularityDataBasis[RiemannHilbert`Private`f:Curve[_IFun], 
     1 ;; (RiemannHilbert`Private`n_Integer)] := 
    Module[{RiemannHilbert`Private`pts, RiemannHilbert`Private`cb, 
      RiemannHilbert`Private`lpD}, RiemannHilbert`Private`pts = 
       Select[ComplexMapToInterval[RiemannHilbert`Private`f, 
         RightEndpoint[RiemannHilbert`Private`f]], 
         !Abs[#1 - 1] < 100*$MachineTolerance & ]; 
      RiemannHilbert`Private`lpD = MapToIntervalD[RiemannHilbert`Private`f, 
        RightEndpoint[RiemannHilbert`Private`f]]; RiemannHilbert`Private`cb = 
       Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`n, 
         RiemannHilbert`Private`pts]; 
      ({#1[[1]] + #1[[2]]*Log[Abs[RiemannHilbert`Private`lpD]], #1[[2]], 
          #1[[3]]*Exp[I*Arg[RiemannHilbert`Private`lpD]]} & ) /@ 
        RightSingularityDataBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n] + ({#1, 0, 0} & ) /@ 
        RiemannHilbert`Private`cb]
 
RightSingularityDataBasis[RiemannHilbert`Private`f:
      Curve[RiemannHilbert`Private`cf_IFun, Stretch -> 
        RiemannHilbert`Private`L_], 
     1 ;; (RiemannHilbert`Private`n_Integer)] := 
    Module[{RiemannHilbert`Private`pts, RiemannHilbert`Private`cb, 
      RiemannHilbert`Private`lpD, RiemannHilbert`Private`cbinf}, 
     RiemannHilbert`Private`pts = Select[ComplexMapToInterval[
         RiemannHilbert`Private`f, LeftEndpoint[RiemannHilbert`Private`f]], 
         !Abs[#1 - 1] < 100*$MachineTolerance & ]; 
      RiemannHilbert`Private`lpD = MapToIntervalD[RiemannHilbert`Private`f, 
        RightEndpoint[RiemannHilbert`Private`f]]; RiemannHilbert`Private`cb = 
       Total /@ CauchyBasis[UnitInterval, 1 ;; RiemannHilbert`Private`n, 
         RiemannHilbert`Private`pts]; RiemannHilbert`Private`cbinf = 
       (Length[RiemannHilbert`Private`cf] - 1)*CauchyBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n, MapToInterval[Line[{-1, 1}, 
           Stretch -> RiemannHilbert`Private`L], Infinity]]; 
      ({#1[[1]] + #1[[2]]*Log[Abs[RiemannHilbert`Private`lpD]], #1[[2]], 
          #1[[3]]*Exp[I*Arg[RiemannHilbert`Private`lpD]]} & ) /@ 
        RightSingularityDataBasis[UnitInterval, 
         1 ;; RiemannHilbert`Private`n] + ({#1, 0, 0} & ) /@ 
        (RiemannHilbert`Private`cb - RiemannHilbert`Private`cbinf)]
 
RightSingularityDataBasis[(RiemannHilbert`Private`d_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer)] := 
    Array[RightSingularityDataBasis[RiemannHilbert`Private`d, #1] & , 
     RiemannHilbert`Private`k]
 
RightSingularityDataBasis[(RiemannHilbert`Private`f_)?IntervalDomainQ, 
     1 ;; (RiemannHilbert`Private`k_Integer), (RiemannHilbert`Private`t_)?
      ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & ) /@ RightSingularityDataBasis[RiemannHilbert`Private`f, 
      1 ;; RiemannHilbert`Private`k]
 
RightSingularityDataBasis[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_, 1 ;; (RiemannHilbert`Private`k_)] := 
    ({#1[[1]] + #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & ) /@ 
     RightSingularityDataBasis[RiemannHilbert`Private`f, 
      1 ;; RiemannHilbert`Private`k]
 
LeftContourArg[Line[{Private`a_, Private`b_}, ___]] := 
    Arg[Private`b - Private`a]
 
LeftContourArg[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}]] := 
    N[Private`t0 + (Sign[Private`t1 - Private`t0]*Pi)/2]
 
LeftContourArg[Private`f_IFun] := LeftContourArg[Domain[Private`f]]
 
LeftContourArg[Private`comp_] := 
    -Arg[MapToIntervalD[Private`comp, LeftEndpoint[Private`comp]]]
 
LeftContourArg /: LeftContourArg::usage = "LeftContourArg[d] gives the angle \
in the complex plane of the left endpoint of a domain d."
 
RightContourArg[Line[{Private`a_, Private`b_}, ___]] := 
    Arg[Private`a - Private`b]
 
RightContourArg[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}]] := 
    N[Private`t1 - (Sign[Private`t1 - Private`t0]*Pi)/2]
 
RightContourArg[Private`f_IFun] := RightContourArg[Domain[Private`f]]
 
RightContourArg[Private`comp_] := 
    -Arg[-MapToIntervalD[Private`comp, RightEndpoint[Private`comp]]]
 
RightContourArg /: RightContourArg::usage = "RightContourArg[d] gives the \
angle in the complex plane of the right endpoint of a domain d."
 
ColumnMap[Private`f_, (Private`m_)?VectorQ] := 
    VectorTranspose[Private`f /@ Private`m]
 
ColumnMap[Private`f_, (Private`m_)?MatrixQ] := 
    VectorTranspose[Private`f /@ Transpose[Private`m]]
 
FiniteTransformMatrix[(Private`d_)?LeftEndpointInfinityQ, 
     Private`n_Integer] := TransformMatrix[Private`d, Private`n][[All,
     2 ;; All]]
 
FiniteTransformMatrix[(Private`d_)?RightEndpointInfinityQ, 
     Private`n_Integer] := TransformMatrix[Private`d, Private`n][[All,
     1 ;; -2]]
 
FiniteTransformMatrix[Line[{-Infinity, Infinity}], Private`n_Integer] := 
    TransformMatrix[RealLine, Private`n][[All,2 ;; All]]
 
FiniteTransformMatrix[(Private`d_)?DomainQ, Private`n_Integer] := 
    TransformMatrix[Private`d, Private`n]
 
FiniteTransformMatrix[Private`f_] := FiniteTransformMatrix[Domain[Private`f], 
     Length[Private`f]]
 
TransformMatrix[_?IntervalDomainQ, Private`n_Integer] := 
    Private`DCTTransformMatrix[Private`n]
 
TransformMatrix[_?CircleDomainQ, Private`n_Integer] := 
    Private`FFTTransformMatrix[Private`n]
 
TransformMatrix[(Private`f_)?FunQ] := TransformMatrix[Domain[Private`f], 
     Length[Private`f]]
 
Private`DCTTransformMatrix[Private`n_Integer] := 
    ColumnMap[DCT, IdentityMatrix[Private`n]]
 
Private`FFTTransformMatrix[Private`n_Integer] := 
    ColumnMap[ToList[FFT[#1]] & , IdentityMatrix[Private`n]]
 
Private`RHSolution[Private`X_][Private`z_] := 
    Cauchy[Private`RHSolved[Private`X], Private`z] + IdentityMatrix[2]
 
Cauchy[RiemannHilbert`Private`lf_LFun, RiemannHilbert`Private`z_List] := 
    (Cauchy[RiemannHilbert`Private`lf, #1] & ) /@ RiemannHilbert`Private`z
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`lf_LFun, 
     RiemannHilbert`Private`z_List] := 
    (Cauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`lf, #1] & ) /@ 
     RiemannHilbert`Private`z
 
Cauchy[(RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ, 
     (RiemannHilbert`Private`z_)?(Abs[#1] <= 1. & )] := 
    CauchyS[Plus[1], RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
Cauchy[(RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ, 
     (RiemannHilbert`Private`z_)?(Abs[#1] > 1. & )] := 
    CauchyS[-1, RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`lf_LFun)?
      UnitCircleFunQ, _?InfinityQ] := 0
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`lf_LFun)?
      UnitCircleFunQ, (RiemannHilbert`Private`z_)?
      (DomainMemberQ[UnitCircle, #1] & )] := 
    CauchyS[RiemannHilbert`Private`s, RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`z]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`lf_LFun)?
      UnitCircleFunQ, (RiemannHilbert`Private`z_)?ScalarQ] := 
    Cauchy[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
Cauchy[RiemannHilbert`Private`f:LFun[_, _Curve], (RiemannHilbert`Private`z_)?
      ScalarQ] := Total[Cauchy[ToUnitCircle[RiemannHilbert`Private`f], 
       ComplexMapToCircle[Domain[RiemannHilbert`Private`f], 
        RiemannHilbert`Private`z]]] - 
     Total[Cauchy[ToUnitCircle[RiemannHilbert`Private`f], 
       ComplexMapToCircle[Domain[RiemannHilbert`Private`f], 10^18]]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
       LFun[_, _Curve], (RiemannHilbert`Private`z_)?ScalarQ] /; 
     DomainMemberQ[RiemannHilbert`Private`f, RiemannHilbert`Private`z] := 
    Total[Cauchy[RiemannHilbert`Private`s, ToUnitCircle[
        RiemannHilbert`Private`f], ComplexMapToCircle[
        Domain[RiemannHilbert`Private`f], RiemannHilbert`Private`z]]] - 
     Total[Cauchy[ToUnitCircle[RiemannHilbert`Private`f], 
       ComplexMapToCircle[Domain[RiemannHilbert`Private`f], 10^18]]]
 
Cauchy[RiemannHilbert`Private`lf_LFun, (RiemannHilbert`Private`z_)?
      ScalarQ] := Cauchy[ToUnitCircle[RiemannHilbert`Private`lf], 
      MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] - 
     Cauchy[ToUnitCircle[RiemannHilbert`Private`lf], 
      MapToCircle[RiemannHilbert`Private`lf, Infinity]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`lf_LFun, 
     (RiemannHilbert`Private`z_)?ScalarQ] := 
    Cauchy[RiemannHilbert`Private`s, ToUnitCircle[RiemannHilbert`Private`lf], 
      MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] - 
     Cauchy[ToUnitCircle[RiemannHilbert`Private`lf], 
      MapToCircle[RiemannHilbert`Private`lf, Infinity]]
 
Cauchy[1, (RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ] := 
    NonNegativePart[RiemannHilbert`Private`lf]
 
Cauchy[-1, (RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ] := 
    -NegativePart[RiemannHilbert`Private`lf]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:
      LFun[_, _Curve]] := LFun[Cauchy[RiemannHilbert`Private`s, 
      RiemannHilbert`Private`f, Points[RiemannHilbert`Private`f]], 
     Domain[RiemannHilbert`Private`f]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`lf_LFun] := 
    LFun[Values[Cauchy[RiemannHilbert`Private`s, ToUnitCircle[
         RiemannHilbert`Private`lf]]], Domain[RiemannHilbert`Private`lf]] - 
     ToArrayFun[Cauchy[ToUnitCircle[RiemannHilbert`Private`lf], 
        MapToCircle[RiemannHilbert`Private`lf, Infinity]]*
       OneFun[RiemannHilbert`Private`lf]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_LFun, 
     RiemannHilbert`Private`f_LFun] := Cauchy[RiemannHilbert`Private`s, 
     RiemannHilbert`Private`f]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_LFun, 
     (RiemannHilbert`Private`g_)?FunQ] := Head[RiemannHilbert`Private`g][
     Cauchy[RiemannHilbert`Private`f, Points[RiemannHilbert`Private`g]], 
     Domain[RiemannHilbert`Private`g]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:{__LFun}, 
     (RiemannHilbert`Private`g_)?FunQ] := 
    Total[(Cauchy[RiemannHilbert`Private`s, #1, 
        RiemannHilbert`Private`g] & ) /@ RiemannHilbert`Private`f]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f:{__LFun}, 
     RiemannHilbert`Private`g:{__LFun}] := 
    (Cauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`f, #1] & ) /@ 
     RiemannHilbert`Private`g
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_List] := 
    Cauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`f, 
     RiemannHilbert`Private`f]
 
Cauchy[RiemannHilbert`Private`lf_PFun, RiemannHilbert`Private`z_List] := 
    (Cauchy[RiemannHilbert`Private`lf, #1] & ) /@ RiemannHilbert`Private`z
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`lf_PFun, 
     RiemannHilbert`Private`z_List] := 
    (Cauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`lf, #1] & ) /@ 
     RiemannHilbert`Private`z
 
Cauchy[(RiemannHilbert`Private`pf_PFun)?UnitPointFunQ, 
     RiemannHilbert`Private`z_] := -(First[Values[RiemannHilbert`Private`pf]]/
      (2*Pi*I*RiemannHilbert`Private`z))
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`lf_PFun)?
      UnitPointFunQ, (RiemannHilbert`Private`z_)?
      (DomainMemberQ[UnitPoint, #1] & )] := CauchyS[RiemannHilbert`Private`s, 
     RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`lf_PFun)?
      UnitPointFunQ, (RiemannHilbert`Private`z_)?ScalarQ] := 
    Cauchy[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
Cauchy[RiemannHilbert`Private`lf_PFun, RiemannHilbert`Private`z_] := 
    Cauchy[ToUnitPoint[RiemannHilbert`Private`lf], 
     MapToPoint[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`lf_PFun, 
     (RiemannHilbert`Private`z_)?ScalarQ] := Cauchy[RiemannHilbert`Private`s, 
     ToUnitPoint[RiemannHilbert`Private`lf], 
     MapToPoint[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]]
 
Cauchy[RiemannHilbert`Private`f_IFun, _?InfinityQ] := 
    0*First[RiemannHilbert`Private`f]
 
Cauchy[RiemannHilbert`Private`f_List, _?InfinityQ] := 
    0*First[First[RiemannHilbert`Private`f]]
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       RiemannHilbert`Private`x] && 
      NEqual[Norm[First[RiemannHilbert`Private`f]], 0.] := 
    First[LeftSingularityData[RiemannHilbert`Private`f]]
 
Cauchy[_?SignQ, RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
       RiemannHilbert`Private`x] && 
      NEqual[Norm[First[RiemannHilbert`Private`f]], 0.] := 
    First[LeftSingularityData[RiemannHilbert`Private`f]]
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] := Infinity
 
Cauchy[_?SignQ, RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[LeftEndpoint[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] := Infinity
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       RiemannHilbert`Private`x] && 
      NEqual[Norm[Last[RiemannHilbert`Private`f]], 0.] := 
    First[RightSingularityData[RiemannHilbert`Private`f]]
 
Cauchy[_?SignQ, RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
       RiemannHilbert`Private`x] && 
      NEqual[Norm[First[RiemannHilbert`Private`f]], 0.] := 
    First[RightSingularityData[RiemannHilbert`Private`f]]
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] := Infinity
 
Cauchy[_?SignQ, RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] /; 
     NEqual[RightEndpoint[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] := Infinity
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`xv_List] := 
    Plus @@ (Function[RiemannHilbert`Private`x, RiemannHilbert`Private`x*
          #1[[2]]] /@ #1[[1]] & ) /@ 
      Thread[{CauchyBasis[RiemannHilbert`Private`f, 
         1 ;; Length[RiemannHilbert`Private`f], RiemannHilbert`Private`xv], 
        DCT[RiemannHilbert`Private`f]}]
 
Cauchy[RiemannHilbert`Private`f_IFun, RiemannHilbert`Private`x_] := 
    CauchyBasis[RiemannHilbert`Private`f, 
      1 ;; Length[RiemannHilbert`Private`f], RiemannHilbert`Private`x] . 
     DCT[RiemannHilbert`Private`f]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`xv_List] := 
    Plus @@ (Function[RiemannHilbert`Private`x, RiemannHilbert`Private`x*
          #1[[2]]] /@ #1[[1]] & ) /@ 
      Thread[{CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`f, 
         1 ;; Length[RiemannHilbert`Private`f], RiemannHilbert`Private`xv], 
        DCT[RiemannHilbert`Private`f]}]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`x_] := CauchyBasis[RiemannHilbert`Private`s, 
      RiemannHilbert`Private`f, 1 ;; Length[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] . DCT[RiemannHilbert`Private`f]
 
Cauchy[RiemannHilbert`Private`f_List, RiemannHilbert`Private`x_] := 
    Plus @@ (Cauchy[#1, RiemannHilbert`Private`x] & ) /@ 
      RiemannHilbert`Private`f
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, (RiemannHilbert`Private`f_List)?
      CauchyBoundedQ, RiemannHilbert`Private`g:{__IFun}] := 
    FPCauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`f, 
     RiemannHilbert`Private`g]
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_List, 
     RiemannHilbert`Private`x_List] := 
    Plus @@ Function[RiemannHilbert`Private`U, 
       Flatten[(If[DomainMemberQ[RiemannHilbert`Private`U, First[#1]], 
           Cauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`U, #1], 
           Cauchy[RiemannHilbert`Private`U, #1]] & ) /@ 
         SplitBy[RiemannHilbert`Private`x, 
          DomainMemberQ[RiemannHilbert`Private`U, #1] & ], 1]] /@ 
      RiemannHilbert`Private`f
 
Cauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_List, 
     RiemannHilbert`Private`x_] := 
    Plus @@ (If[DomainMemberQ[#1, RiemannHilbert`Private`x], 
        Cauchy[RiemannHilbert`Private`s, #1, RiemannHilbert`Private`x], 
        Cauchy[#1, RiemannHilbert`Private`x]] & ) /@ RiemannHilbert`Private`f
 
Cauchy[Private`sf:SingFun[_, {1/2, 1/2}], Private`z_] := 
    -(I*CauchyInverse[Hilbert[Private`sf][[1]], Private`z])
 
Cauchy[Private`s_, Private`sf:SingFun[_, {1/2, 1/2}], Private`z_] := 
    -(I*CauchyInverse[Private`s, Hilbert[Private`sf][[1]], Private`z])
 
Cauchy /: Cauchy::usage = "Cauchy[f,z] evaluates the Cauchy transform \
\!\(\*FractionBox[\(1\), \(2\\ \
\[Pi]\[NonBreakingSpace]I\)]\)\!\(\*SubscriptBox[\(\[Integral]\), \
\(Domain[f]\)]\)\!\(\*FractionBox[\(f[t]\), \(t - z\)]\)\[DifferentialD]t of \
an IFun f at a complex point z. Cauchy[ifunlist,z] evaluates the sum of the \
Cauchy transform of each element of ifunlist. Cauchy[\[PlusMinus]1,f,x] \
evaluates the left/right limit of Cauchy[f,x] for x on the domain of f. \
Cauchy[\[PlusMinus]1,flist] for CauchyBoundedQ[flist] true evaluates the \
Cauchy transform of flist on the points of flist, returning another list of \
IFuns."
 
CauchyS[-1, (RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ, 
     (RiemannHilbert`Private`z_)?InfinityQ] := 0
 
CauchyS[1, (RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ, 
     RiemannHilbert`Private`z_] := NonNegativeEvaluate[
     RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
CauchyS[-1, (RiemannHilbert`Private`lf_LFun)?UnitCircleFunQ, 
     RiemannHilbert`Private`z_] := 
    -NegativeEvaluate[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]
 
CauchyS[1, RiemannHilbert`Private`lf_PFun, (RiemannHilbert`Private`z_)?
      ScalarQ] := (1*First[Values[RiemannHilbert`Private`lf]])/2
 
CauchyS[-1, RiemannHilbert`Private`lf_PFun, (RiemannHilbert`Private`z_)?
      ScalarQ] := -(First[Values[RiemannHilbert`Private`lf]]/2)
 
CauchyS[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`x_] := CauchyBasisS[RiemannHilbert`Private`s, 
      RiemannHilbert`Private`f, 1 ;; Length[RiemannHilbert`Private`f], 
      RiemannHilbert`Private`x] . DCT[RiemannHilbert`Private`f]
 
NonNegativeEvaluate[Private`f_LFun, Private`z_] /; 
     NZeroQ[MapToCircle[Private`f, Private`z]] := FFT[Private`f][[0]]
 
NonNegativeEvaluate[Private`f_LFun, Private`z_] := 
    MapDot[MapToCircle[Private`f, Private`z]^#1 & , 
     NonNegativeShiftList[FFT[Private`f]]]
 
NonNegativeShiftList[Private`l_ShiftList] := 
    ShiftList[Array[0*ToList[Private`l][[1]] & , 
      Length[NegativeList[Private`l]]], NonNegativeList[Private`l]]
 
NegativeList[ShiftList[Private`ln_, Private`ind_]] := 
    Private`ln[[1 ;; Private`ind - 1]]
 
NegativeEvaluate[Private`f_LFun, Private`z_] /; 
     InfinityQ[MapToCircle[Private`f, Private`z]] := 
    0*First[Values[Private`f]]
 
NegativeEvaluate[Private`f_LFun, Private`z_] := 
    MapDot[MapToCircle[Private`f, Private`z]^#1 & , 
     NegativeShiftList[FFT[Private`f]]]
 
NegativeShiftList[Private`l_ShiftList] := ShiftList[NegativeList[Private`l], 
     Array[0*ToList[Private`l][[1]] & , Length[NonNegativeList[Private`l]]]]
 
NonNegativePart[Private`lf_LFun] := 
    LFun[InverseFFT[NonNegativeShiftList[FFT[Private`lf]]], 
     Domain[Private`lf]]
 
NegativePart[Private`lf_LFun] := 
    LFun[InverseFFT[NegativeShiftList[FFT[Private`lf]]], Domain[Private`lf]]
 
OneFun[(Private`lf_)?FunQ] := Head[Private`lf][1 & , Domain[Private`lf], 
     Length[Private`lf]]
 
UnitPointFunQ[Private`f_PFun] := N[Domain[Private`f]] == N[UnitPoint]
 
UnitPointFunQ[_] := False
 
ToUnitPoint[Private`lf_PFun] := SetDomain[Private`lf, UnitPoint]
 
LeftSingularityData[RiemannHilbert`Private`f_IFun] := 
    Join[MapDot[Most[LeftSingularityDataBasis[RiemannHilbert`Private`f, 
         #1]] & , DCT[RiemannHilbert`Private`f]], 
     {Last[LeftSingularityDataBasis[RiemannHilbert`Private`f, 1]]}]
 
LeftSingularityData[RiemannHilbert`Private`f_IFun, 
     (RiemannHilbert`Private`t_)?ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & )[LeftSingularityData[RiemannHilbert`Private`f]]
 
LeftSingularityData[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_IFun] := 
    ({#1[[1]] - #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & )[
     LeftSingularityData[RiemannHilbert`Private`f]]
 
RightSingularityData[RiemannHilbert`Private`f_IFun] := 
    Join[MapDot[Most[RightSingularityDataBasis[RiemannHilbert`Private`f, 
         #1]] & , DCT[RiemannHilbert`Private`f]], 
     {Last[RightSingularityDataBasis[RiemannHilbert`Private`f, 1]]}]
 
RightSingularityData[RiemannHilbert`Private`f_IFun, 
     (RiemannHilbert`Private`t_)?ScalarQ] := 
    ({#1[[1]] + #1[[2]]*I*Arg[#1[[3]]*Exp[I*RiemannHilbert`Private`t]], 
       #1[[2]]} & )[RightSingularityData[RiemannHilbert`Private`f]]
 
RightSingularityData[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`f_IFun] := 
    ({#1[[1]] + #1[[2]]*I*RiemannHilbert`Private`s*Pi, #1[[2]]} & )[
     RightSingularityData[RiemannHilbert`Private`f]]
 
CauchyBoundedQ[RiemannHilbert`Private`l_List] := 
    NZeroQ[Max[Abs[Function[RiemannHilbert`Private`x, 
          Plus @@ (Which[NEqual[LeftEndpoint[#1], RiemannHilbert`Private`x], 
              First[#1], NEqual[RightEndpoint[#1], RiemannHilbert`Private`x], 
              -Last[#1], True, 0*First[#1]] & ) /@ 
            RiemannHilbert`Private`l] /@ Select[Union @@ 
           ({LeftEndpoint[#1], RightEndpoint[#1]} & ) /@ 
            RiemannHilbert`Private`l,  !InfinityQ[#1] & ]]]/10]
 
CauchyBoundedQ /: CauchyBoundedQ::usage = "CauchyBoundedQ[ifunlist] \
Determines if the Cauchy transform of ifunlist is bounded (i.e., at each \
joint vertex of ifunlist the functions sum to zero)"
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`pf_PFun, 
      RiemannHilbert`Private`gf_PFun] /; 
     NEqual[Domain[RiemannHilbert`Private`pf], 
      Domain[RiemannHilbert`Private`gf]] := 
    FPCauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`pf]
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`pf_PFun, 
     RiemannHilbert`Private`gf_PFun] := 
    PFun[Cauchy[RiemannHilbert`Private`pf, 
      Points[RiemannHilbert`Private`gf]], Domain[RiemannHilbert`Private`gf]]
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, 
     RiemannHilbert`Private`pf_PFun] := 
    (RiemannHilbert`Private`s*RiemannHilbert`Private`pf)/2
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_IFun, 
     RiemannHilbert`Private`g_IFun] := 
    IFun[Transpose[Values /@ FPCauchyBasis[RiemannHilbert`Private`s, 
         RiemannHilbert`Private`f, 1 ;; Length[RiemannHilbert`Private`f], 
         RiemannHilbert`Private`g]] . DCT[RiemannHilbert`Private`f], 
     Domain[RiemannHilbert`Private`g]]
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_List, 
     (RiemannHilbert`Private`g_)?FunQ] := 
    FastPlus @@ (FPCauchy[RiemannHilbert`Private`s, #1, 
        RiemannHilbert`Private`g] & ) /@ RiemannHilbert`Private`f
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_List, 
     RiemannHilbert`Private`g:{__?FunQ}] := 
    (FPCauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`f, #1] & ) /@ 
     RiemannHilbert`Private`g
 
FPCauchy[(RiemannHilbert`Private`s_)?SignQ, RiemannHilbert`Private`f_] := 
    FPCauchy[RiemannHilbert`Private`s, RiemannHilbert`Private`f, 
     RiemannHilbert`Private`f]
 
CauchyInverse[RiemannHilbert`Private`lf_LFun, 
     RiemannHilbert`Private`z_List] := 
    (CauchyInverse[RiemannHilbert`Private`lf, #1] & ) /@ 
     RiemannHilbert`Private`z
 
CauchyInverse[1, RiemannHilbert`Private`lf_LFun, 
     RiemannHilbert`Private`z_] := Cauchy[Plus[1], RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`z]
 
CauchyInverse[-1, RiemannHilbert`Private`lf_LFun, 
     RiemannHilbert`Private`z_] := -Cauchy[-1, RiemannHilbert`Private`lf, 
      RiemannHilbert`Private`z]
 
CauchyInverse[RiemannHilbert`Private`lf_LFun, RiemannHilbert`Private`z_] /; 
     Abs[MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] <= 
      1. := CauchyInverse[Plus[1], RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`z]
 
CauchyInverse[RiemannHilbert`Private`lf_LFun, RiemannHilbert`Private`z_] /; 
     Abs[MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] > 
      1. := CauchyInverse[-1, RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`z]
 
CauchyInverse[1, RiemannHilbert`Private`lf_LFun] := 
    Cauchy[Plus[1], RiemannHilbert`Private`lf]
 
CauchyInverse[-1, RiemannHilbert`Private`lf_LFun] := 
    -Cauchy[-1, RiemannHilbert`Private`lf]
 
CauchyInverse[(Private`f_IFun)?(NZeroQ[Mean[#1]] & ), Private`z_] := 
    MapDot[CauchyInverseBasis[Private`f, #1 + 1, Private`z] & , 
     Rest[DCT[Private`f]]]
 
CauchyInverse[(Private`s_)?SignQ, (Private`f_IFun)?(NZeroQ[Mean[#1]] & ), 
     Private`z_] := MapDot[CauchyInverseBasis[Private`s, Private`f, #1 + 1, 
       Private`z] & , Rest[DCT[Private`f]]]
 
CauchyInverse[Private`f_IFun, Private`z_] := 
    MapDot[CauchyInverseBasis[Private`f, #1, Private`z] & , DCT[Private`f]]
 
CauchyInverse[(Private`s_)?SignQ, Private`f_IFun, Private`z_] := 
    MapDot[CauchyInverseBasis[Private`s, Private`f, #1, Private`z] & , 
     DCT[Private`f]]
 
CauchyInverse[Private`l_List, Private`z_] := 
    Plus @@ (CauchyInverse[#1, Private`z] & ) /@ CauchyInverseCurves[
       Private`l]
 
CauchyInverse[(Private`s_)?SignQ, Private`l_List, Private`z_] := 
    Plus @@ (If[DomainMemberQ[#1, Private`z], CauchyInverse[Private`s, #1, 
         Private`z], CauchyInverse[#1, Private`z]] & ) /@ 
      CauchyInverseCurves[Private`l]
 
CauchyInverse[Private`f_IFun, Private`z_, Private`opts:OptionsPattern[]] := 
    MapDot[CauchyInverseBasis[Private`f, #1, Private`z, Private`opts] & , 
     DCT[Private`f]]
 
CauchyInverse[(Private`s_)?SignQ, Private`f_IFun, Private`z_, 
     Private`opts:OptionsPattern[]] := 
    MapDot[CauchyInverseBasis[Private`s, Private`f, #1, Private`z, 
       Private`opts] & , DCT[Private`f]]
 
CauchyInverse[Private`l_List, Private`z_, Bounded -> Private`bnd_List] := 
    Plus @@ (CauchyInverse[#1[[2]], Private`z, Bounded -> #1[[1]]] & ) /@ 
      Thread[{Private`bnd, CauchyInverseCurves[Private`l, 
         Bounded -> Private`bnd]}]
 
CauchyInverse[Private`l_List, Private`z_, Private`opts:OptionsPattern[]] := 
    Plus @@ (CauchyInverse[#1, Private`z, Private`opts] & ) /@ 
      CauchyInverseCurves[Private`l, Private`opts]
 
CauchyInverse[(Private`s_)?SignQ, Private`l_List, Private`z_, 
     Private`opts:OptionsPattern[]] := 
    Plus @@ (If[DomainMemberQ[#1, Private`z], CauchyInverse[Private`s, #1, 
         Private`z, Private`opts], CauchyInverse[#1, Private`z, 
         Private`opts]] & ) /@ CauchyInverseCurves[Private`l, Private`opts]
 
CauchyInverse[Private`sf:SingFun[_, {0, 0}], Private`z_] := 
    -(I*CauchyInverse[Private`sf[[1]], Private`z])
 
CauchyInverse[Private`s_, Private`sf:SingFun[_, {0, 0}], Private`z_] := 
    -(I*CauchyInverse[Private`s, Private`sf[[1]], Private`z])
 
CauchyInverseBasis[_?SignQ, _Integer, _?InfinityQ] := 0
 
CauchyInverseBasis[(RiemannHilbert`Private`f_)?FunQ, 
     RiemannHilbert`Private`k_, RiemannHilbert`Private`x_] := 
    CauchyInverseBasis[Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`x]
 
CauchyInverseBasis[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`f_)?FunQ, RiemannHilbert`Private`k_, 
     RiemannHilbert`Private`x_] := CauchyInverseBasis[
     RiemannHilbert`Private`s, Domain[RiemannHilbert`Private`f], 
     RiemannHilbert`Private`k, RiemannHilbert`Private`x]
 
CauchyInverseBasis[(RiemannHilbert`Private`s_)?SignQ, 
     (RiemannHilbert`Private`lf_)?CircleDomainQ, RiemannHilbert`Private`k_, 
     RiemannHilbert`Private`z_] := RiemannHilbert`Private`s*
     CauchyBasis[RiemannHilbert`Private`s, RiemannHilbert`Private`lf, 
      RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyInverseBasis[(RiemannHilbert`Private`lf_)?CircleDomainQ, 
      RiemannHilbert`Private`k_, RiemannHilbert`Private`z_] /; 
     Abs[MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] <= 
      1. := CauchyInverseBasis[Plus[1], RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyInverseBasis[(RiemannHilbert`Private`lf_)?CircleDomainQ, 
      RiemannHilbert`Private`k_, RiemannHilbert`Private`z_] /; 
     Abs[MapToCircle[RiemannHilbert`Private`lf, RiemannHilbert`Private`z]] > 
      1. := CauchyInverseBasis[-1, RiemannHilbert`Private`lf, 
     RiemannHilbert`Private`k, RiemannHilbert`Private`z]
 
CauchyInverseBasis[(Private`d_)?IntervalDomainQ, 1, Private`z_] := 
    1/2 - MapToInterval[Private`d, Private`z]/
      (2*Sqrt[MapToInterval[Private`d, Private`z] + 1]*
       Sqrt[MapToInterval[Private`d, Private`z] - 1])
 
CauchyInverseBasis[(Private`d_)?IntervalDomainQ, Private`k_, Private`z_] := 
    BoundedCauchyInverseBasis[Private`d, Private`k, Private`z]
 
CauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 1, 
     Private`z_] := 1/2 + (Private`s*I*MapToInterval[Private`d, Private`z])/
      (2*Sqrt[1 - MapToInterval[Private`d, Private`z]^2])
 
CauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 
     Private`k_, Private`z_] := BoundedCauchyInverseBasis[Private`s, 
     Private`d, Private`k, Private`z]
 
CauchyInverseBasis[(Private`d_)?IntervalDomainQ, 1, Private`z_, 
     Bounded -> Right] := 1/2 - (MapToInterval[Private`d, Private`z] - 1)/
      (2*Sqrt[MapToInterval[Private`d, Private`z] + 1]*
       Sqrt[MapToInterval[Private`d, Private`z] - 1])
 
CauchyInverseBasis[(Private`d_)?IntervalDomainQ, 1, Private`z_, 
     Bounded -> Left] := 1/2 - (MapToInterval[Private`d, Private`z] + 1)/
      (2*Sqrt[MapToInterval[Private`d, Private`z] + 1]*
       Sqrt[MapToInterval[Private`d, Private`z] - 1])
 
CauchyInverseBasis[(Private`d_)?IntervalDomainQ, Private`k_, Private`z_, 
     OptionsPattern[]] := BoundedCauchyInverseBasis[Private`d, Private`k, 
     Private`z]
 
CauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 1, 
     Private`z_, Bounded -> Right] := 
    1/2 + (Private`s*I*(MapToInterval[Private`d, Private`z] - 1))/
      (2*Sqrt[1 - MapToInterval[Private`d, Private`z]^2])
 
CauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 1, 
     Private`z_, Bounded -> Left] := 
    1/2 + (Private`s*I*(MapToInterval[Private`d, Private`z] + 1))/
      (2*Sqrt[1 - MapToInterval[Private`d, Private`z]^2])
 
CauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 
     Private`k_, Private`z_, OptionsPattern[]] := BoundedCauchyInverseBasis[
     Private`s, Private`d, Private`k, Private`z]
 
BoundedCauchyInverseBasis[(Private`f_)?FunQ, Private`k_, Private`x_] := 
    BoundedCauchyInverseBasis[Domain[Private`f], Private`k, Private`x]
 
BoundedCauchyInverseBasis[(Private`s_)?SignQ, (Private`f_)?FunQ, Private`k_, 
     Private`x_] := BoundedCauchyInverseBasis[Private`s, Domain[Private`f], 
     Private`k, Private`x]
 
BoundedCauchyInverseBasis[Line[{-1, 1}], 1, Private`z_] := 
    (1*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[Line[{-1, 1}], Private`k_, 
     (Private`z_)?(NEqual[#1, 1.] & )] := (1*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[Line[{-1, 1}], Private`k_, 
     (Private`z_)?(NEqual[#1, -1.] & )] := 
    ((-1)^(Private`k - 1)*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[Line[{-1, 1}], Private`k_, Private`z_] := 
    IntervalToInnerCircle[Private`z]^(Private`k - 1)/2
 
BoundedCauchyInverseBasis[_?SignQ, Line[{-1, 1}], 1, Private`z_] := 
    (1*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[_?SignQ, Line[{-1, 1}], Private`k_, 
     (Private`z_)?(NEqual[#1, 1.] & )] := (1*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[_?SignQ, Line[{-1, 1}], Private`k_, 
     (Private`z_)?(NEqual[#1, -1.] & )] := 
    ((-1)^(Private`k - 1)*(1 + Private`z - Private`z))/2
 
BoundedCauchyInverseBasis[1, Line[{-1, 1}], Private`k_, Private`z_] := 
    IntervalToBottomCircle[Private`z]^(Private`k - 1)/2
 
BoundedCauchyInverseBasis[-1, Line[{-1, 1}], Private`k_, Private`z_] := 
    IntervalToTopCircle[Private`z]^(Private`k - 1)/2
 
BoundedCauchyInverseBasis[(Private`d_)?IntervalDomainQ, Private`k_, 
     Private`z_] := BoundedCauchyInverseBasis[UnitInterval, Private`k, 
     MapToInterval[Private`d, Private`z]]
 
BoundedCauchyInverseBasis[(Private`s_)?SignQ, (Private`d_)?IntervalDomainQ, 
     Private`k_, Private`z_] := BoundedCauchyInverseBasis[Private`s, 
     UnitInterval, Private`k, MapToInterval[Private`d, Private`z]]
 
CauchyInverseCurves[Private`l_List] := FromValueList[Private`l, 
     LinearSolve[Private`CauchyInversePlusMatrix[Private`l], 
      ToValueList[Private`l]]]
 
CauchyInverseCurves[Private`l_List, Private`opts:OptionsPattern[]] := 
    FromValueList[Private`l, LinearSolve[Private`CauchyInversePlusMatrix[
       Private`l, Private`opts], ToValueList[Private`l]]]
 
Private`CauchyInversePlusMatrix[Private`l_List] := 
    Join @@ (RightJoin @@ #1 & ) /@ MatrixMap[
       If[#1[[1]] === #1[[2]], IdentityMatrix[Length[#1[[1]]]], 
         2*Private`CauchyInverseMatrix[Plus[1], #1[[2]], #1[[1]]]] & , 
       Outer[List, Private`l, Private`l]]
 
Private`CauchyInversePlusMatrix[Private`l_List, 
     Bounded -> Private`bnd_List] := Join @@ (RightJoin @@ #1 & ) /@ 
      MatrixMap[If[#1[[2,1]] === #1[[2,2]], IdentityMatrix[
          Length[#1[[2,1]]]], 2*Private`CauchyInverseMatrix[Plus[1], 
           #1[[2,2]], #1[[2,1]], Bounded -> #1[[1]]]] & , 
       (Thread[{Private`bnd, #1}] & ) /@ Outer[List, Private`l, Private`l]]
 
Private`CauchyInversePlusMatrix[Private`l_List, 
     Private`opts:OptionsPattern[]] := Join @@ (RightJoin @@ #1 & ) /@ 
      MatrixMap[If[#1[[1]] === #1[[2]], IdentityMatrix[Length[#1[[1]]]], 
         2*Private`CauchyInverseMatrix[Plus[1], #1[[2]], #1[[1]], 
           Private`opts]] & , Outer[List, Private`l, Private`l]]
 
Private`CauchyInversePlusMatrix /: Private`CauchyInversePlusMatrix::usage = 
     "Returns the matrix corresponding to a list {f,g} f^+ + g^+ + f^- + g^-"
 
Private`CauchyInverseMatrix[(Private`s_)?SignQ, Private`f_IFun] := 
    Transpose[Array[CauchyInverseBasis[Private`s, Private`f, #1, 
         Points[Private`f]] & , Length[Private`f]]] . 
     TransformMatrix[Private`f]
 
Private`CauchyInverseMatrix[(Private`s_)?SignQ, Private`f_IFun, 
      Private`g_IFun] /; Domain[Private`f] == Domain[Private`g] := 
    With[{Private`pts = Points[Private`g]}, 
     Transpose[Array[CauchyInverseBasis[Private`s, Private`f, #1, 
          Private`pts] & , Length[Private`f]]] . TransformMatrix[Private`f]]
 
Private`CauchyInverseMatrix[_?SignQ, Private`f_IFun, Private`g_IFun] := 
    With[{Private`pts = Points[Private`g]}, 
     Transpose[Array[CauchyInverseBasis[Private`f, #1, Private`pts] & , 
        Length[Private`f]]] . TransformMatrix[Private`f]]
 
Private`CauchyInverseMatrix[(Private`s_)?SignQ, Private`f_IFun, 
     Private`opts:OptionsPattern[]] := 
    Transpose[Array[CauchyInverseBasis[Private`s, Private`f, #1, 
         Points[Private`f]] & , Length[Private`f], Private`opts]] . 
     TransformMatrix[Private`f]
 
Private`CauchyInverseMatrix[(Private`s_)?SignQ, Private`f_IFun, 
      Private`g_IFun, Private`opts:OptionsPattern[]] /; 
     Domain[Private`f] == Domain[Private`g] := 
    With[{Private`pts = Points[Private`g]}, 
     Transpose[Array[CauchyInverseBasis[Private`s, Private`f, #1, 
          Private`pts, Private`opts] & , Length[Private`f]]] . 
      TransformMatrix[Private`f]]
 
Private`CauchyInverseMatrix[_?SignQ, Private`f_IFun, Private`g_IFun, 
     Private`opts:OptionsPattern[]] := 
    With[{Private`pts = Points[Private`g]}, 
     Transpose[Array[CauchyInverseBasis[Private`f, #1, Private`pts, 
          Private`opts] & , Length[Private`f]]] . TransformMatrix[Private`f]]
 
Hilbert[RiemannHilbert`Private`lf_LFun, (RiemannHilbert`Private`z_)?
      ScalarQ] := I*(Cauchy[Plus[1], RiemannHilbert`Private`lf, 
       RiemannHilbert`Private`z] + Cauchy[-1, RiemannHilbert`Private`lf, 
       RiemannHilbert`Private`z])
 
Hilbert[RiemannHilbert`Private`lf_LFun] := 
    I*(Cauchy[Plus[1], RiemannHilbert`Private`lf] + 
      Cauchy[-1, RiemannHilbert`Private`lf])
 
Hilbert[RiemannHilbert`Private`lf_, RiemannHilbert`Private`z_] := 
    I*(Cauchy[Plus[1], RiemannHilbert`Private`lf, RiemannHilbert`Private`z] + 
      Cauchy[-1, RiemannHilbert`Private`lf, RiemannHilbert`Private`z])
 
Hilbert[SingFun[Private`if_IFun, {1/2, 1/2}]] := 
    SingFun[Fun[InverseDCT[-GrowShiftRight[ToChebyshevUSeries[
          DCT[Private`if]]]], Domain[Private`if]], {0, 0}]
 
Hilbert[RiemannHilbert`Private`lf_] := 
    I*(Cauchy[Plus[1], RiemannHilbert`Private`lf] + 
      Cauchy[-1, RiemannHilbert`Private`lf])
 
Hilbert /: Hilbert::usage = "Hilbert[f,x] evaluates the Hilbert transform \
\!\(\*FractionBox[\(1\), \(\[Pi]\)]\)PV\!\(\*SubscriptBox[\(\[Integral]\), \
\(Domain[f]\)]\)\!\(\*FractionBox[\(f[t]\), \(t - x\)]\)\[DifferentialD]t of \
an IFun f at a point x on Domain[f]."
 
GrowShiftRight[Private`f_ShiftList] := 
    ShiftRight[PadLeft[Private`f, Length[Private`f] + 1]]
 
GrowShiftRight[Private`l_List] := Join[{0}, Private`l]
 
MakeListFun[{{}}] = {}
 
MakeListFun[{Private`Jumps_, Private`Domains_, Private`NumPts_}] := 
    Flatten[Table[Fun[Private`Jumps[[Private`i]], Private`Domains[[
        Private`i]], Private`NumPts[[Private`i]]], 
      {Private`i, 1, Length[Private`Jumps]}]]
 
ConjugateList[Private`L_, Private`F_] := 
    {ConjugateJumps[Private`L[[1]], Private`F], Private`L[[2]], 
     Private`L[[3]]}
 
ConjugateJumps[Private`Jumps_, Private`F_] := 
    Table[MultFun[{InvFun[Private`F], Private`Jumps[[Private`i]], 
       Private`F}], {Private`i, 1, Length[Private`Jumps]}]
 
MultFun[Private`L_, 2] := Private`L[[1]][#1] . Private`L[[2]][#1] & 
 
MultFun[Private`L_, 3] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] & 
 
MultFun[Private`L_, 4] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] & 
 
MultFun[Private`L_, 5] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] & 
 
MultFun[Private`L_, 6] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] & 
 
MultFun[Private`L_, 7] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] . Private`L[[7]][#1] & 
 
MultFun[Private`L_, 8] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] . Private`L[[7]][#1] . Private`L[[8]][#1] & 
 
MultFun[Private`L_, 9] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] . Private`L[[7]][#1] . Private`L[[8]][#1] . 
      Private`L[[9]][#1] & 
 
MultFun[Private`L_, 10] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] . Private`L[[7]][#1] . Private`L[[8]][#1] . 
      Private`L[[9]][#1] . Private`L[[10]][#1] & 
 
MultFun[Private`L_, 11] := Private`L[[1]][#1] . Private`L[[2]][#1] . 
      Private`L[[3]][#1] . Private`L[[4]][#1] . Private`L[[5]][#1] . 
      Private`L[[6]][#1] . Private`L[[7]][#1] . Private`L[[8]][#1] . 
      Private`L[[9]][#1] . Private`L[[10]][#1] . Private`L[[11]][#1] & 
 
MultFun[Private`L_] := MultFun[Private`L, Length[Private`L]]
 
InvFun[Private`F_][Private`k_] := Inverse[Private`F[Private`k]]
 
Jadapt[0][Private`x_, Private`t_] := 
    Adapt[Private`Jsamp[0][Private`x, Private`t], Private`globalTol][
     J[0][Private`x, Private`t]]
 
Jadapt[1][Private`x_, Private`t_] := 
    Adapt[Private`Jsamp[1][Private`x, Private`t], Private`globalTol][
     J[1][Private`x, Private`t]]
 
Adapt[Private`f_, Private`tol_][Private`F_] := 
    Module[{Private`out, Private`save, Private`i, Private`j}, 
     Private`out = Table[TruncateMatrix[Private`tol][Private`f[[All,
          Private`i]]], {Private`i, 1, Length[Transpose[Private`f]]}]; 
      Private`save = {{}}; For[Private`i = 1, Private`i <= 
        Length[Private`out], Private`i++, 
       For[Private`j = 1, Private`j <= Length[Private`out[[Private`i]]], 
         Private`j++, Private`save = Join[Private`save, 
           Transpose[{{Private`F[[1,Private`i]], Private`out[[Private`i,
               Private`j]], Private`F[[3,Private`i]]}}], 2]]; ]; Private`save]
 
TruncateMatrix[Private`tol_][{Private`F_, Domain_, Private`n_}] := 
    Module[{Private`f}, Private`f[Private`x_] := 
       Norm[Private`F[Private`x] - IdentityMatrix[2]]; 
      Truncate[Private`tol][{Private`f, Domain, Private`n}]]
 
Truncate[Private`tol_][{Private`F_, Domain_, Private`n_}] := 
    Module[{Private`f1, Private`vals, Private`x, Private`dx, Private`i, 
      Private`Change}, Private`dx = 0.025/Abs[MapFromIntervalD[Domain, 1]]; 
      Private`f1 = Fun[0 & , Domain, Private`n]; Private`vals = 
       Table[{Abs[Private`F[MapFromInterval[Private`f1, Private`x]]] - 
          Private`tol, MapFromInterval[Private`f1, Private`x]}, 
        {Private`x, -1, 1, Private`dx}]; Private`Change = {}; 
      If[Abs[Private`F[MapFromInterval[Private`f1, -1]]] - Private`tol > 0, 
       Private`Change = {{MapFromInterval[Private`f1, -1], 1}}; ]; 
      For[Private`i = 1, Private`i <= Length[Private`vals] - 1, Private`i++, 
       If[SignChange[Private`vals[[Private`i,1]], Private`vals[[Private`i + 1,
           1]]], Private`Change = Join[Private`Change, 
            {{(Private`vals[[Private`i,2]] + Private`vals[[Private`i + 1,2]])/
               2, Sign[Private`vals[[Private`i + 1,1]]]}}]; ]; ]; 
      If[Private`Change != {} && Private`Change[[-1]][[2]] == 1, 
       Private`Change = Join[Private`Change, 
          {{MapFromInterval[Private`f1, 1], -1}}]; ]; 
      CreateDomains[Private`Change]]
 
Truncate /: Truncate::usage = "Contour truncation routine.  This requires the \
sample function, see Setrsamp[]."
 
Private`f1 = IFun[{-2, -1.9999999195977534 - 0.00040099862308340926*I, 
      -1.9999987297214992 - 0.0015938835227418259*I, 
      -1.9999936276019192 - 0.0035699560128048596*I, 
      -1.9999798456152664 - 0.006348879183020662*I, -1.9999505237426516 - 
       0.009947357975270047*I, -1.9998967305702617 - 0.014371088768537307*I, 
      -1.9998074893520181 - 0.019621010911904345*I, -1.9996688405833702 - 
       0.02573342214870096*I, -1.9994648922624831 - 0.03270977098142152*I, 
      -1.9991761391529175 - 0.04058377689355776*I, -1.9987802907187966 - 
       0.04937540669394286*I, -1.998251373566911 - 0.05911171640491708*I, 
      -1.997559444338413 - 0.06982230987268842*I, -1.9966701097771682 - 
       0.08153951337480775*I, -1.9955440111988463 - 0.09429804709677544*I, 
      -1.994136222486779 - 0.10813496723479958*I, -1.9923955697468714 - 
       0.12308953273025072*I, -1.990263872094717 - 0.13920295781559222*I, 
      -1.987675095229339 - 0.15651806947673583*I, -1.9845544149132621 - 
       0.17507885067159445*I, -1.9808171892526563 - 0.19492983640171463*I, 
      -1.9763678420677793 - 0.2161153320778793*I, -1.9710986640864152 - 
       0.23867841226799724*I, -1.9648885460862764 - 0.26265965358461063*I, 
      -1.957601667918643 - 0.2880955490499568*I, -1.9490861806381536 - 
       0.31501654197567736*I, -1.9391729319863789 - 0.34344461505332324*I, 
      -1.927674315346664 - 0.3733903649537535*I, -1.914383338421597 - 
       0.40484949086230015*I, -1.899073053495624 - 0.4377986344727317*I, 
      -1.8814965186066197 - 0.4721905205310124*I, -1.8613875146717072 - 
       0.5079483727649988*I, -1.8384622849803383 - 0.5449596283328274*I, 
      -1.8124226130817933 - 0.5830690334331619*I, -1.7829605981051588 - 
       0.6220712995570112*I, -1.7497655056000707 - 0.6617036243049689*I, 
      -1.7125330629548556 - 0.7016385352116227*I, -1.6709775090526815 - 
       0.7414777018529342*I, -1.6248465731752506 - 0.7807475647811829*I, 
      -1.5739393297763922 - 0.8188978236398768*I, -1.5181265390958838 - 
       0.8553039748435147*I, -1.4573726353957546 - 0.889275138744501*I, 
      -1.3917579874207826 - 0.9200683013949289*I, -1.3214994892027851 - 
       0.9469097519281499*I, -1.2469670436054807 - 0.9690238796329217*I, 
      -1.1686932098453966 - 0.9856686060495381*I, -1.0873733477644985 - 
       0.9961756361291298*I, -1.0038541316122094 - 0.999992572759284*I, 
      -0.919109374005963 - 0.9967229838948648*I, -0.8342036179231462 - 
       0.9861600071113945*I, -0.7502457000898478 - 0.968309242764014*I, 
      -0.6683361319146323 - 0.9433976248622219*I, -0.5895133052039985 - 
       0.9118665874651095*I, -0.5147039079168649 - 0.8743498744795948*I, 
      -0.4446824163553075 - 0.831638371685874*I, -0.380043201822702 - 
       0.7846359463869063*I, -0.3211869670038582 - 0.7343111508300177*I, 
      -0.2683212962298881 - 0.6816496713459328*I, -0.22147345718732392 - 
       0.6276116810025999*I, -0.18051248143804 - 0.573097030982288*I, 
      -0.1451770758425014 - 0.5189198091489388*I, -0.11510601601432635 - 
       0.4657924828719568*I, -0.08986818728834489 - 0.4143188186417467*I, 
      -0.0689901744350292 - 0.36499411597672893*I, -0.05198008344199323 - 
       0.3182109957308926*I, -0.03834698090376554 - 0.27426897538785006*I, 
      -0.027615889486537926 - 0.23338624985262196*I, 
      -0.019338661810892943 - 0.19571239046135502*I, 
      -0.013101279885707529 - 0.16134099366107782*I, 
      -0.008528225659240385 - 0.13032160482832272*I, 
      -0.005284585199391123 - 0.10267055837982161*I, 
      -0.003076475120203148 - 0.07838039002891928*I, -0.0016503524909118328 - 
       0.05742805340971331*I, -0.0007915999719892985 - 
       0.039781570021987525*I, -0.00032277458740992415 - 
       0.02540560944617536*I, -0.00010176212534240836 - 
       0.014265829633811757*I, -0.000020049005687527988 - 
       0.006332267320011345*I, -1.2510936324705568*^-6 - 
       0.0015818298579612347*I, 0}, Line[{0, Infinity}]]
 
SignChange[Private`x_, Private`y_] := If[Sign[Private`x]*Sign[Private`y] == 
      -1, True, False]
 
CreateDomains[Private`V_] := Module[{Private`i, Private`out}, 
     Private`out = {}; For[Private`i = 1, Private`i <= Length[Private`V], 
       Private`i = Private`i, If[Private`V[[Private`i,2]] == 1, 
         Private`out = Join[Private`out, {Line[{Private`V[[Private`i,1]], 
               Private`V[[Private`i + 1,1]]}]}]; Private`i = Private`i + 2; , 
         Private`i = Private`i + 1; ]; ]; Private`out]
 
Private`Jsamp[0][Private`x_, Private`t_] := 
    {{Private`Gsamp[Private`x, Private`t][#1] & , 
      Private`Gsamp[Private`x, Private`t][#1] & , 
      Private`Gsamp[Private`x, Private`t][#1] & , 
      Private`Gsamp[Private`x, Private`t][#1] & }, 
     {Line[{-Private`el, -0.3}], Line[{-0.3, 0.}], Line[{0, 0.3}], 
      Line[{0.3, Private`el}]}, {Private`bigN, Private`bigN, Private`bigN, 
      Private`bigN}}
 
Private`Jsamp[1][Private`x_, Private`t_] := 
    {{Private`Usamp[Private`x, Private`t][#1] & , 
      Private`Usamp[Private`x, Private`t][#1] & , Private`DDsamp[#1] & , 
      Private`Lsamp[Private`x, Private`t][#1] & , 
      Private`Lsamp[Private`x, Private`t][#1] & , 
      Private`Psamp[Private`x, Private`t][#1] & , 
      Private`Psamp[Private`x, Private`t][#1] & , 
      Private`Msamp[Private`x, Private`t][#1] & , 
      Private`Msamp[Private`x, Private`t][#1] & }, 
     SmallTimeContour[Private`x, Private`t] + Modk0[Private`x, Private`t], 
     {Private`bigN, Private`smallN, Private`bigN, Private`bigN, 
      Private`smallN, Private`smallN, Private`bigN, Private`smallN, 
      Private`bigN}}
 
Private`Gsamp[_, _][_?InfinityQ] := {{1., 0}, {0, 1.}}
 
Private`Gsamp[Private`x_, Private`t_][Private`z_] := 
    {{1 + Private`rsamp[Private`z]*Private`rbsamp[Private`z], 
      Private`rbsamp[Private`z]*Exp[-Private`\[Theta][Private`x, Private`t][
          Private`z]]}, {Private`rsamp[Private`z]*
       Exp[Private`\[Theta][Private`x, Private`t][Private`z]], 1}}
 
Private`rsamp = h
 
h[k_] := 1/2/(1 + Abs[k^2/2 + 1/3.2]^2)
 
Private`rbsamp[Private`k_] := cc[Private`rsamp[cc[Private`k]]]
 
cc[Private`z_] := Conjugate[Private`z]
 
Private`\[Theta][Private`x_, Private`t_][Private`z_] := 
    Piecewise[{{0, Private`z == 0}, 
      {(2*I*((Private`z + 1/Private`z)*Private`t + (Private`z - 1/Private`z)*
           Private`x))/4, Private`z != 0}}]
 
Private`bigN = 40
 
Private`Usamp[Private`x_, Private`t_][Private`k_] := 
    {{1, (Private`rbsamp[Private`k]*
        Exp[-Private`\[Theta][Private`x, Private`t][Private`k]])/
       Private`\[Tau]samp[Private`k]}, {0, 1}}
 
Private`\[Tau]samp[Private`k_] := 1 + Private`rsamp[Private`k]*
      cc[Private`rsamp[cc[Private`k]]]
 
Private`DDsamp[Private`k_] := {{Private`\[Tau]samp[Private`k], 0}, 
     {0, 1/Private`\[Tau]samp[Private`k]}}
 
Private`Lsamp[Private`x_, Private`t_][Private`k_] := 
    {{1, 0}, {(Private`rsamp[Private`k]*
        Exp[Private`\[Theta][Private`x, Private`t][Private`k]])/
       Private`\[Tau]samp[Private`k], 1}}
 
Private`Psamp[Private`x_, Private`t_][Private`k_] := 
    {{1, 0}, {Private`rsamp[Private`k]*
       Exp[Private`\[Theta][Private`x, Private`t][Private`k]], 1}}
 
Private`Msamp[Private`x_, Private`t_][Private`k_] := 
    {{1, Private`rbsamp[Private`k]*
       Exp[-Private`\[Theta][Private`x, Private`t][Private`k]]}, {0, 1}}
 
SmallTimeContour[Private`x_, Private`t_] := 
    {Line[{-Private`el + I*Private`\[Nu], Sqrt[2]*Private`\[Nu]*
        Exp[(I*3*Pi)/4]}], Line[{Sqrt[2]*Private`\[Nu]*Exp[(I*3*Pi)/4], 0}], 
     Line[{-Private`el, 0}], Line[{-Private`el - I*Private`\[Nu], 
       Sqrt[2]*Private`\[Nu]*Exp[(I*5*Pi)/4]}], 
     Line[{Sqrt[2]*Private`\[Nu]*Exp[(I*5*Pi)/4], 0}], 
     Line[{0, Sqrt[2]*Private`\[Nu]*Exp[(I*Pi)/4]}], 
     Line[{Sqrt[2]*Private`\[Nu]*Exp[(I*Pi)/4], I*Private`\[Nu] + 
        Private`el}], Line[{0, Sqrt[2]*Private`\[Nu]*Exp[-((I*Pi)/4)]}], 
     Line[{Sqrt[2]*Private`\[Nu]*Exp[-((I*Pi)/4)], -(I*Private`\[Nu]) + 
        Private`el}]}
 
Private`\[Nu] = 0.4
 
Modk0[Private`x_, Private`t_] := If[Private`t < 10*$MachineEpsilon, 
     -((Sign[Private`x]*Private`el)/2), 
     -(Sign[Private`x]*Min[Abs[Private`x/(4*Private`t)], Private`el/2])]
 
Private`smallN = 20
 
Private`globalTol = 1.*^-6
 
J[0][Private`x_, Private`t_] := {{G[Private`x, Private`t][#1] & , 
      G[Private`x, Private`t][#1] & , G[Private`x, Private`t][#1] & , 
      G[Private`x, Private`t][#1] & }, {Line[{-Private`el, -0.3}], 
      Line[{-0.3, 0.}], Line[{0, 0.3}], Line[{0.3, Private`el}]}, 
     {Private`bigN, Private`bigN, Private`bigN, Private`bigN}}
 
J[1][Private`x_, Private`t_] := {{U[Private`x, Private`t][#1] & , 
      U[Private`x, Private`t][#1] & , Private`DD[#1] & , 
      L[Private`x, Private`t][#1] & , L[Private`x, Private`t][#1] & , 
      P[Private`x, Private`t][#1] & , P[Private`x, Private`t][#1] & , 
      M[Private`x, Private`t][#1] & , M[Private`x, Private`t][#1] & }, 
     SmallTimeContour[Private`x, Private`t] + Modk0[Private`x, Private`t], 
     {Private`bigN, Private`smallN, Private`bigN, Private`bigN, 
      Private`smallN, Private`smallN, Private`bigN, Private`smallN, 
      Private`bigN}}
 
G[_, _][_?InfinityQ] := {{1., 0}, {0, 1.}}
 
G[Private`x_, Private`t_][Private`z_] := 
    {{1 + Private`r[Private`z]*Private`rb[Private`z], 
      Private`rb[Private`z]*Exp[-Private`\[Theta][Private`x, Private`t][
          Private`z]]}, {Private`r[Private`z]*
       Exp[Private`\[Theta][Private`x, Private`t][Private`z]], 1}}
 
Private`rb[Private`k_] := cc[Private`r[cc[Private`k]]]
 
U[Private`x_, Private`t_][Private`k_] := 
    {{1, (Private`rb[Private`k]*Exp[-Private`\[Theta][Private`x, Private`t][
           Private`k]])/Private`\[Tau][Private`k]}, {0, 1}}
 
Private`\[Tau][_?InfinityQ] := 1
 
Private`\[Tau][Private`k_List] := Private`\[Tau] /@ Private`k
 
Private`\[Tau][Private`k_] := 1 + Private`r[Private`k]*
      cc[Private`r[cc[Private`k]]]
 
Private`DD[Private`k_] := {{Private`\[Tau][Private`k], 0}, 
     {0, 1/Private`\[Tau][Private`k]}}
 
L[Private`x_, Private`t_][Private`k_] := 
    {{1, 0}, {(Private`r[Private`k]*Exp[Private`\[Theta][Private`x, 
           Private`t][Private`k]])/Private`\[Tau][Private`k], 1}}
 
P[Private`x_, Private`t_][Private`k_] := 
    {{1, 0}, {Private`r[Private`k]*Exp[Private`\[Theta][Private`x, Private`t][
         Private`k]], 1}}
 
M[Private`x_, Private`t_][Private`k_] := 
    {{1, Private`rb[Private`k]*Exp[-Private`\[Theta][Private`x, Private`t][
          Private`k]]}, {0, 1}}
 
Q[Private`x_, Private`t_][_?InfinityQ] := {{1., 0}, {0, 1.}}
 
Q[Private`x_, Private`t_][Private`k_] := 
    {{Private`qq[Private`x, Private`t][Private`k], 0}, 
     {0, 1/Private`qq[Private`x, Private`t][Private`k]}}
 
Private`qq[Private`x_, Private`t_][Private`k_] := 
    Module[{Private`out, Private`i}, Private`out = 1; 
      For[Private`i = 1, Private`i <= Length[Private`a], Private`i++, 
       If[Abs[Private`c[[Private`i]]]*Exp[Re[Private`\[Theta][Private`x, 
               Private`t][Private`a[[Private`i]]]]] > Private`expconst, 
         Private`out = (Private`out*(Private`k - Private`a[[Private`i]]))/
            (Private`k - Conjugate[Private`a[[Private`i]]]); ]; ]; 
      Private`out]
 
Private`expconst = 100
 
domainOutput = Graphics[{{Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], Point[{-37.58749999999999, 0}], 
       Point[{-0.29999999999999716, 0}], Arrow[{{-37.58749999999999, 0}, 
         {-0.29999999999999716, 0}}]}, {Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], Point[{-0.3, 0}], 
       Point[{0., 0}], Arrow[{{-0.3, 0}, {0., 0}}]}, 
      {Thickness[Large], RGBColor[0, 0, 1], PointSize[Large], 
       Arrowheads[Medium], Point[{0., 0}], Point[{0.3, 0}], 
       Arrow[{{0., 0}, {0.3, 0}}]}, {Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], Point[{0.29999999999999716, 0}], 
       Point[{37.587500000000006, 0}], Arrow[{{0.29999999999999716, 0}, 
         {37.587500000000006, 0}}]}}, {PlotRange -> All, Axes -> True}]
 
DomainPlot[Line[{Private`a_, (Private`b_)?InfinityQ}, ___], 
     Private`opts___] := Graphics[{Thick, Blue, Arrowheads[Large], 
      PointSize[Large], Point[({Re[#1], Im[#1]} & )[Private`a]], 
      Arrow[{({Re[#1], Im[#1]} & )[Private`a], ({Re[#1], Im[#1]} & )[
         Private`a + 2*Exp[I*Arg[Private`b]]]}]}, Private`opts, Axes -> True]
 
DomainPlot[Line[{(Private`a_)?InfinityQ, Private`b_}, ___], 
     Private`opts___] := Graphics[{Thick, Blue, Arrowheads[Large], 
      PointSize[Large], Point[({Re[#1], Im[#1]} & )[Private`b]], 
      Arrow[{({Re[#1], Im[#1]} & )[Private`b + 2*Exp[I*Arg[Private`a]]], 
        ({Re[#1], Im[#1]} & )[Private`b]}]}, Private`opts, Axes -> True]
 
DomainPlot[Line[{Private`a_, Private`b_}, ___], Private`opts___] := 
    Graphics[{Thick, Blue, PointSize[Large], Arrowheads[Medium], 
      Point[({Re[#1], Im[#1]} & )[Private`a]], 
      Point[({Re[#1], Im[#1]} & )[Private`b]], 
      Arrow[{({Re[#1], Im[#1]} & )[Private`a], ({Re[#1], Im[#1]} & )[
         Private`b]}]}, Private`opts, Axes -> True]
 
DomainPlot[Arc[Private`z0_, Private`r_, {Private`t0_, Private`t1_}], 
     Private`opts___] := Graphics[{Thick, Blue, PointSize[Large], 
      Arrowheads[Medium], Point[({Re[#1], Im[#1]} & )[
        Private`z0 + Private`r*Exp[I*Private`t0]]], 
      Point[({Re[#1], Im[#1]} & )[Private`z0 + Private`r*Exp[I*Private`t1]]], 
      Arrow[{({Re[#1], Im[#1]} & )[Private`z0 + Private`r*
           Exp[I*(Private`t1 - 0.0001*Sign[Private`t1 - Private`t0])]], 
        ({Re[#1], Im[#1]} & )[Private`z0 + Private`r*Exp[I*Private`t1]]}], 
      Circle[({Re[#1], Im[#1]} & )[Private`z0], Private`r, 
       Sort[N[{Private`t0, Private`t1}]]]}, Private`opts, Axes -> True]
 
DomainPlot[Circle[Private`z0_, Private`r_], Private`opts___] := 
    Graphics[{Thick, Blue, PointSize[Large], Arrowheads[Medium], 
      Arrow[{({Re[#1], Im[#1]} & )[Private`z0 + Private`r*Exp[I*0.2]], 
        ({Re[#1], Im[#1]} & )[Private`z0 + Private`r*Exp[I*0.2001]]}], 
      Circle[({Re[#1], Im[#1]} & )[Private`z0], Private`r]}, Private`opts, 
     Axes -> True]
 
DomainPlot[Circle[Private`z0_, Private`r_, Orientation -> 1], 
     Private`opts___] := DomainPlot[Circle[Private`z0, Private`r], 
     Private`opts]
 
DomainPlot[Circle[Private`z0_, Private`r_, Orientation -> -1], 
     Private`opts___] := Graphics[{Thick, Blue, PointSize[Large], 
      Arrowheads[Medium], Arrow[{({Re[#1], Im[#1]} & )[
         Private`z0 + Private`r*Exp[I*0.2001]], ({Re[#1], Im[#1]} & )[
         Private`z0 + Private`r*Exp[I*0.2]]}], 
      Circle[({Re[#1], Im[#1]} & )[Private`z0], Private`r]}, Private`opts, 
     Axes -> True]
 
DomainPlot[Private`ell_Ellipse, Private`opts___] := 
    Module[{Private`t}, Show[ComplexPlot[MapFromCircle[Private`ell, 
        Exp[I*Private`t]], {Private`t, -Pi, Pi}, PlotStyle -> Thick], 
      Graphics[{Thick, Blue, PointSize[Large], Arrowheads[Medium], 
        Arrow[{({Re[#1], Im[#1]} & )[MapFromCircle[Private`ell, Exp[I*0.2]]], 
          ({Re[#1], Im[#1]} & )[MapFromCircle[Private`ell, 
            Exp[I*0.2001]]]}]}, Private`opts, Axes -> True]]]
 
DomainPlot[Point[Private`z0_], Private`opts___] := 
    Graphics[{Thick, Blue, PointSize[Large], Arrowheads[Medium], 
      Point[{Re[Private`z0], Im[Private`z0]}]}, Private`opts, Axes -> True]
 
DomainPlot[(Private`if_)?FunQ, Private`opts___] := 
    DomainPlot[Domain[Private`if], Private`opts]
 
DomainPlot[Private`l_List, Private`opts___] := 
    Show[(DomainPlot[#1, Private`opts] & ) /@ Private`l, PlotRange -> All]
 
DomainPlot[Curve[Private`cf_, ___], Private`opts:OptionsPattern[]] := 
    Show[ComplexPlot[Private`cf, Private`opts, PlotStyle -> {Thick, Blue}], 
     Graphics[{Arrowheads[Medium], Blue, 
       Arrow[{({Re[#1], Im[#1]} & )[Last[Values[Private`cf]]], 
         ({Re[#1], Im[#1]} & )[Last[Values[Private`cf]] + 
           0.01*Exp[I*Arg[Last[Values[Private`cf]] - Values[Private`cf][[
                 -2]]]]]}]}]]
 
DomainPlot[Private`f_SingFun] := DomainPlot[First[Private`f]]
 
Options[DomainPlot] = {AlignmentPoint -> Center, AspectRatio -> Automatic, 
     Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, 
     AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, 
     BaseStyle -> {}, ColorOutput -> Automatic, ContentSelectable -> 
      Automatic, CoordinatesToolOptions -> Automatic, 
     DisplayFunction :> $DisplayFunction, Epilog -> {}, 
     FormatType :> TraditionalForm, Frame -> False, FrameLabel -> None, 
     FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
     GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
     ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, 
     LabelStyle -> {}, Method -> Automatic, PlotLabel -> None, 
     PlotRange -> All, PlotRangeClipping -> False, 
     PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
     PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True, 
     Ticks -> Automatic, TicksStyle -> {}}
 
DomainPlot /: DomainPlot::usage = "DomainPlot[ifun] plots the domain of ifun. \
DomainPlot[list] plots the union of the domains of a list of IFuns"
 
ComplexPlot[Private`hlis_, Private`b_List, Private`opts:OptionsPattern[]] := 
    Module[{Private`h, Private`hlist}, 
     Private`hlist = Flatten[{Private`hlis}]; 
      Show[Function[Private`h, ParametricPlot[{Re[Private`h], Im[Private`h]}, 
          Private`b, Private`opts]] /@ Private`hlist]]
 
ComplexPlot[Private`cf_IFun, Private`opts:OptionsPattern[]] := 
    ListLinePlot[Values[({Re[#1], Im[#1]} & ) /@ Private`cf], Private`opts]
 
ComplexPlot[Private`cf_LFun, Private`opts:OptionsPattern[]] := 
    ListLinePlot[Values[({Re[#1], Im[#1]} & ) /@ Private`cf], Private`opts]
 
Options[ComplexPlot] = {AlignmentPoint -> Center, AspectRatio -> Automatic, 
     Axes -> True, AxesLabel -> None, AxesOrigin -> Automatic, 
     AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, 
     BaseStyle -> {}, BoundaryStyle -> Automatic, ColorFunction -> Automatic, 
     ColorFunctionScaling -> True, ColorOutput -> Automatic, 
     ContentSelectable -> Automatic, CoordinatesToolOptions -> Automatic, 
     DisplayFunction :> $DisplayFunction, Epilog -> {}, 
     Evaluated -> Automatic, EvaluationMonitor -> None, 
     Exclusions -> Automatic, ExclusionsStyle -> None, 
     FormatType :> TraditionalForm, Frame -> Automatic, FrameLabel -> None, 
     FrameStyle -> {}, FrameTicks -> Automatic, FrameTicksStyle -> {}, 
     GridLines -> None, GridLinesStyle -> {}, ImageMargins -> 0., 
     ImagePadding -> All, ImageSize -> Automatic, ImageSizeRaw -> Automatic, 
     LabelStyle -> {}, MaxRecursion -> Automatic, Mesh -> Automatic, 
     MeshFunctions -> Automatic, MeshShading -> None, MeshStyle -> Automatic, 
     Method -> Automatic, PerformanceGoal :> $PerformanceGoal, 
     PlotLabel -> None, PlotLegends -> None, PlotPoints -> Automatic, 
     PlotRange -> Automatic, PlotRangeClipping -> True, 
     PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
     PlotStyle -> Automatic, PlotTheme :> $PlotTheme, 
     PreserveImageOptions -> Automatic, Prolog -> {}, 
     RegionFunction -> (True & ), RotateLabel -> True, 
     TargetUnits -> Automatic, TextureCoordinateFunction -> Automatic, 
     TextureCoordinateScaling -> Automatic, Ticks -> Automatic, 
     TicksStyle -> {}, WorkingPrecision -> MachinePrecision}
 
ComplexPlot /: ComplexPlot::usage = "ComplexPlot[f[t],{t,a,b}] plots the \
trajectory in the complex plane of f from a to b."
 
$DisplayFunction = Identity
 
Attributes[$PlotTheme] = {ReadProtected}
 
Grhp1 = {IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}}, 
      Line[{-37.58749999999999, -0.29999999999999716}]], 
     IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1, 0}, {0, 1}}}, Line[{-0.3, 0.}]], 
     IFun[{{{1, 0}, {0, 1}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}}, Line[{0., 0.3}]], 
     IFun[{{{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0. + 0.*I, 1. + 0.*I}}}, 
      Line[{0.29999999999999716, 37.587500000000006}]]}
 
Private`PoleListn[Private`x_, Private`t_] := 
    Module[{Private`out, Private`i, Domain, Private`Jumps, Points}, 
     Domain = {}; Private`Jumps = {}; Points = {}; For[Private`i = 1, 
       Private`i <= Length[Private`a], Private`i++, 
       If[1/Private`globalTol > Abs[Private`c[[Private`i]]]*
            Exp[Re[Private`\[Theta][Private`x, Private`t][Private`a[[
                Private`i]]]]] && Abs[Private`c[[Private`i]]]*
            Exp[Re[Private`\[Theta][Private`x, Private`t][Private`a[[
                Private`i]]]]] > Private`globalTol, 
         If[Abs[Private`c[[Private`i]]]*Exp[Re[Private`\[Theta][Private`x, 
                 Private`t][Private`a[[Private`i]]]]] > Private`expconst, 
           Private`Jumps = Join[Private`Jumps, {Private`S[Plus[1]][Private`x, 
                Private`t, Private`a[[Private`i]], Private`c[[Private`i]]], 
               Private`S[Plus[1]][Private`x, Private`t, Private`a[[
                 Private`i]], Private`c[[Private`i]]]}]; Private`Jumps = 
             Join[Private`Jumps, {Private`S[-1][Private`x, Private`t, 
                Private`a[[Private`i]], Private`c[[Private`i]]], Private`S[
                 -1][Private`x, Private`t, Private`a[[Private`i]], 
                Private`c[[Private`i]]]}]; Private`flag = "pos"; , 
           Private`Jumps = Join[Private`Jumps, {Private`T[Plus[1]][Private`x, 
                Private`t, Private`a[[Private`i]], Private`c[[Private`i]]], 
               Private`T[Plus[1]][Private`x, Private`t, Private`a[[
                 Private`i]], Private`c[[Private`i]]]}]; Private`Jumps = 
             Join[Private`Jumps, {Private`T[-1][Private`x, Private`t, 
                Private`a[[Private`i]], Private`c[[Private`i]]], Private`T[
                 -1][Private`x, Private`t, Private`a[[Private`i]], 
                Private`c[[Private`i]]]}]; Private`flag = "neg"; ]; 
          Domain = Join[Domain, Join[Private`ContourArray[Plus[1], 
              Private`rad, Private`a[[Private`i]]], Private`ContourArray[-1, 
              Private`rad, Private`a[[Private`i]]]]]; 
          Points = Join[Points, {Private`smallN, Private`smallN, 
             Private`smallN, Private`smallN}]; ]; ]; 
      {Private`Jumps, Domain, Points}]
 
Private`S[1][Private`x_, Private`t_, Private`a_, Private`c_][Private`z_] := 
    {{1, -(((Private`z - Private`a)*Exp[-Private`\[Theta][Private`x, 
             Private`t][Private`a]])/Private`c)}, {0, 1}}
 
Private`S[-1][Private`x_, Private`t_, Private`a_, Private`c_][Private`z_] := 
    {{1, 0}, {cc[-(((cc[Private`z] - Private`a)*
          Exp[-Private`\[Theta][Private`x, Private`t][Private`a]])/
         Private`c)], 1}}
 
Private`flag = "neg"
 
Private`T[1][Private`x_, Private`t_, Private`a_, Private`c_][Private`z_] := 
    {{1, 0}, {-((Private`c*Exp[Private`\[Theta][Private`x, Private`t][
           Private`a]])/(Private`z - Private`a)), 1}}
 
Private`T[-1][Private`x_, Private`t_, Private`a_, Private`c_][Private`z_] := 
    {{1, cc[-((Private`c*Exp[Private`\[Theta][Private`x, Private`t][
            Private`a]])/(cc[Private`z] - Private`a))]}, {0, 1}}
 
Private`ContourArray[1, Private`r_, Private`a_] := 
    {Arc[Private`a, Private`r, {0, Pi}], Arc[Private`a, Private`r, 
      {Pi, 2*Pi}]}
 
Private`ContourArray[-1, Private`r_, Private`a_] := 
    {Arc[cc[Private`a], Private`r, {0, -Pi}], Arc[cc[Private`a], Private`r, 
      {-Pi, -2*Pi}]}
 
Private`rad = 0.2
 
Grhp2 = {IFun[{{{1. + 0.*I, 0. + 0.*I}, {-2.39752517300462*^-16 - 
        0.10495038125896403*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.0014411466099050838 - 0.10494048609974448*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.005840317580212093 - 
        0.10478775318215468*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.013405316744267674 - 0.10409072969956432*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.024398995498130134 - 
        0.10207483306419922*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.03894437193144388 - 0.09745726458949712*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.056617099712656736 - 
        0.08836903612990808*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.07578677564631289 - 0.07260128899363522*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.09302006370709359 - 
        0.048598871121973135*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.10352868986002692 - 0.017216065237685613*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.10352868986002678 + 
        0.017216065237686252*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.09302006370709341 + 0.048598871121973516*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.07578677564631256 + 
        0.07260128899363577*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.056617099712656334 + 0.08836903612990833*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.03894437193144325 + 
        0.09745726458949747*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.02439899549812967 + 0.10207483306419933*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.013405316744267199 + 
        0.1040907296995644*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {-0.005840317580211612 + 0.10478775318215466*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-0.001441146609904604 + 
        0.10494048609974446*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {2.39752517300462*^-16 + 0.10495038125896403*I, 1. + 0.*I}}}, 
      Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {0, Pi}]], 
     IFun[{{{1. + 0.*I, 0. + 0.*I}, {2.39752517300462*^-16 + 
        0.10495038125896403*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.0014411466099049676 + 0.1049404860997445*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0.00584031758021163 + 0.10478775318215473*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.01340531674426768 + 
        0.10409072969956432*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.024398995498130356 + 0.10207483306419914*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0.038944371931443685 + 
        0.09745726458949742*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.05661709971265682 + 0.08836903612990799*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0.07578677564631277 + 0.07260128899363533*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.09302006370709354 + 
        0.04859887112197316*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.10352868986002693 + 0.01721606523768592*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0.10352868986002696 - 0.017216065237686446*
         I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.09302006370709326 - 
        0.04859887112197361*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.0757867756463124 - 0.07260128899363567*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0. + 0.*I}, {0.056617099712656334 - 0.08836903612990833*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.038944371931443476 - 
        0.09745726458949737*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.024398995498129978 - 0.10207483306419915*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {0.013405316744267199 - 0.1040907296995644*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, {0.005840317580211151 - 
        0.10478775318215476*I, 1. + 0.*I}}, {{1. + 0.*I, 0. + 0.*I}, 
       {0.001441146609904488 - 0.1049404860997445*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0. + 0.*I}, {-2.39752517300462*^-16 - 
        0.10495038125896403*I, 1. + 0.*I}}}, 
      Arc[-7.281369675782328*^-16 + 2.0000000759311227*I, 0.2, {Pi, 2*Pi}]], 
     IFun[{{{1. + 0.*I, -2.39752517300462*^-16 + 0.10495038125896403*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, -0.0014411466099050838 + 
        0.10494048609974448*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.005840317580212093 + 0.10478775318215468*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.013405316744267674 + 
        0.10409072969956432*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.024398995498130134 + 0.10207483306419922*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.03894437193144388 + 
        0.09745726458949712*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.056617099712656736 + 0.08836903612990808*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.07578677564631289 + 
        0.07260128899363522*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.09302006370709359 + 0.048598871121973135*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.10352868986002692 + 
        0.017216065237685613*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.10352868986002678 - 0.017216065237686252*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.09302006370709341 - 
        0.048598871121973516*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.07578677564631256 - 0.07260128899363577*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.056617099712656334 - 
        0.08836903612990833*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.03894437193144325 - 0.09745726458949747*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.02439899549812967 - 
        0.10207483306419933*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.013405316744267199 - 0.1040907296995644*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, -0.005840317580211612 - 
        0.10478775318215466*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -0.001441146609904604 - 0.10494048609974446*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 2.39752517300462*^-16 - 
        0.10495038125896403*I}, {0. + 0.*I, 1. + 0.*I}}}, 
      Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, {0, -Pi}]], 
     IFun[{{{1. + 0.*I, 2.39752517300462*^-16 - 0.10495038125896403*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.0014411466099049676 - 
        0.1049404860997445*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.00584031758021163 - 0.10478775318215473*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0.01340531674426768 - 0.10409072969956432*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0.024398995498130356 - 
        0.10207483306419914*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.038944371931443685 - 0.09745726458949742*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0.05661709971265682 - 0.08836903612990799*
         I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.07578677564631277 - 
        0.07260128899363533*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.09302006370709354 - 0.04859887112197316*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0.10352868986002693 - 0.01721606523768592*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0.10352868986002696 + 0.017216065237686446*
         I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.09302006370709326 + 
        0.04859887112197361*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.0757867756463124 + 0.07260128899363567*I}, {0. + 0.*I, 1. + 0.*I}}, 
       {{1. + 0.*I, 0.056617099712656334 + 0.08836903612990833*I}, 
       {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 0.038944371931443476 + 
        0.09745726458949737*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.024398995498129978 + 0.10207483306419915*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0.013405316744267199 + 
        0.1040907296995644*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       0.005840317580211151 + 0.10478775318215476*I}, {0. + 0.*I, 
       1. + 0.*I}}, {{1. + 0.*I, 0.001441146609904488 + 
        0.1049404860997445*I}, {0. + 0.*I, 1. + 0.*I}}, {{1. + 0.*I, 
       -2.39752517300462*^-16 + 0.10495038125896403*I}, {0. + 0.*I, 
       1. + 0.*I}}}, Arc[-7.281369675782328*^-16 - 2.0000000759311227*I, 0.2, 
       {-Pi, -2*Pi}]]}
 
domainOutput2 = Graphics[{{Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], 
       Point[{0.1999999999999993, 2.0000000759311227}], 
       Point[{-0.20000000000000073, 2.0000000759311227}], 
       Arrow[{{-0.19999999900000073, 2.0000200759310895}, 
         {-0.20000000000000073, 2.0000000759311227}}], 
       Circle[{-7.281369675782328*^-16, 2.0000000759311227}, 0.2, 
        {0., 3.141592653589793}]}, {Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], 
       Point[{-0.20000000000000073, 2.0000000759311227}], 
       Point[{0.1999999999999993, 2.0000000759311227}], 
       Arrow[{{0.1999999989999993, 1.9999800759311561}, {0.1999999999999993, 
          2.0000000759311227}}], Circle[{-7.281369675782328*^-16, 
         2.0000000759311227}, 0.2, {3.141592653589793, 6.283185307179586}]}, 
      {Thickness[Large], RGBColor[0, 0, 1], PointSize[Large], 
       Arrowheads[Medium], Point[{0.1999999999999993, -2.0000000759311227}], 
       Point[{-0.20000000000000073, -2.0000000759311227}], 
       Arrow[{{-0.19999999900000073, -2.0000200759310895}, 
         {-0.20000000000000073, -2.0000000759311227}}], 
       Circle[{-7.281369675782328*^-16, -2.0000000759311227}, 0.2, 
        {-3.141592653589793, 0.}]}, {Thickness[Large], RGBColor[0, 0, 1], 
       PointSize[Large], Arrowheads[Medium], 
       Point[{-0.20000000000000073, -2.0000000759311227}], 
       Point[{0.1999999999999993, -2.0000000759311227}], 
       Arrow[{{0.1999999989999993, -1.9999800759311561}, 
         {0.1999999999999993, -2.0000000759311227}}], 
       Circle[{-7.281369675782328*^-16, -2.0000000759311227}, 0.2, 
        {-6.283185307179586, -3.141592653589793}]}}, 
     {PlotRange -> All, Axes -> True}]
 
timestring = "Region: 0 (3.,2.) 1) Construct: 0.640625  1) Solve: 0.421875  \
2) Construct: 0.8125  2) Solve: 0.21875"
 
timestring /: timestring::usage = "A string updated by mKdV[i][x,t]\n(x,t) 1) \
Construct: --time to construct rhp1-- 1) Solve: --time to solve rhp1-- 2) \
Construct: --time to construct rhp2-- 2) Solve: --time to solve rhp2--"
 
Private`timeflag = False
 
Private`tcrit = 8
